
Satyrr_Loadcell_Amplifier_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c040  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800c220  0800c220  0001c220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c75c  0800c75c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c764  0800c764  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c764  0800c764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001e0  0800c950  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800c950  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dfd  00000000  00000000  00041238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  00045038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001948  00000000  00000000  00046b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d33  00000000  00000000  00048470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec1a  00000000  00000000  0006e1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6190  00000000  00000000  0008cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172f4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088f0  00000000  00000000  00172fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c208 	.word	0x0800c208

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800c208 	.word	0x0800c208

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <_ZN20Protocentral_ADS1220C1Ev>:
extern SPI_HandleTypeDef hspi1;

extern UART_HandleTypeDef huart2;


Protocentral_ADS1220::Protocentral_ADS1220() 								// Constructors
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
{

}
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>:

void Protocentral_ADS1220::writeRegister(uint8_t address, uint8_t value)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
 800106c:	4613      	mov	r3, r2
 800106e:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuffer[2];
    txBuffer[0] = WREG | (uint8_t)(address << 2);
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107a:	b2db      	uxtb	r3, r3
 800107c:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = value;
 800107e:	78bb      	ldrb	r3, [r7, #2]
 8001080:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_RESET);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6998      	ldr	r0, [r3, #24]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	8a9b      	ldrh	r3, [r3, #20]
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	f003 fadb 	bl	8004648 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SPI_HANDLE, txBuffer, 2, 100);
 8001092:	f107 010c 	add.w	r1, r7, #12
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2202      	movs	r2, #2
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <_ZN20Protocentral_ADS122013writeRegisterEhh+0x58>)
 800109c:	f004 fb5f 	bl	800575e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_SET);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6998      	ldr	r0, [r3, #24]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	8a9b      	ldrh	r3, [r3, #20]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	f003 facc 	bl	8004648 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000360 	.word	0x20000360

080010bc <_ZN20Protocentral_ADS12205beginEP12GPIO_TypeDeftS1_t>:
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_SET);
    return rxBuffer[1];
}

void Protocentral_ADS1220::begin(GPIO_TypeDef* cs_port, uint16_t cs_pin, GPIO_TypeDef* drdy_port, uint16_t drdy_pin)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80fb      	strh	r3, [r7, #6]
    m_drdy_pin = drdy_pin;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80010d0:	819a      	strh	r2, [r3, #12]
    m_cs_pin = cs_pin;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	88fa      	ldrh	r2, [r7, #6]
 80010d6:	829a      	strh	r2, [r3, #20]
    m_cs_port = cs_port;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	619a      	str	r2, [r3, #24]
    m_drdy_port = drdy_port;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	611a      	str	r2, [r3, #16]

    // Set CS pin as output and initialize it to high
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = m_cs_pin;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a9b      	ldrh	r3, [r3, #20]
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(m_cs_port, &GPIO_InitStruct);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f107 0214 	add.w	r2, r7, #20
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f003 f917 	bl	8004344 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_SET);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6998      	ldr	r0, [r3, #24]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8a9b      	ldrh	r3, [r3, #20]
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f003 fa91 	bl	8004648 <HAL_GPIO_WritePin>

    // Set DRDY pin as input with pull-up (assuming DRDY is active low, change to GPIO_PULLDOWN if active high)
    GPIO_InitStruct.Pin = m_drdy_pin;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	899b      	ldrh	r3, [r3, #12]
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(m_drdy_port, &GPIO_InitStruct);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	f107 0214 	add.w	r2, r7, #20
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f003 f900 	bl	8004344 <HAL_GPIO_Init>

    // Initialize SPI1 peripheral (assuming SPI1 is used)
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001144:	481d      	ldr	r0, [pc, #116]	; (80011bc <_ZN20Protocentral_ADS12205beginEP12GPIO_TypeDeftS1_t+0x100>)
 8001146:	f004 fa5f 	bl	8005608 <HAL_SPI_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
        // Handle SPI initialization error
    }

    // Perform ADS1220 reset
    ads1220_Reset();
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f85c 	bl	800120c <_ZN20Protocentral_ADS122013ads1220_ResetEv>
    HAL_Delay(50);
 8001154:	2032      	movs	r0, #50	; 0x32
 8001156:	f001 fb5f 	bl	8002818 <HAL_Delay>

    // Wait for the device to pull DRDY low after initialization
    if (!WaitForData(1)) {
 800115a:	2101      	movs	r1, #1
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 f91f 	bl	80013a0 <_ZN20Protocentral_ADS122011WaitForDataEj>
        // Handle timeout error
    }

    // Configure ADS1220 registers
    m_config_reg0 = 0x00; // Default settings: AINP=AIN0, AINN=AIN1, Gain 1, PGA enabled
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
    m_config_reg1 = 0x04; // Default settings: DR=20 SPS, Mode=Normal, Conv mode=continuous, Temp Sensor disabled, Current Source off
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2204      	movs	r2, #4
 800116c:	705a      	strb	r2, [r3, #1]
    m_config_reg2 = 0x10; // Default settings: Vref internal, 50/60Hz rejection, power open, IDAC off
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2210      	movs	r2, #16
 8001172:	709a      	strb	r2, [r3, #2]
    m_config_reg3 = 0x00; // Default settings: IDAC1 disabled, IDAC2 disabled, DRDY pin only
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	70da      	strb	r2, [r3, #3]

    writeRegister(CONFIG_REG0_ADDRESS, m_config_reg0);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	2100      	movs	r1, #0
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff6c 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
    writeRegister(CONFIG_REG1_ADDRESS, m_config_reg1);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	461a      	mov	r2, r3
 800118e:	2101      	movs	r1, #1
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff ff65 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
    writeRegister(CONFIG_REG2_ADDRESS, m_config_reg2);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	789b      	ldrb	r3, [r3, #2]
 800119a:	461a      	mov	r2, r3
 800119c:	2102      	movs	r1, #2
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff5e 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
    writeRegister(CONFIG_REG3_ADDRESS, m_config_reg3);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	461a      	mov	r2, r3
 80011aa:	2103      	movs	r1, #3
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff ff57 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000360 	.word	0x20000360

080011c0 <_ZN20Protocentral_ADS122011SPI_CommandEh>:
//    printf(Config_Reg3,HEX);
//    printf(" ");
}

void Protocentral_ADS1220::SPI_Command(uint8_t data_in)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
    uint8_t rxBuffer;

    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_RESET);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6998      	ldr	r0, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	8a9b      	ldrh	r3, [r3, #20]
 80011d4:	2200      	movs	r2, #0
 80011d6:	4619      	mov	r1, r3
 80011d8:	f003 fa36 	bl	8004648 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SPI_HANDLE, &data_in, &rxBuffer, 1, 100);
 80011dc:	f107 020f 	add.w	r2, r7, #15
 80011e0:	1cf9      	adds	r1, r7, #3
 80011e2:	2364      	movs	r3, #100	; 0x64
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <_ZN20Protocentral_ADS122011SPI_CommandEh+0x48>)
 80011ea:	f004 fc26 	bl	8005a3a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_SET);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6998      	ldr	r0, [r3, #24]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8a9b      	ldrh	r3, [r3, #20]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	f003 fa25 	bl	8004648 <HAL_GPIO_WritePin>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000360 	.word	0x20000360

0800120c <_ZN20Protocentral_ADS122013ads1220_ResetEv>:

void Protocentral_ADS1220::ads1220_Reset()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    uint8_t txBuffer[1] = {RESET};
 8001214:	2306      	movs	r3, #6
 8001216:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_RESET);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6998      	ldr	r0, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	8a9b      	ldrh	r3, [r3, #20]
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	f003 fa10 	bl	8004648 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SPI_HANDLE, txBuffer, 1, 100);
 8001228:	f107 010c 	add.w	r1, r7, #12
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	2201      	movs	r2, #1
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <_ZN20Protocentral_ADS122013ads1220_ResetEv+0x44>)
 8001232:	f004 fa94 	bl	800575e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_SET);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6998      	ldr	r0, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	8a9b      	ldrh	r3, [r3, #20]
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	f003 fa01 	bl	8004648 <HAL_GPIO_WritePin>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000360 	.word	0x20000360

08001254 <_ZN20Protocentral_ADS122010Start_ConvEv>:

void Protocentral_ADS1220::Start_Conv()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    SPI_Command(START);
 800125c:	2108      	movs	r1, #8
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffae 	bl	80011c0 <_ZN20Protocentral_ADS122011SPI_CommandEh>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN20Protocentral_ADS122019select_mux_channelsEi>:

// control register 0
void Protocentral_ADS1220::select_mux_channels(int channels_conf)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    m_config_reg0 &= ~REG_CONFIG0_MUX_MASK;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	b2da      	uxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	701a      	strb	r2, [r3, #0]
    m_config_reg0 |= channels_conf;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b25a      	sxtb	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b25b      	sxtb	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b25b      	sxtb	r3, r3
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	701a      	strb	r2, [r3, #0]
    writeRegister(CONFIG_REG0_ADDRESS,m_config_reg0);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fedd 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZN20Protocentral_ADS122012set_pga_gainEi>:

void Protocentral_ADS1220::set_pga_gain(int pgagain)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
    m_config_reg0 &= ~REG_CONFIG0_PGA_GAIN_MASK;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f023 030e 	bic.w	r3, r3, #14
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	701a      	strb	r2, [r3, #0]
    m_config_reg0 |= pgagain ;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b25a      	sxtb	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	701a      	strb	r2, [r3, #0]
    writeRegister(CONFIG_REG0_ADDRESS,m_config_reg0);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	2100      	movs	r1, #0
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff febc 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZN20Protocentral_ADS122013set_data_rateEi>:
    writeRegister(CONFIG_REG0_ADDRESS,m_config_reg0);
}

// control register 1
void Protocentral_ADS1220::set_data_rate(int datarate)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
    m_config_reg1 &= ~REG_CONFIG1_DR_MASK;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	785b      	ldrb	r3, [r3, #1]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	b2da      	uxtb	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	705a      	strb	r2, [r3, #1]
    m_config_reg1 |= datarate;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	b25a      	sxtb	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	b2da      	uxtb	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	705a      	strb	r2, [r3, #1]
    writeRegister(CONFIG_REG1_ADDRESS,m_config_reg1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	785b      	ldrb	r3, [r3, #1]
 8001320:	461a      	mov	r2, r3
 8001322:	2101      	movs	r1, #1
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fe9b 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZN20Protocentral_ADS122017set_OperationModeEi>:

void Protocentral_ADS1220::set_OperationMode(int OPmode)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
    m_config_reg1 &= ~REG_CONFIG1_MODE_MASK;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	f023 0318 	bic.w	r3, r3, #24
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	705a      	strb	r2, [r3, #1]
    m_config_reg1 |= OPmode;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	b25a      	sxtb	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b25b      	sxtb	r3, r3
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	705a      	strb	r2, [r3, #1]
    writeRegister(CONFIG_REG1_ADDRESS,m_config_reg1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	785b      	ldrb	r3, [r3, #1]
 8001362:	461a      	mov	r2, r3
 8001364:	2101      	movs	r1, #1
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fe7a 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZN20Protocentral_ADS122025set_conv_mode_single_shotEv>:

void Protocentral_ADS1220::set_conv_mode_single_shot(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    m_config_reg1 &= ~_BV(2);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	785b      	ldrb	r3, [r3, #1]
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	705a      	strb	r2, [r3, #1]
    writeRegister(CONFIG_REG1_ADDRESS,m_config_reg1);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	461a      	mov	r2, r3
 8001390:	2101      	movs	r1, #1
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fe64 	bl	8001060 <_ZN20Protocentral_ADS122013writeRegisterEhh>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_ZN20Protocentral_ADS122011WaitForDataEj>:

    return config_Buff;
}

bool Protocentral_ADS1220::WaitForData(unsigned int timeout_ms)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
//		DWT_Delay(1);
//		us_cnt++;
//		if(us_cnt >= timeout_us) return false;
//	}
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	usleep(550);
 80013aa:	f240 2026 	movw	r0, #550	; 0x226
 80013ae:	f000 fd37 	bl	8001e20 <usleep>
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
    return true;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_ZN20Protocentral_ADS12209Read_DataEv>:

uint8_t* Protocentral_ADS1220::Read_Data()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
    uint8_t txBuffer[3] = {SPI_MASTER_DUMMY, SPI_MASTER_DUMMY, SPI_MASTER_DUMMY};
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_ZN20Protocentral_ADS12209Read_DataEv+0x5c>)
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	4611      	mov	r1, r2
 80013ce:	8019      	strh	r1, [r3, #0]
 80013d0:	3302      	adds	r3, #2
 80013d2:	0c12      	lsrs	r2, r2, #16
 80013d4:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_RESET);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6998      	ldr	r0, [r3, #24]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	8a9b      	ldrh	r3, [r3, #20]
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	f003 f931 	bl	8004648 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SPI_HANDLE, txBuffer, DataReg, 3, 5);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f103 0208 	add.w	r2, r3, #8
 80013ec:	f107 010c 	add.w	r1, r7, #12
 80013f0:	2305      	movs	r3, #5
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2303      	movs	r3, #3
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <_ZN20Protocentral_ADS12209Read_DataEv+0x60>)
 80013f8:	f004 fb1f 	bl	8005a3a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(m_cs_port, m_cs_pin, GPIO_PIN_SET);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6998      	ldr	r0, [r3, #24]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	8a9b      	ldrh	r3, [r3, #20]
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	f003 f91e 	bl	8004648 <HAL_GPIO_WritePin>
    return DataReg;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3308      	adds	r3, #8
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	0800c220 	.word	0x0800c220
 800141c:	20000360 	.word	0x20000360

08001420 <_ZN20Protocentral_ADS12209DataToIntEv>:

int32_t Protocentral_ADS1220::DataToInt(){
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    int32_t result = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
    result = DataReg[0];
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7a1b      	ldrb	r3, [r3, #8]
 8001430:	60fb      	str	r3, [r7, #12]
    result = (result << 8) | DataReg[1];
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	7a52      	ldrb	r2, [r2, #9]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
    result = (result << 8) | DataReg[2];
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	7a92      	ldrb	r2, [r2, #10]
 8001446:	4313      	orrs	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]

    if (DataReg[0] & (1<<7)) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	b25b      	sxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	da03      	bge.n	800145c <_ZN20Protocentral_ADS12209DataToIntEv+0x3c>
        result |= 0xFF000000;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800145a:	60fb      	str	r3, [r7, #12]
    }

    return result;
 800145c:	68fb      	ldr	r3, [r7, #12]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_ZN20Protocentral_ADS122019Read_Data_ImmediateEv>:

    return DataToInt();
}

int32_t Protocentral_ADS1220::Read_Data_Immediate()
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
	Read_Data();
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <_ZN20Protocentral_ADS12209Read_DataEv>

	return DataToInt();
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffd1 	bl	8001420 <_ZN20Protocentral_ADS12209DataToIntEv>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_ZN20Protocentral_ADS122021Start_SingleShot_ConvEv>:
    Start_Conv();
    return Read_WaitForData();
}

void Protocentral_ADS1220::Start_SingleShot_Conv(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    Start_Conv();
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fedf 	bl	8001254 <_ZN20Protocentral_ADS122010Start_ConvEv>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2220      	movs	r2, #32
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 fa2b 	bl	8007914 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <MX_ADC1_Init+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_ADC1_Init+0xe8>)
 800151c:	2200      	movs	r2, #0
 800151e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001528:	4817      	ldr	r0, [pc, #92]	; (8001588 <MX_ADC1_Init+0xe8>)
 800152a:	f001 fb71 	bl	8002c10 <HAL_ADC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001534:	f000 fd8d 	bl	8002052 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001544:	f002 f904 	bl	8003750 <HAL_ADCEx_MultiModeConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800154e:	f000 fd80 	bl	8002052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_ADC1_Init+0xec>)
 8001554:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001556:	2306      	movs	r3, #6
 8001558:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_ADC1_Init+0xf0>)
 8001560:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001562:	2304      	movs	r3, #4
 8001564:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001570:	f001 fcd8 	bl	8002f24 <HAL_ADC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800157a:	f000 fd6a 	bl	8002052 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3730      	adds	r7, #48	; 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001fc 	.word	0x200001fc
 800158c:	04300002 	.word	0x04300002
 8001590:	407f0000 	.word	0x407f0000

08001594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b09a      	sub	sp, #104	; 0x68
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	2244      	movs	r2, #68	; 0x44
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 f9ad 	bl	8007914 <memset>
  if(adcHandle->Instance==ADC1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c2:	d134      	bne.n	800162e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fe27 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015e0:	f000 fd37 	bl	8002052 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_ADC_MspInit+0xa4>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	4a13      	ldr	r2, [pc, #76]	; (8001638 <HAL_ADC_MspInit+0xa4>)
 80015ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_ADC_MspInit+0xa4>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_ADC_MspInit+0xa4>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_ADC_MspInit+0xa4>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_ADC_MspInit+0xa4>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001614:	2303      	movs	r3, #3
 8001616:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001624:	4619      	mov	r1, r3
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f002 fe8b 	bl	8004344 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800162e:	bf00      	nop
 8001630:	3768      	adds	r7, #104	; 0x68
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <alt_main>:
    HAL_SPI_TransmitReceive(&hspi1, &data, &rxData, 1, HAL_MAX_DELAY);
    return rxData;
}

int alt_main()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8
	/* Initialization */

	ads1.begin(GPIOA, GPIO_PIN_2, GPIOA, GPIO_PIN_9);
 8001642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800164c:	2204      	movs	r2, #4
 800164e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001652:	482b      	ldr	r0, [pc, #172]	; (8001700 <alt_main+0xc4>)
 8001654:	f7ff fd32 	bl	80010bc <_ZN20Protocentral_ADS12205beginEP12GPIO_TypeDeftS1_t>
	ads2.begin(GPIOA, GPIO_PIN_3, GPIOB, GPIO_PIN_0);
 8001658:	2301      	movs	r3, #1
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <alt_main+0xc8>)
 800165e:	2208      	movs	r2, #8
 8001660:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001664:	4828      	ldr	r0, [pc, #160]	; (8001708 <alt_main+0xcc>)
 8001666:	f7ff fd29 	bl	80010bc <_ZN20Protocentral_ADS12205beginEP12GPIO_TypeDeftS1_t>
	ads3.begin(GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_8);
 800166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001674:	2210      	movs	r2, #16
 8001676:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800167a:	4824      	ldr	r0, [pc, #144]	; (800170c <alt_main+0xd0>)
 800167c:	f7ff fd1e 	bl	80010bc <_ZN20Protocentral_ADS12205beginEP12GPIO_TypeDeftS1_t>

	ads1.set_OperationMode(MODE_TURBO);
 8001680:	2110      	movs	r1, #16
 8001682:	481f      	ldr	r0, [pc, #124]	; (8001700 <alt_main+0xc4>)
 8001684:	f7ff fe55 	bl	8001332 <_ZN20Protocentral_ADS122017set_OperationModeEi>
	ads2.set_OperationMode(MODE_TURBO);
 8001688:	2110      	movs	r1, #16
 800168a:	481f      	ldr	r0, [pc, #124]	; (8001708 <alt_main+0xcc>)
 800168c:	f7ff fe51 	bl	8001332 <_ZN20Protocentral_ADS122017set_OperationModeEi>
	ads3.set_OperationMode(MODE_TURBO);
 8001690:	2110      	movs	r1, #16
 8001692:	481e      	ldr	r0, [pc, #120]	; (800170c <alt_main+0xd0>)
 8001694:	f7ff fe4d 	bl	8001332 <_ZN20Protocentral_ADS122017set_OperationModeEi>

	ads1.set_data_rate(DR_1000SPS);
 8001698:	21c0      	movs	r1, #192	; 0xc0
 800169a:	4819      	ldr	r0, [pc, #100]	; (8001700 <alt_main+0xc4>)
 800169c:	f7ff fe28 	bl	80012f0 <_ZN20Protocentral_ADS122013set_data_rateEi>
	ads2.set_data_rate(DR_1000SPS);
 80016a0:	21c0      	movs	r1, #192	; 0xc0
 80016a2:	4819      	ldr	r0, [pc, #100]	; (8001708 <alt_main+0xcc>)
 80016a4:	f7ff fe24 	bl	80012f0 <_ZN20Protocentral_ADS122013set_data_rateEi>
	ads3.set_data_rate(DR_1000SPS);
 80016a8:	21c0      	movs	r1, #192	; 0xc0
 80016aa:	4818      	ldr	r0, [pc, #96]	; (800170c <alt_main+0xd0>)
 80016ac:	f7ff fe20 	bl	80012f0 <_ZN20Protocentral_ADS122013set_data_rateEi>

	ads1.set_pga_gain(PGA_GAIN_128);
 80016b0:	210e      	movs	r1, #14
 80016b2:	4813      	ldr	r0, [pc, #76]	; (8001700 <alt_main+0xc4>)
 80016b4:	f7ff fdfb 	bl	80012ae <_ZN20Protocentral_ADS122012set_pga_gainEi>
	ads2.set_pga_gain(PGA_GAIN_128);
 80016b8:	210e      	movs	r1, #14
 80016ba:	4813      	ldr	r0, [pc, #76]	; (8001708 <alt_main+0xcc>)
 80016bc:	f7ff fdf7 	bl	80012ae <_ZN20Protocentral_ADS122012set_pga_gainEi>
	ads3.set_pga_gain(PGA_GAIN_128);
 80016c0:	210e      	movs	r1, #14
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <alt_main+0xd0>)
 80016c4:	f7ff fdf3 	bl	80012ae <_ZN20Protocentral_ADS122012set_pga_gainEi>

	ads1.set_conv_mode_single_shot();
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <alt_main+0xc4>)
 80016ca:	f7ff fe53 	bl	8001374 <_ZN20Protocentral_ADS122025set_conv_mode_single_shotEv>
	ads2.set_conv_mode_single_shot();
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <alt_main+0xcc>)
 80016d0:	f7ff fe50 	bl	8001374 <_ZN20Protocentral_ADS122025set_conv_mode_single_shotEv>
	ads3.set_conv_mode_single_shot();
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <alt_main+0xd0>)
 80016d6:	f7ff fe4d 	bl	8001374 <_ZN20Protocentral_ADS122025set_conv_mode_single_shotEv>

	cnt1 = 0;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <alt_main+0xd4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
	cnt2 = 0;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <alt_main+0xd8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
	cnt3 = 0;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <alt_main+0xdc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
	cnt4 = 0;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <alt_main+0xe0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
	cnt5 = 0;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <alt_main+0xe4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
	cnt6 = 0;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <alt_main+0xe8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

	while (1)
 80016fe:	e7fe      	b.n	80016fe <alt_main+0xc2>
 8001700:	20000268 	.word	0x20000268
 8001704:	48000400 	.word	0x48000400
 8001708:	20000288 	.word	0x20000288
 800170c:	200002a8 	.word	0x200002a8
 8001710:	200002c8 	.word	0x200002c8
 8001714:	200002cc 	.word	0x200002cc
 8001718:	200002d0 	.word	0x200002d0
 800171c:	200002d4 	.word	0x200002d4
 8001720:	200002d8 	.word	0x200002d8
 8001724:	200002dc 	.word	0x200002dc

08001728 <_Z22divideAndExtract20Bitsl>:
int32_t raw1_last,raw2_last,raw3_last,raw4_last,raw5_last,raw6_last;

bool first_reading = true;

// Function to divide a 24-bit value by 16 and extract the lower 20 bits
int32_t divideAndExtract20Bits(int32_t value24Bit) {
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	int32_t temp = ((value24Bit >> 5) & 0x7FFFF); // Shift right by 4 bits and mask the lower 20 bits
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	115b      	asrs	r3, r3, #5
 8001734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001738:	60fb      	str	r3, [r7, #12]
	if(value24Bit & 0b100000000000000000000000)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <_Z22divideAndExtract20Bitsl+0x28>
		temp = temp | 0xFFF80000;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 800174a:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 800174e:	60fb      	str	r3, [r7, #12]
	return temp;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_Z23splitDataIntoCANPacketsPmPhS0_>:

// Helper function to split 20-bit values into two CAN packets
void splitDataIntoCANPackets(uint32_t* data20Bit, uint8_t* txData1, uint8_t* txData2) {
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
    // The first byte of the first CAN packet is the ID byte
    // (You can set the ID according to your specific requirements)
    txData1[0] = 0x01; // For example, using ID = 0x01
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]

    // Fill the next 7 bytes of the first CAN packet with the first 7 data20Bit values
    txData1[1] = (data20Bit[0] >> 12);       // Byte 1 (MSB)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0b1a      	lsrs	r2, r3, #12
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3301      	adds	r3, #1
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
    txData1[2] = (data20Bit[0] >> 4);        // Byte 2
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	091a      	lsrs	r2, r3, #4
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3302      	adds	r3, #2
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
    txData1[3] = (data20Bit[0] << 4) | (data20Bit[1] >> 16); // Byte 3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	b2d9      	uxtb	r1, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3303      	adds	r3, #3
 80017a4:	430a      	orrs	r2, r1
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]
    txData1[4] = (data20Bit[1] >> 8);        // Byte 4
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3304      	adds	r3, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0a1a      	lsrs	r2, r3, #8
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3304      	adds	r3, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
    txData1[5] = (data20Bit[1]);             // Byte 5 (LSB)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3304      	adds	r3, #4
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3305      	adds	r3, #5
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    txData1[6] = (data20Bit[2] >> 12);       // Byte 6 (MSB)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0b1a      	lsrs	r2, r3, #12
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3306      	adds	r3, #6
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
    txData1[7] = (data20Bit[2] >> 4);        // Byte 7
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3308      	adds	r3, #8
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	091a      	lsrs	r2, r3, #4
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3307      	adds	r3, #7
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	701a      	strb	r2, [r3, #0]

    // Fill the second CAN packet with the remaining 8 bytes
    txData2[0] = (data20Bit[2] << 4) | (data20Bit[3] >> 16); // Byte 1 (MSB)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3308      	adds	r3, #8
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	330c      	adds	r3, #12
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b2da      	uxtb	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	701a      	strb	r2, [r3, #0]
    txData2[1] = (data20Bit[3] >> 8);        // Byte 2
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	330c      	adds	r3, #12
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0a1a      	lsrs	r2, r3, #8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3301      	adds	r3, #1
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
    txData2[2] = (data20Bit[3]);             // Byte 3 (LSB)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	330c      	adds	r3, #12
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3302      	adds	r3, #2
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
    txData2[3] = (data20Bit[4] >> 12);       // Byte 4 (MSB)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3310      	adds	r3, #16
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0b1a      	lsrs	r2, r3, #12
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3303      	adds	r3, #3
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
    txData2[4] = (data20Bit[4] >> 4);        // Byte 5
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3310      	adds	r3, #16
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	091a      	lsrs	r2, r3, #4
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
    txData2[5] = (data20Bit[4] << 4) | (data20Bit[5] >> 16); // Byte 6 (MSB)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3310      	adds	r3, #16
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	b2d9      	uxtb	r1, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3314      	adds	r3, #20
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	b2da      	uxtb	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3305      	adds	r3, #5
 800185e:	430a      	orrs	r2, r1
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	701a      	strb	r2, [r3, #0]
    txData2[6] = (data20Bit[5] >> 8);        // Byte 7
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3314      	adds	r3, #20
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0a1a      	lsrs	r2, r3, #8
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3306      	adds	r3, #6
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	701a      	strb	r2, [r3, #0]
    txData2[7] = (data20Bit[5]);             // Byte 8 (LSB)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3314      	adds	r3, #20
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3307      	adds	r3, #7
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <main_1KHz_interrupt>:
}
int cnt = 0;
int led_state = 0;
int serial_cnt = 0;
void main_1KHz_interrupt()
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b0af      	sub	sp, #188	; 0xbc
 8001894:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2140      	movs	r1, #64	; 0x40
 800189a:	4891      	ldr	r0, [pc, #580]	; (8001ae0 <main_1KHz_interrupt+0x250>)
 800189c:	f002 fed4 	bl	8004648 <HAL_GPIO_WritePin>

	ads1.select_mux_channels(MUX_AIN0_AIN1);
 80018a0:	2100      	movs	r1, #0
 80018a2:	4890      	ldr	r0, [pc, #576]	; (8001ae4 <main_1KHz_interrupt+0x254>)
 80018a4:	f7ff fce2 	bl	800126c <_ZN20Protocentral_ADS122019select_mux_channelsEi>
	ads1.Start_SingleShot_Conv();
 80018a8:	488e      	ldr	r0, [pc, #568]	; (8001ae4 <main_1KHz_interrupt+0x254>)
 80018aa:	f7ff fded 	bl	8001488 <_ZN20Protocentral_ADS122021Start_SingleShot_ConvEv>

	ads2.select_mux_channels(MUX_AIN0_AIN1);
 80018ae:	2100      	movs	r1, #0
 80018b0:	488d      	ldr	r0, [pc, #564]	; (8001ae8 <main_1KHz_interrupt+0x258>)
 80018b2:	f7ff fcdb 	bl	800126c <_ZN20Protocentral_ADS122019select_mux_channelsEi>
	ads2.Start_SingleShot_Conv();
 80018b6:	488c      	ldr	r0, [pc, #560]	; (8001ae8 <main_1KHz_interrupt+0x258>)
 80018b8:	f7ff fde6 	bl	8001488 <_ZN20Protocentral_ADS122021Start_SingleShot_ConvEv>

	ads3.select_mux_channels(MUX_AIN0_AIN1);
 80018bc:	2100      	movs	r1, #0
 80018be:	488b      	ldr	r0, [pc, #556]	; (8001aec <main_1KHz_interrupt+0x25c>)
 80018c0:	f7ff fcd4 	bl	800126c <_ZN20Protocentral_ADS122019select_mux_channelsEi>
	ads3.Start_SingleShot_Conv();
 80018c4:	4889      	ldr	r0, [pc, #548]	; (8001aec <main_1KHz_interrupt+0x25c>)
 80018c6:	f7ff fddf 	bl	8001488 <_ZN20Protocentral_ADS122021Start_SingleShot_ConvEv>

	usleep(550);
 80018ca:	f240 2026 	movw	r0, #550	; 0x226
 80018ce:	f000 faa7 	bl	8001e20 <usleep>
	raw2 = 8388608+ads1.Read_Data_Immediate();
 80018d2:	4884      	ldr	r0, [pc, #528]	; (8001ae4 <main_1KHz_interrupt+0x254>)
 80018d4:	f7ff fdc9 	bl	800146a <_ZN20Protocentral_ADS122019Read_Data_ImmediateEv>
 80018d8:	4603      	mov	r3, r0
 80018da:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80018de:	4a84      	ldr	r2, [pc, #528]	; (8001af0 <main_1KHz_interrupt+0x260>)
 80018e0:	6013      	str	r3, [r2, #0]
	raw4 = 8388608+ads2.Read_Data_Immediate();
 80018e2:	4881      	ldr	r0, [pc, #516]	; (8001ae8 <main_1KHz_interrupt+0x258>)
 80018e4:	f7ff fdc1 	bl	800146a <_ZN20Protocentral_ADS122019Read_Data_ImmediateEv>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80018ee:	4a81      	ldr	r2, [pc, #516]	; (8001af4 <main_1KHz_interrupt+0x264>)
 80018f0:	6013      	str	r3, [r2, #0]
	raw6 = 8388608+ads3.Read_Data_Immediate();
 80018f2:	487e      	ldr	r0, [pc, #504]	; (8001aec <main_1KHz_interrupt+0x25c>)
 80018f4:	f7ff fdb9 	bl	800146a <_ZN20Protocentral_ADS122019Read_Data_ImmediateEv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80018fe:	4a7e      	ldr	r2, [pc, #504]	; (8001af8 <main_1KHz_interrupt+0x268>)
 8001900:	6013      	str	r3, [r2, #0]

	ads1.select_mux_channels(MUX_AIN3_AIN2);
 8001902:	2170      	movs	r1, #112	; 0x70
 8001904:	4877      	ldr	r0, [pc, #476]	; (8001ae4 <main_1KHz_interrupt+0x254>)
 8001906:	f7ff fcb1 	bl	800126c <_ZN20Protocentral_ADS122019select_mux_channelsEi>
	ads1.Start_SingleShot_Conv();
 800190a:	4876      	ldr	r0, [pc, #472]	; (8001ae4 <main_1KHz_interrupt+0x254>)
 800190c:	f7ff fdbc 	bl	8001488 <_ZN20Protocentral_ADS122021Start_SingleShot_ConvEv>

	ads2.select_mux_channels(MUX_AIN3_AIN2);
 8001910:	2170      	movs	r1, #112	; 0x70
 8001912:	4875      	ldr	r0, [pc, #468]	; (8001ae8 <main_1KHz_interrupt+0x258>)
 8001914:	f7ff fcaa 	bl	800126c <_ZN20Protocentral_ADS122019select_mux_channelsEi>
	ads2.Start_SingleShot_Conv();
 8001918:	4873      	ldr	r0, [pc, #460]	; (8001ae8 <main_1KHz_interrupt+0x258>)
 800191a:	f7ff fdb5 	bl	8001488 <_ZN20Protocentral_ADS122021Start_SingleShot_ConvEv>

	ads3.select_mux_channels(MUX_AIN3_AIN2);
 800191e:	2170      	movs	r1, #112	; 0x70
 8001920:	4872      	ldr	r0, [pc, #456]	; (8001aec <main_1KHz_interrupt+0x25c>)
 8001922:	f7ff fca3 	bl	800126c <_ZN20Protocentral_ADS122019select_mux_channelsEi>
	ads3.Start_SingleShot_Conv();
 8001926:	4871      	ldr	r0, [pc, #452]	; (8001aec <main_1KHz_interrupt+0x25c>)
 8001928:	f7ff fdae 	bl	8001488 <_ZN20Protocentral_ADS122021Start_SingleShot_ConvEv>

	usleep(550);
 800192c:	f240 2026 	movw	r0, #550	; 0x226
 8001930:	f000 fa76 	bl	8001e20 <usleep>

	raw1 = -ads1.Read_Data_Immediate();
 8001934:	486b      	ldr	r0, [pc, #428]	; (8001ae4 <main_1KHz_interrupt+0x254>)
 8001936:	f7ff fd98 	bl	800146a <_ZN20Protocentral_ADS122019Read_Data_ImmediateEv>
 800193a:	4603      	mov	r3, r0
 800193c:	425b      	negs	r3, r3
 800193e:	4a6f      	ldr	r2, [pc, #444]	; (8001afc <main_1KHz_interrupt+0x26c>)
 8001940:	6013      	str	r3, [r2, #0]
	raw3 = -ads2.Read_Data_Immediate();
 8001942:	4869      	ldr	r0, [pc, #420]	; (8001ae8 <main_1KHz_interrupt+0x258>)
 8001944:	f7ff fd91 	bl	800146a <_ZN20Protocentral_ADS122019Read_Data_ImmediateEv>
 8001948:	4603      	mov	r3, r0
 800194a:	425b      	negs	r3, r3
 800194c:	4a6c      	ldr	r2, [pc, #432]	; (8001b00 <main_1KHz_interrupt+0x270>)
 800194e:	6013      	str	r3, [r2, #0]
	raw5 = -ads3.Read_Data_Immediate();
 8001950:	4866      	ldr	r0, [pc, #408]	; (8001aec <main_1KHz_interrupt+0x25c>)
 8001952:	f7ff fd8a 	bl	800146a <_ZN20Protocentral_ADS122019Read_Data_ImmediateEv>
 8001956:	4603      	mov	r3, r0
 8001958:	425b      	negs	r3, r3
 800195a:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <main_1KHz_interrupt+0x274>)
 800195c:	6013      	str	r3, [r2, #0]
//	raw3 = ads2.Read_SingleShot_SingleEnded_WaitForData(MUX_AIN0_AIN1);
//	raw4 = ads2.Read_SingleShot_SingleEnded_WaitForData(MUX_AIN3_AIN2);
//
//	raw5 = ads3.Read_SingleShot_SingleEnded_WaitForData(MUX_AIN0_AIN1);
//	raw6 = ads3.Read_SingleShot_SingleEnded_WaitForData(MUX_AIN3_AIN2);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2140      	movs	r1, #64	; 0x40
 8001962:	485f      	ldr	r0, [pc, #380]	; (8001ae0 <main_1KHz_interrupt+0x250>)
 8001964:	f002 fe70 	bl	8004648 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);

//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

	uint32_t dataToSend[] = {raw1, raw2, raw3, raw4, raw5, raw6};
 8001968:	4b64      	ldr	r3, [pc, #400]	; (8001afc <main_1KHz_interrupt+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001970:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <main_1KHz_interrupt+0x260>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001978:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <main_1KHz_interrupt+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001980:	4b5c      	ldr	r3, [pc, #368]	; (8001af4 <main_1KHz_interrupt+0x264>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001988:	4b5e      	ldr	r3, [pc, #376]	; (8001b04 <main_1KHz_interrupt+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <main_1KHz_interrupt+0x268>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	// Prepare the first CAN packet with the first 4 uint16_t values
	FDCAN_TxHeaderTypeDef txHeader;
	uint8_t txData[CAN_DATA_SIZE];

	txHeader.Identifier = CAN_ID;
 8001998:	f240 1323 	movw	r3, #291	; 0x123
 800199c:	66bb      	str	r3, [r7, #104]	; 0x68
	txHeader.IdType = FDCAN_STANDARD_ID;
 800199e:	2300      	movs	r3, #0
 80019a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80019a2:	2300      	movs	r3, #0
 80019a4:	673b      	str	r3, [r7, #112]	; 0x70
	txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80019a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019aa:	677b      	str	r3, [r7, #116]	; 0x74
	txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	67bb      	str	r3, [r7, #120]	; 0x78
	txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80019b0:	2300      	movs	r3, #0
 80019b2:	67fb      	str	r3, [r7, #124]	; 0x7c
	txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	txHeader.MessageMarker = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
//	    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData);

		uint32_t data20Bit[6];

	    // Step 1: Divide each 24-bit value by 16 and extract the lower 20 bits
	    for (int i = 0; i < 6; i++) {
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	dc18      	bgt.n	8001a06 <main_1KHz_interrupt+0x176>
	        data20Bit[i] = divideAndExtract20Bits(dataToSend[i]);
 80019d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	33a8      	adds	r3, #168	; 0xa8
 80019dc:	443b      	add	r3, r7
 80019de:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fea0 	bl	8001728 <_Z22divideAndExtract20Bitsl>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	33a8      	adds	r3, #168	; 0xa8
 80019f4:	443b      	add	r3, r7
 80019f6:	f843 2c60 	str.w	r2, [r3, #-96]
	    for (int i = 0; i < 6; i++) {
 80019fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019fe:	3301      	adds	r3, #1
 8001a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a04:	e7e2      	b.n	80019cc <main_1KHz_interrupt+0x13c>
//	    reading_cnt++;
//	    if(reading_cnt>1000000) reading_cnt = 1000;
	    // Step 2: Split the resulting 20-bit values into two CAN packets
	    uint8_t txData1[8]; // First CAN packet (1 byte for ID + 7 bytes of data)
	    uint8_t txData2[8]; // Second CAN packet (8 bytes of data)
	    splitDataIntoCANPackets(data20Bit, txData1, txData2);
 8001a06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a0a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001a0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fea3 	bl	800175e <_Z23splitDataIntoCANPacketsPmPhS0_>

	    // Transmit the first CAN packet (1 byte ID + 7-byte data)
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData1);
 8001a18:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a20:	4619      	mov	r1, r3
 8001a22:	4839      	ldr	r0, [pc, #228]	; (8001b08 <main_1KHz_interrupt+0x278>)
 8001a24:	f002 f9ca 	bl	8003dbc <HAL_FDCAN_AddMessageToTxFifoQ>
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
		usleep(130);
 8001a28:	2082      	movs	r0, #130	; 0x82
 8001a2a:	f000 f9f9 	bl	8001e20 <usleep>
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		// Transmit the second CAN packet (8-byte data)
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData2);
 8001a2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a36:	4619      	mov	r1, r3
 8001a38:	4833      	ldr	r0, [pc, #204]	; (8001b08 <main_1KHz_interrupt+0x278>)
 8001a3a:	f002 f9bf 	bl	8003dbc <HAL_FDCAN_AddMessageToTxFifoQ>

		char uartTxBuffer[50]; // Buffer to hold the UART transmission data

		raw1 = data20Bit[0];
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <main_1KHz_interrupt+0x26c>)
 8001a44:	601a      	str	r2, [r3, #0]
		raw2 = data20Bit[1];
 8001a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <main_1KHz_interrupt+0x260>)
 8001a4c:	601a      	str	r2, [r3, #0]
		raw3 = data20Bit[2];
 8001a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <main_1KHz_interrupt+0x270>)
 8001a54:	601a      	str	r2, [r3, #0]
		raw4 = data20Bit[3];
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <main_1KHz_interrupt+0x264>)
 8001a5c:	601a      	str	r2, [r3, #0]
		raw5 = data20Bit[4];
 8001a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <main_1KHz_interrupt+0x274>)
 8001a64:	601a      	str	r2, [r3, #0]
		raw6 = data20Bit[5];
 8001a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <main_1KHz_interrupt+0x268>)
 8001a6c:	601a      	str	r2, [r3, #0]
		if(serial_cnt%100 == 0){
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <main_1KHz_interrupt+0x27c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <main_1KHz_interrupt+0x280>)
 8001a74:	fb83 1302 	smull	r1, r3, r3, r2
 8001a78:	1159      	asrs	r1, r3, #5
 8001a7a:	17d3      	asrs	r3, r2, #31
 8001a7c:	1acb      	subs	r3, r1, r3
 8001a7e:	2164      	movs	r1, #100	; 0x64
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d121      	bne.n	8001ace <main_1KHz_interrupt+0x23e>
			sprintf(uartTxBuffer, "%d,   %d,   %d,   %d,   %d   %d\r\n", raw1,raw2,raw3,raw4,raw5,raw6);
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <main_1KHz_interrupt+0x26c>)
 8001a8c:	681d      	ldr	r5, [r3, #0]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <main_1KHz_interrupt+0x260>)
 8001a90:	681e      	ldr	r6, [r3, #0]
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <main_1KHz_interrupt+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <main_1KHz_interrupt+0x264>)
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	491a      	ldr	r1, [pc, #104]	; (8001b04 <main_1KHz_interrupt+0x274>)
 8001a9c:	6809      	ldr	r1, [r1, #0]
 8001a9e:	4816      	ldr	r0, [pc, #88]	; (8001af8 <main_1KHz_interrupt+0x268>)
 8001aa0:	6800      	ldr	r0, [r0, #0]
 8001aa2:	1d3c      	adds	r4, r7, #4
 8001aa4:	9003      	str	r0, [sp, #12]
 8001aa6:	9102      	str	r1, [sp, #8]
 8001aa8:	9201      	str	r2, [sp, #4]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	4633      	mov	r3, r6
 8001aae:	462a      	mov	r2, r5
 8001ab0:	4918      	ldr	r1, [pc, #96]	; (8001b14 <main_1KHz_interrupt+0x284>)
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f006 fdb6 	bl	8008624 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer),1);
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fbb0 	bl	8000220 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	1d39      	adds	r1, r7, #4
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4813      	ldr	r0, [pc, #76]	; (8001b18 <main_1KHz_interrupt+0x288>)
 8001aca:	f005 f8df 	bl	8006c8c <HAL_UART_Transmit>
		}
		serial_cnt++;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <main_1KHz_interrupt+0x27c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <main_1KHz_interrupt+0x27c>)
 8001ad6:	6013      	str	r3, [r2, #0]

}
 8001ad8:	bf00      	nop
 8001ada:	37ac      	adds	r7, #172	; 0xac
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	20000268 	.word	0x20000268
 8001ae8:	20000288 	.word	0x20000288
 8001aec:	200002a8 	.word	0x200002a8
 8001af0:	2000034c 	.word	0x2000034c
 8001af4:	20000354 	.word	0x20000354
 8001af8:	2000035c 	.word	0x2000035c
 8001afc:	20000348 	.word	0x20000348
 8001b00:	20000350 	.word	0x20000350
 8001b04:	20000358 	.word	0x20000358
 8001b08:	200002e4 	.word	0x200002e4
 8001b0c:	200002e0 	.word	0x200002e0
 8001b10:	51eb851f 	.word	0x51eb851f
 8001b14:	0800c224 	.word	0x0800c224
 8001b18:	20000460 	.word	0x20000460

08001b1c <_Z41__static_initialization_and_destruction_0ii>:
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10d      	bne.n	8001b48 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d108      	bne.n	8001b48 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Protocentral_ADS1220 ads1;
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b38:	f7ff fa86 	bl	8001048 <_ZN20Protocentral_ADS1220C1Ev>
Protocentral_ADS1220 ads2;
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001b3e:	f7ff fa83 	bl	8001048 <_ZN20Protocentral_ADS1220C1Ev>
Protocentral_ADS1220 ads3;
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001b44:	f7ff fa80 	bl	8001048 <_ZN20Protocentral_ADS1220C1Ev>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000268 	.word	0x20000268
 8001b54:	20000288 	.word	0x20000288
 8001b58:	200002a8 	.word	0x200002a8

08001b5c <_GLOBAL__sub_I_ads1>:
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7ff ffd9 	bl	8001b1c <_Z41__static_initialization_and_destruction_0ii>
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <DWT_Init+0x44>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00e      	beq.n	8001ba4 <DWT_Init+0x38>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <DWT_Init+0x44>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <DWT_Init+0x44>)
 8001b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b90:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <DWT_Init+0x48>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <DWT_Init+0x48>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <DWT_Init+0x48>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]
    }
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000edf0 	.word	0xe000edf0
 8001bb4:	e0001000 	.word	0xe0001000

08001bb8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bbe:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <MX_FDCAN1_Init+0x88>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 34;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001be8:	2222      	movs	r2, #34	; 0x22
 8001bea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <MX_FDCAN1_Init+0x84>)
 8001c2a:	f001 ff45 	bl	8003ab8 <HAL_FDCAN_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001c34:	f000 fa0d 	bl	8002052 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200002e4 	.word	0x200002e4
 8001c40:	40006400 	.word	0x40006400

08001c44 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09a      	sub	sp, #104	; 0x68
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2244      	movs	r2, #68	; 0x44
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fe55 	bl	8007914 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_FDCAN_MspInit+0xbc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d141      	bne.n	8001cf8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 facf 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001c90:	f000 f9df 	bl	8002052 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_FDCAN_MspInit+0xc0>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c98:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <HAL_FDCAN_MspInit+0xc0>)
 8001c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_FDCAN_MspInit+0xc0>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_FDCAN_MspInit+0xc0>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_FDCAN_MspInit+0xc0>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_FDCAN_MspInit+0xc0>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cc4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cc8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce4:	f002 fb2e 	bl	8004344 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	2015      	movs	r0, #21
 8001cee:	f001 feae 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001cf2:	2015      	movs	r0, #21
 8001cf4:	f001 fec5 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3768      	adds	r7, #104	; 0x68
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40006400 	.word	0x40006400
 8001d04:	40021000 	.word	0x40021000

08001d08 <MX_GPIO_Init>:
        * EXTI
     PB7   ------> I2C1_SDA
     PB8-BOOT0   ------> I2C1_SCL
*/
void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	4a3d      	ldr	r2, [pc, #244]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d24:	f043 0320 	orr.w	r3, r3, #32
 8001d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f248 011c 	movw	r1, #32796	; 0x801c
 8001d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d70:	f002 fc6a 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2160      	movs	r1, #96	; 0x60
 8001d78:	4828      	ldr	r0, [pc, #160]	; (8001e1c <MX_GPIO_Init+0x114>)
 8001d7a:	f002 fc65 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 8001d7e:	f248 031c 	movw	r3, #32796	; 0x801c
 8001d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9a:	f002 fad3 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	4619      	mov	r1, r3
 8001db0:	481a      	ldr	r0, [pc, #104]	; (8001e1c <MX_GPIO_Init+0x114>)
 8001db2:	f002 fac7 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dce:	f002 fab9 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001dd2:	2360      	movs	r3, #96	; 0x60
 8001dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	4619      	mov	r1, r3
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <MX_GPIO_Init+0x114>)
 8001dea:	f002 faab 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001dee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	2312      	movs	r3, #18
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e00:	2304      	movs	r3, #4
 8001e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4804      	ldr	r0, [pc, #16]	; (8001e1c <MX_GPIO_Init+0x114>)
 8001e0c:	f002 fa9a 	bl	8004344 <HAL_GPIO_Init>

}
 8001e10:	bf00      	nop
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	48000400 	.word	0x48000400

08001e20 <usleep>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void usleep(uint32_t us)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    // Clock cycles per microsecond for a 170MHz clock
    const uint32_t CYCLES_PER_MICROSECOND = 13; // ---> 170/13 (~13 clock cycles per operation)
 8001e28:	230d      	movs	r3, #13
 8001e2a:	613b      	str	r3, [r7, #16]

    uint32_t totalCycles = us * CYCLES_PER_MICROSECOND;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	60fb      	str	r3, [r7, #12]

    // Loop to execute the NOP instruction for the desired delay
    for (uint32_t i = 0; i < totalCycles; ++i)
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e003      	b.n	8001e44 <usleep+0x24>
    {
        asm volatile("NOP");
 8001e3c:	bf00      	nop
    for (uint32_t i = 0; i < totalCycles; ++i)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3f7      	bcc.n	8001e3c <usleep+0x1c>
    }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b098      	sub	sp, #96	; 0x60
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e62:	f000 fc68 	bl	8002736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e66:	f000 f8ab 	bl	8001fc0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(2000);
 8001e6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e6e:	f000 fcd3 	bl	8002818 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e72:	f7ff ff49 	bl	8001d08 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001e76:	f7ff fe9f 	bl	8001bb8 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8001e7a:	f000 f8ef 	bl	800205c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001e7e:	f000 fb07 	bl	8002490 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001e82:	f7ff fb0d 	bl	80014a0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001e86:	f000 faa5 	bl	80023d4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001e8a:	f000 fb87 	bl	800259c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DWT_Init();
 8001e8e:	f7ff fe6d 	bl	8001b6c <DWT_Init>

  // Enable GPIOB clock
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <main+0x150>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a45      	ldr	r2, [pc, #276]	; (8001fac <main+0x150>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b43      	ldr	r3, [pc, #268]	; (8001fac <main+0x150>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <main+0x150>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	4a3f      	ldr	r2, [pc, #252]	; (8001fac <main+0x150>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <main+0x150>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  // Configure PB6 as output
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001ec2:	2360      	movs	r3, #96	; 0x60
 8001ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	653b      	str	r3, [r7, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4835      	ldr	r0, [pc, #212]	; (8001fb0 <main+0x154>)
 8001eda:	f002 fa33 	bl	8004344 <HAL_GPIO_Init>

  // Set chip selects as outputs and initialize them to high
  GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 8001ede:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct2.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8001eee:	231c      	movs	r3, #28
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct2.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct2.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efa:	2302      	movs	r3, #2
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct2);
 8001efe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f002 fa1c 	bl	8004344 <HAL_GPIO_Init>

  // GPIOA Pin 9 (PA9) configuration as input
  GPIO_InitTypeDef GPIO_InitStruct3;
  GPIO_InitStruct3.Pin = GPIO_PIN_9;
 8001f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct3.Mode = GPIO_MODE_INPUT;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct3.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct3);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f002 fa0e 	bl	8004344 <HAL_GPIO_Init>

  // GPIOA Pin 8 (PA8) configuration as input
  GPIO_InitStruct3.Pin = GPIO_PIN_8;
 8001f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct3);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f38:	f002 fa04 	bl	8004344 <HAL_GPIO_Init>

  // GPIOB Pin 0 (PB0) configuration as input
  GPIO_InitStruct3.Pin = GPIO_PIN_0;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct3);
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	481a      	ldr	r0, [pc, #104]	; (8001fb0 <main+0x154>)
 8001f48:	f002 f9fc 	bl	8004344 <HAL_GPIO_Init>

  // Initialize chip selects to high
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2104      	movs	r1, #4
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f002 fb78 	bl	8004648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2108      	movs	r1, #8
 8001f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f60:	f002 fb72 	bl	8004648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2110      	movs	r1, #16
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f002 fb6c 	bl	8004648 <HAL_GPIO_WritePin>

  HAL_FDCAN_Start(&hfdcan1);
 8001f70:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <main+0x158>)
 8001f72:	f001 fefb 	bl	8003d6c <HAL_FDCAN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[] = "LoadCell Program Started.\r\n";
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <main+0x15c>)
 8001f78:	f107 0408 	add.w	r4, r7, #8
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message),1);
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe f946 	bl	8000220 <strlen>
 8001f94:	4603      	mov	r3, r0
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	f107 0108 	add.w	r1, r7, #8
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	4807      	ldr	r0, [pc, #28]	; (8001fbc <main+0x160>)
 8001fa0:	f004 fe74 	bl	8006c8c <HAL_UART_Transmit>
  alt_main();
 8001fa4:	f7ff fb4a 	bl	800163c <alt_main>

  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <main+0x14c>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	200002e4 	.word	0x200002e4
 8001fb8:	0800c248 	.word	0x0800c248
 8001fbc:	20000460 	.word	0x20000460

08001fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b094      	sub	sp, #80	; 0x50
 8001fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc6:	f107 0318 	add.w	r3, r7, #24
 8001fca:	2238      	movs	r2, #56	; 0x38
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f005 fca0 	bl	8007914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f002 fb48 	bl	8004678 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ffe:	2355      	movs	r3, #85	; 0x55
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002002:	2302      	movs	r3, #2
 8002004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002006:	2302      	movs	r3, #2
 8002008:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800200a:	2302      	movs	r3, #2
 800200c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200e:	f107 0318 	add.w	r3, r7, #24
 8002012:	4618      	mov	r0, r3
 8002014:	f002 fbd4 	bl	80047c0 <HAL_RCC_OscConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800201e:	f000 f818 	bl	8002052 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002022:	230f      	movs	r3, #15
 8002024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002026:	2303      	movs	r3, #3
 8002028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2104      	movs	r1, #4
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fed8 	bl	8004df0 <HAL_RCC_ClockConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002046:	f000 f804 	bl	8002052 <Error_Handler>
  }
}
 800204a:	bf00      	nop
 800204c:	3750      	adds	r7, #80	; 0x50
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002056:	b672      	cpsid	i
}
 8002058:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205a:	e7fe      	b.n	800205a <Error_Handler+0x8>

0800205c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <MX_SPI1_Init+0x74>)
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <MX_SPI1_Init+0x78>)
 8002064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <MX_SPI1_Init+0x74>)
 8002068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800206c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_SPI1_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <MX_SPI1_Init+0x74>)
 8002076:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800207a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <MX_SPI1_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <MX_SPI1_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_SPI1_Init+0x74>)
 800208a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_SPI1_Init+0x74>)
 8002092:	2218      	movs	r2, #24
 8002094:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_SPI1_Init+0x74>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_SPI1_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_SPI1_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_SPI1_Init+0x74>)
 80020aa:	2207      	movs	r2, #7
 80020ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_SPI1_Init+0x74>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_SPI1_Init+0x74>)
 80020b6:	2208      	movs	r2, #8
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_SPI1_Init+0x74>)
 80020bc:	f003 faa4 	bl	8005608 <HAL_SPI_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f7ff ffc4 	bl	8002052 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000360 	.word	0x20000360
 80020d4:	40013000 	.word	0x40013000

080020d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a17      	ldr	r2, [pc, #92]	; (8002154 <HAL_SPI_MspInit+0x7c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d128      	bne.n	800214c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_SPI_MspInit+0x80>)
 80020fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fe:	4a16      	ldr	r2, [pc, #88]	; (8002158 <HAL_SPI_MspInit+0x80>)
 8002100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002104:	6613      	str	r3, [r2, #96]	; 0x60
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_SPI_MspInit+0x80>)
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_SPI_MspInit+0x80>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_SPI_MspInit+0x80>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_SPI_MspInit+0x80>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800212a:	23e0      	movs	r3, #224	; 0xe0
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800213a:	2305      	movs	r3, #5
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002148:	f002 f8fc 	bl	8004344 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	; 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013000 	.word	0x40013000
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_MspInit+0x44>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_MspInit+0x44>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6613      	str	r3, [r2, #96]	; 0x60
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_MspInit+0x44>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_MspInit+0x44>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_MspInit+0x44>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	; 0x58
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_MspInit+0x44>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000

080021a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <NMI_Handler+0x4>

080021aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <HardFault_Handler+0x4>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <MemManage_Handler+0x4>

080021b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <BusFault_Handler+0x4>

080021bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <UsageFault_Handler+0x4>

080021c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f0:	f000 faf4 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <FDCAN1_IT0_IRQHandler+0x10>)
 80021fe:	f001 fe21 	bl	8003e44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200002e4 	.word	0x200002e4

0800220c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002212:	f004 f84b 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  main_1KHz_interrupt();
 8002216:	f7ff fb3b 	bl	8001890 <main_1KHz_interrupt>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200003c8 	.word	0x200003c8

08002224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
	return 1;
 8002228:	2301      	movs	r3, #1
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_kill>:

int _kill(int pid, int sig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800223e:	f005 fb3f 	bl	80078c0 <__errno>
 8002242:	4603      	mov	r3, r0
 8002244:	2216      	movs	r2, #22
 8002246:	601a      	str	r2, [r3, #0]
	return -1;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_exit>:

void _exit (int status)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ffe7 	bl	8002234 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002266:	e7fe      	b.n	8002266 <_exit+0x12>

08002268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e00a      	b.n	8002290 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800227a:	f3af 8000 	nop.w
 800227e:	4601      	mov	r1, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60ba      	str	r2, [r7, #8]
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf0      	blt.n	800227a <_read+0x12>
	}

return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e009      	b.n	80022c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60ba      	str	r2, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbf1      	blt.n	80022b4 <_write+0x12>
	}
	return len;
 80022d0:	687b      	ldr	r3, [r7, #4]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_close>:

int _close(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
	return -1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002302:	605a      	str	r2, [r3, #4]
	return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_isatty>:

int _isatty(int file)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	return 1;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
	return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <_sbrk+0x5c>)
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <_sbrk+0x60>)
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_sbrk+0x64>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <_sbrk+0x68>)
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	429a      	cmp	r2, r3
 8002372:	d207      	bcs.n	8002384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002374:	f005 faa4 	bl	80078c0 <__errno>
 8002378:	4603      	mov	r3, r0
 800237a:	220c      	movs	r2, #12
 800237c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	e009      	b.n	8002398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <_sbrk+0x64>)
 8002394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20008000 	.word	0x20008000
 80023a4:	00000400 	.word	0x00000400
 80023a8:	200003c4 	.word	0x200003c4
 80023ac:	20000508 	.word	0x20000508

080023b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <SystemInit+0x20>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <SystemInit+0x20>)
 80023bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <MX_TIM1_Init+0xb4>)
 80023f4:	4a25      	ldr	r2, [pc, #148]	; (800248c <MX_TIM1_Init+0xb8>)
 80023f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12;
 80023f8:	4b23      	ldr	r3, [pc, #140]	; (8002488 <MX_TIM1_Init+0xb4>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <MX_TIM1_Init+0xb4>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 26000;
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <MX_TIM1_Init+0xb4>)
 8002406:	f246 5290 	movw	r2, #26000	; 0x6590
 800240a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <MX_TIM1_Init+0xb4>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <MX_TIM1_Init+0xb4>)
 8002414:	2200      	movs	r2, #0
 8002416:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <MX_TIM1_Init+0xb4>)
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800241e:	481a      	ldr	r0, [pc, #104]	; (8002488 <MX_TIM1_Init+0xb4>)
 8002420:	f003 fe82 	bl	8006128 <HAL_TIM_Base_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800242a:	f7ff fe12 	bl	8002052 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002432:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	4619      	mov	r1, r3
 800243a:	4813      	ldr	r0, [pc, #76]	; (8002488 <MX_TIM1_Init+0xb4>)
 800243c:	f004 f8b6 	bl	80065ac <HAL_TIM_ConfigClockSource>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002446:	f7ff fe04 	bl	8002052 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	4619      	mov	r1, r3
 800245a:	480b      	ldr	r0, [pc, #44]	; (8002488 <MX_TIM1_Init+0xb4>)
 800245c:	f004 fafe 	bl	8006a5c <HAL_TIMEx_MasterConfigSynchronization>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002466:	f7ff fdf4 	bl	8002052 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  // Enable Timer 1 interrupt and set its priority
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	2019      	movs	r0, #25
 8002470:	f001 faed 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002474:	2019      	movs	r0, #25
 8002476:	f001 fb04 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim1);
 800247a:	4803      	ldr	r0, [pc, #12]	; (8002488 <MX_TIM1_Init+0xb4>)
 800247c:	f003 feac 	bl	80061d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200003c8 	.word	0x200003c8
 800248c:	40012c00 	.word	0x40012c00

08002490 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <MX_TIM2_Init+0x98>)
 80024b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <MX_TIM2_Init+0x98>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024bc:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <MX_TIM2_Init+0x98>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <MX_TIM2_Init+0x98>)
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <MX_TIM2_Init+0x98>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <MX_TIM2_Init+0x98>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024d6:	4814      	ldr	r0, [pc, #80]	; (8002528 <MX_TIM2_Init+0x98>)
 80024d8:	f003 fe26 	bl	8006128 <HAL_TIM_Base_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80024e2:	f7ff fdb6 	bl	8002052 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	4619      	mov	r1, r3
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <MX_TIM2_Init+0x98>)
 80024f4:	f004 f85a 	bl	80065ac <HAL_TIM_ConfigClockSource>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80024fe:	f7ff fda8 	bl	8002052 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	4619      	mov	r1, r3
 800250e:	4806      	ldr	r0, [pc, #24]	; (8002528 <MX_TIM2_Init+0x98>)
 8002510:	f004 faa4 	bl	8006a5c <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800251a:	f7ff fd9a 	bl	8002052 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	3720      	adds	r7, #32
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000414 	.word	0x20000414

0800252c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_TIM_Base_MspInit+0x68>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d114      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	4a15      	ldr	r2, [pc, #84]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002548:	6613      	str	r3, [r2, #96]	; 0x60
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 800254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2019      	movs	r0, #25
 800255c:	f001 fa77 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002560:	2019      	movs	r0, #25
 8002562:	f001 fa8e 	bl	8003a82 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002566:	e010      	b.n	800258a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d10b      	bne.n	800258a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6593      	str	r3, [r2, #88]	; 0x58
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40021000 	.word	0x40021000

0800259c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025a2:	4a23      	ldr	r2, [pc, #140]	; (8002630 <MX_USART2_UART_Init+0x94>)
 80025a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025a8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80025ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025c2:	2208      	movs	r2, #8
 80025c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025d2:	4b16      	ldr	r3, [pc, #88]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025da:	2200      	movs	r2, #0
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025e4:	4811      	ldr	r0, [pc, #68]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025e6:	f004 fb01 	bl	8006bec <HAL_UART_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80025f0:	f7ff fd2f 	bl	8002052 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f4:	2100      	movs	r1, #0
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <MX_USART2_UART_Init+0x90>)
 80025f8:	f005 f898 	bl	800772c <HAL_UARTEx_SetTxFifoThreshold>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002602:	f7ff fd26 	bl	8002052 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002606:	2100      	movs	r1, #0
 8002608:	4808      	ldr	r0, [pc, #32]	; (800262c <MX_USART2_UART_Init+0x90>)
 800260a:	f005 f8cd 	bl	80077a8 <HAL_UARTEx_SetRxFifoThreshold>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002614:	f7ff fd1d 	bl	8002052 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	; (800262c <MX_USART2_UART_Init+0x90>)
 800261a:	f005 f84e 	bl	80076ba <HAL_UARTEx_DisableFifoMode>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002624:	f7ff fd15 	bl	8002052 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000460 	.word	0x20000460
 8002630:	40004400 	.word	0x40004400

08002634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b09a      	sub	sp, #104	; 0x68
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	2244      	movs	r2, #68	; 0x44
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f005 f95d 	bl	8007914 <memset>
  if(uartHandle->Instance==USART2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <HAL_UART_MspInit+0xa4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d135      	bne.n	80026d0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4618      	mov	r0, r3
 8002672:	f002 fdd9 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800267c:	f7ff fce9 	bl	8002052 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_UART_MspInit+0xa8>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	4a15      	ldr	r2, [pc, #84]	; (80026dc <HAL_UART_MspInit+0xa8>)
 8002686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268a:	6593      	str	r3, [r2, #88]	; 0x58
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_UART_MspInit+0xa8>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_UART_MspInit+0xa8>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <HAL_UART_MspInit+0xa8>)
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_UART_MspInit+0xa8>)
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80026b0:	2318      	movs	r3, #24
 80026b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c0:	2307      	movs	r3, #7
 80026c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026c8:	4619      	mov	r1, r3
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <HAL_UART_MspInit+0xac>)
 80026cc:	f001 fe3a 	bl	8004344 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026d0:	bf00      	nop
 80026d2:	3768      	adds	r7, #104	; 0x68
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40004400 	.word	0x40004400
 80026dc:	40021000 	.word	0x40021000
 80026e0:	48000400 	.word	0x48000400

080026e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e8:	480d      	ldr	r0, [pc, #52]	; (8002720 <LoopForever+0x6>)
  ldr r1, =_edata
 80026ea:	490e      	ldr	r1, [pc, #56]	; (8002724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ec:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <LoopForever+0xe>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002700:	4c0b      	ldr	r4, [pc, #44]	; (8002730 <LoopForever+0x16>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800270e:	f7ff fe4f 	bl	80023b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002712:	f005 f8db 	bl	80078cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002716:	f7ff fba1 	bl	8001e5c <main>

0800271a <LoopForever>:

LoopForever:
    b LoopForever
 800271a:	e7fe      	b.n	800271a <LoopForever>
  ldr   r0, =_estack
 800271c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002724:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002728:	0800c770 	.word	0x0800c770
  ldr r2, =_sbss
 800272c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002730:	20000504 	.word	0x20000504

08002734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC1_2_IRQHandler>

08002736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f001 f979 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002746:	200f      	movs	r0, #15
 8002748:	f000 f80e 	bl	8002768 <HAL_InitTick>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	e001      	b.n	800275c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002758:	f7ff fd00 	bl	800215c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800275c:	79fb      	ldrb	r3, [r7, #7]

}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_InitTick+0x68>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d022      	beq.n	80027c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_InitTick+0x6c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_InitTick+0x68>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002788:	fbb1 f3f3 	udiv	r3, r1, r3
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	4618      	mov	r0, r3
 8002792:	f001 f984 	bl	8003a9e <HAL_SYSTICK_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10f      	bne.n	80027bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	d809      	bhi.n	80027b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a2:	2200      	movs	r2, #0
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	f04f 30ff 	mov.w	r0, #4294967295
 80027aa:	f001 f950 	bl	8003a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_InitTick+0x70>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e007      	b.n	80027c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e004      	b.n	80027c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e001      	b.n	80027c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000008 	.word	0x20000008
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_IncTick+0x1c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_IncTick+0x20>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <HAL_IncTick+0x1c>)
 80027ec:	6013      	str	r3, [r2, #0]
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	200004f0 	.word	0x200004f0
 80027fc:	20000008 	.word	0x20000008

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	200004f0 	.word	0x200004f0

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d004      	beq.n	800283c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_Delay+0x40>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4413      	add	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283c:	bf00      	nop
 800283e:	f7ff ffdf 	bl	8002800 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	429a      	cmp	r2, r3
 800284c:	d8f7      	bhi.n	800283e <HAL_Delay+0x26>
  {
  }
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000008 	.word	0x20000008

0800285c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	609a      	str	r2, [r3, #8]
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <LL_ADC_SetOffset+0x44>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	03fff000 	.word	0x03fff000

0800290c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3360      	adds	r3, #96	; 0x60
 800291a:	461a      	mov	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3360      	adds	r3, #96	; 0x60
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800296e:	b480      	push	{r7}
 8002970:	b087      	sub	sp, #28
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3360      	adds	r3, #96	; 0x60
 800297e:	461a      	mov	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	431a      	orrs	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3360      	adds	r3, #96	; 0x60
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	615a      	str	r2, [r3, #20]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3330      	adds	r3, #48	; 0x30
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	4413      	add	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	211f      	movs	r1, #31
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	401a      	ands	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	f003 011f 	and.w	r1, r3, #31
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	431a      	orrs	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3314      	adds	r3, #20
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0e5b      	lsrs	r3, r3, #25
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	0d1b      	lsrs	r3, r3, #20
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2107      	movs	r1, #7
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	0d1b      	lsrs	r3, r3, #20
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a0f      	ldr	r2, [pc, #60]	; (8002afc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10a      	bne.n	8002ada <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	401a      	ands	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	407f0000 	.word	0x407f0000

08002b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6093      	str	r3, [r2, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b38:	d101      	bne.n	8002b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <LL_ADC_IsEnabled+0x18>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <LL_ADC_IsEnabled+0x1a>
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d101      	bne.n	8002c00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e177      	b.n	8002f1a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe fcab 	bl	8001594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff67 	bl	8002b24 <LL_ADC_IsDeepPowerDownEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff4d 	bl	8002b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff82 	bl	8002b74 <LL_ADC_IsInternalRegulatorEnabled>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d115      	bne.n	8002ca2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff66 	bl	8002b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c80:	4b9c      	ldr	r3, [pc, #624]	; (8002ef4 <HAL_ADC_Init+0x2e4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	4a9c      	ldr	r2, [pc, #624]	; (8002ef8 <HAL_ADC_Init+0x2e8>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c94:	e002      	b.n	8002c9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f9      	bne.n	8002c96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff64 	bl	8002b74 <LL_ADC_IsInternalRegulatorEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff75 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002cd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 8110 	bne.w	8002f08 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 810c 	bne.w	8002f08 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff49 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d111      	bne.n	8002d34 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d14:	f7ff ff42 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	4878      	ldr	r0, [pc, #480]	; (8002efc <HAL_ADC_Init+0x2ec>)
 8002d1c:	f7ff ff3e 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4323      	orrs	r3, r4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4874      	ldr	r0, [pc, #464]	; (8002f00 <HAL_ADC_Init+0x2f0>)
 8002d30:	f7ff fd94 	bl	800285c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7f5b      	ldrb	r3, [r3, #29]
 8002d38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d3e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d44:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d4a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d106      	bne.n	8002d70 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	3b01      	subs	r3, #1
 8002d68:	045b      	lsls	r3, r3, #17
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_ADC_Init+0x2f4>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff01 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002dc0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff0e 	bl	8002be8 <LL_ADC_INJ_IsConversionOngoing>
 8002dcc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d16d      	bne.n	8002eb0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d16a      	bne.n	8002eb0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dde:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002de6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002df6:	f023 0302 	bic.w	r3, r3, #2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d017      	beq.n	8002e3c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6911      	ldr	r1, [r2, #16]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e3a:	e013      	b.n	8002e64 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e60:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d118      	bne.n	8002ea0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e84:	4311      	orrs	r1, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e90:	430a      	orrs	r2, r1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	611a      	str	r2, [r3, #16]
 8002e9e:	e007      	b.n	8002eb0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f023 010f 	bic.w	r1, r3, #15
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	1e5a      	subs	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed0:	e007      	b.n	8002ee2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 020f 	bic.w	r2, r2, #15
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef2:	e011      	b.n	8002f18 <HAL_ADC_Init+0x308>
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	053e2d63 	.word	0x053e2d63
 8002efc:	50000100 	.word	0x50000100
 8002f00:	50000300 	.word	0x50000300
 8002f04:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	f043 0210 	orr.w	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	bf00      	nop

08002f24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b0b6      	sub	sp, #216	; 0xd8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x22>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e3c8      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x7b4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fe35 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 83ad 	bne.w	80036ba <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f7ff fd47 	bl	8002a00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fe23 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002f7c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fe2f 	bl	8002be8 <LL_ADC_INJ_IsConversionOngoing>
 8002f8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 81d9 	bne.w	800334a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 81d4 	bne.w	800334a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002faa:	d10f      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7ff fd4e 	bl	8002a58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fd08 	bl	80029da <LL_ADC_SetSamplingTimeCommonConfig>
 8002fca:	e00e      	b.n	8002fea <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6819      	ldr	r1, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f7ff fd3d 	bl	8002a58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fcf8 	bl	80029da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d022      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6919      	ldr	r1, [r3, #16]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800301c:	f7ff fc52 	bl	80028c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6919      	ldr	r1, [r3, #16]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	461a      	mov	r2, r3
 800302e:	f7ff fc9e 	bl	800296e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	7f1b      	ldrb	r3, [r3, #28]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x124>
 8003042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003046:	e000      	b.n	800304a <HAL_ADC_ConfigChannel+0x126>
 8003048:	2300      	movs	r3, #0
 800304a:	461a      	mov	r2, r3
 800304c:	f7ff fcaa 	bl	80029a4 <LL_ADC_SetOffsetSaturation>
 8003050:	e17b      	b.n	800334a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fc57 	bl	800290c <LL_ADC_GetOffsetChannel>
 800305e:	4603      	mov	r3, r0
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <HAL_ADC_ConfigChannel+0x15a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fc4c 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	e01e      	b.n	80030bc <HAL_ADC_ConfigChannel+0x198>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fc41 	bl	800290c <LL_ADC_GetOffsetChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800309c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e004      	b.n	80030ba <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80030b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x1b0>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0e9b      	lsrs	r3, r3, #26
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	e018      	b.n	8003106 <HAL_ADC_ConfigChannel+0x1e2>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	e004      	b.n	8003106 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80030fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003106:	429a      	cmp	r2, r3
 8003108:	d106      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fc10 	bl	8002938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fbf4 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x220>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fbe9 	bl	800290c <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	f003 021f 	and.w	r2, r3, #31
 8003142:	e01e      	b.n	8003182 <HAL_ADC_ConfigChannel+0x25e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fbde 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800316a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003172:	2320      	movs	r3, #32
 8003174:	e004      	b.n	8003180 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <HAL_ADC_ConfigChannel+0x276>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	e018      	b.n	80031cc <HAL_ADC_ConfigChannel+0x2a8>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80031ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80031be:	2320      	movs	r3, #32
 80031c0:	e004      	b.n	80031cc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80031c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d106      	bne.n	80031de <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fbad 	bl	8002938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2102      	movs	r1, #2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fb91 	bl	800290c <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_ADC_ConfigChannel+0x2e6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fb86 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	e01e      	b.n	8003248 <HAL_ADC_ConfigChannel+0x324>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fb7b 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800322c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003230:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e004      	b.n	8003246 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800323c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x33c>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	e016      	b.n	800328e <HAL_ADC_ConfigChannel+0x36a>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e004      	b.n	800328e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800328e:	429a      	cmp	r2, r3
 8003290:	d106      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	2102      	movs	r1, #2
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fb4c 	bl	8002938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2103      	movs	r1, #3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fb30 	bl	800290c <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x3a8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2103      	movs	r1, #3
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fb25 	bl	800290c <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	f003 021f 	and.w	r2, r3, #31
 80032ca:	e017      	b.n	80032fc <HAL_ADC_ConfigChannel+0x3d8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2103      	movs	r1, #3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fb1a 	bl	800290c <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e003      	b.n	80032fa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80032f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x3f0>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	e011      	b.n	8003338 <HAL_ADC_ConfigChannel+0x414>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003324:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003338:	429a      	cmp	r2, r3
 800333a:	d106      	bne.n	800334a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	2103      	movs	r1, #3
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff faf7 	bl	8002938 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fc24 	bl	8002b9c <LL_ADC_IsEnabled>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 8140 	bne.w	80035dc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	461a      	mov	r2, r3
 800336a:	f7ff fba1 	bl	8002ab0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4a8f      	ldr	r2, [pc, #572]	; (80035b0 <HAL_ADC_ConfigChannel+0x68c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	f040 8131 	bne.w	80035dc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x47e>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	0e9b      	lsrs	r3, r3, #26
 8003390:	3301      	adds	r3, #1
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2b09      	cmp	r3, #9
 8003398:	bf94      	ite	ls
 800339a:	2301      	movls	r3, #1
 800339c:	2300      	movhi	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	e019      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x4b2>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80033b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80033b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80033ba:	2320      	movs	r3, #32
 80033bc:	e003      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80033be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d079      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x4d2>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	0e9b      	lsrs	r3, r3, #26
 80033ec:	3301      	adds	r3, #1
 80033ee:	069b      	lsls	r3, r3, #26
 80033f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033f4:	e015      	b.n	8003422 <HAL_ADC_ConfigChannel+0x4fe>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003406:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800340e:	2320      	movs	r3, #32
 8003410:	e003      	b.n	800341a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	069b      	lsls	r3, r3, #26
 800341e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x51e>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	0e9b      	lsrs	r3, r3, #26
 8003434:	3301      	adds	r3, #1
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	e017      	b.n	8003472 <HAL_ADC_ConfigChannel+0x54e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003452:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e003      	b.n	8003466 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	ea42 0103 	orr.w	r1, r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x574>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	0e9b      	lsrs	r3, r3, #26
 8003488:	3301      	adds	r3, #1
 800348a:	f003 021f 	and.w	r2, r3, #31
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	051b      	lsls	r3, r3, #20
 8003496:	e018      	b.n	80034ca <HAL_ADC_ConfigChannel+0x5a6>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f003 021f 	and.w	r2, r3, #31
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ca:	430b      	orrs	r3, r1
 80034cc:	e081      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x5c6>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	3301      	adds	r3, #1
 80034e2:	069b      	lsls	r3, r3, #26
 80034e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e8:	e015      	b.n	8003516 <HAL_ADC_ConfigChannel+0x5f2>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e003      	b.n	800350e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3301      	adds	r3, #1
 8003510:	069b      	lsls	r3, r3, #26
 8003512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x612>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	0e9b      	lsrs	r3, r3, #26
 8003528:	3301      	adds	r3, #1
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	e017      	b.n	8003566 <HAL_ADC_ConfigChannel+0x642>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	61fb      	str	r3, [r7, #28]
  return result;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800354e:	2320      	movs	r3, #32
 8003550:	e003      	b.n	800355a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	fab3 f383 	clz	r3, r3
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3301      	adds	r3, #1
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	ea42 0103 	orr.w	r1, r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x66e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0e9b      	lsrs	r3, r3, #26
 800357c:	3301      	adds	r3, #1
 800357e:	f003 021f 	and.w	r2, r3, #31
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	3b1e      	subs	r3, #30
 800358a:	051b      	lsls	r3, r3, #20
 800358c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003590:	e01e      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x6ac>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	613b      	str	r3, [r7, #16]
  return result;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80035aa:	2320      	movs	r3, #32
 80035ac:	e006      	b.n	80035bc <HAL_ADC_ConfigChannel+0x698>
 80035ae:	bf00      	nop
 80035b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f003 021f 	and.w	r2, r3, #31
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	3b1e      	subs	r3, #30
 80035ca:	051b      	lsls	r3, r3, #20
 80035cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d0:	430b      	orrs	r3, r1
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	6892      	ldr	r2, [r2, #8]
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7ff fa3e 	bl	8002a58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b3f      	ldr	r3, [pc, #252]	; (80036e0 <HAL_ADC_ConfigChannel+0x7bc>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d071      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e8:	483e      	ldr	r0, [pc, #248]	; (80036e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80035ea:	f7ff f95d 	bl	80028a8 <LL_ADC_GetCommonPathInternalCh>
 80035ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a3c      	ldr	r2, [pc, #240]	; (80036e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x6e2>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_ADC_ConfigChannel+0x7c8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d127      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800360a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d121      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800361a:	d157      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800361c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003624:	4619      	mov	r1, r3
 8003626:	482f      	ldr	r0, [pc, #188]	; (80036e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003628:	f7ff f92b 	bl	8002882 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_ADC_ConfigChannel+0x7cc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003646:	e002      	b.n	800364e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f9      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003654:	e03a      	b.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a27      	ldr	r2, [pc, #156]	; (80036f8 <HAL_ADC_ConfigChannel+0x7d4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d113      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x764>
 8003660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a22      	ldr	r2, [pc, #136]	; (80036fc <HAL_ADC_ConfigChannel+0x7d8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d02a      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	4619      	mov	r1, r3
 8003680:	4818      	ldr	r0, [pc, #96]	; (80036e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003682:	f7ff f8fe 	bl	8002882 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003686:	e021      	b.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_ADC_ConfigChannel+0x7dc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d11c      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d116      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a16      	ldr	r2, [pc, #88]	; (80036fc <HAL_ADC_ConfigChannel+0x7d8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d011      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036b0:	4619      	mov	r1, r3
 80036b2:	480c      	ldr	r0, [pc, #48]	; (80036e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80036b4:	f7ff f8e5 	bl	8002882 <LL_ADC_SetCommonPathInternalCh>
 80036b8:	e008      	b.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	f043 0220 	orr.w	r2, r3, #32
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036d8:	4618      	mov	r0, r3
 80036da:	37d8      	adds	r7, #216	; 0xd8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	80080000 	.word	0x80080000
 80036e4:	50000300 	.word	0x50000300
 80036e8:	c3210000 	.word	0xc3210000
 80036ec:	90c00010 	.word	0x90c00010
 80036f0:	20000000 	.word	0x20000000
 80036f4:	053e2d63 	.word	0x053e2d63
 80036f8:	c7520000 	.word	0xc7520000
 80036fc:	50000100 	.word	0x50000100
 8003700:	cb840000 	.word	0xcb840000

08003704 <LL_ADC_IsEnabled>:
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <LL_ADC_IsEnabled+0x18>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <LL_ADC_IsEnabled+0x1a>
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <LL_ADC_REG_IsConversionOngoing>:
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d101      	bne.n	8003742 <LL_ADC_REG_IsConversionOngoing+0x18>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b0a1      	sub	sp, #132	; 0x84
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800376a:	2302      	movs	r3, #2
 800376c:	e08b      	b.n	8003886 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003776:	2300      	movs	r3, #0
 8003778:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800377a:	2300      	movs	r3, #0
 800377c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003786:	d102      	bne.n	800378e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003788:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	e001      	b.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10b      	bne.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e06a      	b.n	8003886 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ffb9 	bl	800372a <LL_ADC_REG_IsConversionOngoing>
 80037b8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff ffb3 	bl	800372a <LL_ADC_REG_IsConversionOngoing>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d14c      	bne.n	8003864 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d149      	bne.n	8003864 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037d0:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80037d2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d028      	beq.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ee:	035b      	lsls	r3, r3, #13
 80037f0:	430b      	orrs	r3, r1
 80037f2:	431a      	orrs	r2, r3
 80037f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037fc:	f7ff ff82 	bl	8003704 <LL_ADC_IsEnabled>
 8003800:	4604      	mov	r4, r0
 8003802:	4823      	ldr	r0, [pc, #140]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003804:	f7ff ff7e 	bl	8003704 <LL_ADC_IsEnabled>
 8003808:	4603      	mov	r3, r0
 800380a:	4323      	orrs	r3, r4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d133      	bne.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003818:	f023 030f 	bic.w	r3, r3, #15
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	6811      	ldr	r1, [r2, #0]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	6892      	ldr	r2, [r2, #8]
 8003824:	430a      	orrs	r2, r1
 8003826:	431a      	orrs	r2, r3
 8003828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800382a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800382c:	e024      	b.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800382e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003838:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800383a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800383e:	f7ff ff61 	bl	8003704 <LL_ADC_IsEnabled>
 8003842:	4604      	mov	r4, r0
 8003844:	4812      	ldr	r0, [pc, #72]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003846:	f7ff ff5d 	bl	8003704 <LL_ADC_IsEnabled>
 800384a:	4603      	mov	r3, r0
 800384c:	4323      	orrs	r3, r4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d112      	bne.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800385a:	f023 030f 	bic.w	r3, r3, #15
 800385e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003860:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003862:	e009      	b.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003876:	e000      	b.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003878:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003882:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003886:	4618      	mov	r0, r3
 8003888:	3784      	adds	r7, #132	; 0x84
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	50000100 	.word	0x50000100
 8003894:	50000300 	.word	0x50000300

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f7ff ff8e 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff29 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5c:	f7ff ff40 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7ff ff90 	bl	800398c <NVIC_EncodePriority>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff5f 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff33 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ffa4 	bl	80039f4 <SysTick_Config>
 8003aac:	4603      	mov	r3, r0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e147      	b.n	8003d5a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe f8b0 	bl	8001c44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0210 	bic.w	r2, r2, #16
 8003af2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003af4:	f7fe fe84 	bl	8002800 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003afa:	e012      	b.n	8003b22 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003afc:	f7fe fe80 	bl	8002800 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b0a      	cmp	r3, #10
 8003b08:	d90b      	bls.n	8003b22 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	f043 0201 	orr.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e11b      	b.n	8003d5a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d0e5      	beq.n	8003afc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b40:	f7fe fe5e 	bl	8002800 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b46:	e012      	b.n	8003b6e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b48:	f7fe fe5a 	bl	8002800 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b0a      	cmp	r3, #10
 8003b54:	d90b      	bls.n	8003b6e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2203      	movs	r2, #3
 8003b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0f5      	b.n	8003d5a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0e5      	beq.n	8003b48 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0202 	orr.w	r2, r2, #2
 8003b8a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a74      	ldr	r2, [pc, #464]	; (8003d64 <HAL_FDCAN_Init+0x2ac>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d103      	bne.n	8003b9e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003b96:	4a74      	ldr	r2, [pc, #464]	; (8003d68 <HAL_FDCAN_Init+0x2b0>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7c1b      	ldrb	r3, [r3, #16]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d108      	bne.n	8003bb8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	619a      	str	r2, [r3, #24]
 8003bb6:	e007      	b.n	8003bc8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7c5b      	ldrb	r3, [r3, #17]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d108      	bne.n	8003be2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bde:	619a      	str	r2, [r3, #24]
 8003be0:	e007      	b.n	8003bf2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bf0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	7c9b      	ldrb	r3, [r3, #18]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d108      	bne.n	8003c0c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c08:	619a      	str	r2, [r3, #24]
 8003c0a:	e007      	b.n	8003c1c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c1a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003c40:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0210 	bic.w	r2, r2, #16
 8003c50:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d108      	bne.n	8003c6c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0204 	orr.w	r2, r2, #4
 8003c68:	619a      	str	r2, [r3, #24]
 8003c6a:	e02c      	b.n	8003cc6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d028      	beq.n	8003cc6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d01c      	beq.n	8003cb6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c8a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0210 	orr.w	r2, r2, #16
 8003c9a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d110      	bne.n	8003cc6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0220 	orr.w	r2, r2, #32
 8003cb2:	619a      	str	r2, [r3, #24]
 8003cb4:	e007      	b.n	8003cc6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0220 	orr.w	r2, r2, #32
 8003cc4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cd6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cde:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cf0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfa:	d115      	bne.n	8003d28 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	3b01      	subs	r3, #1
 8003d08:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d0a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	3b01      	subs	r3, #1
 8003d12:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d14:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d24:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d26:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fa2e 	bl	80041a0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40006400 	.word	0x40006400
 8003d68:	40006500 	.word	0x40006500

08003d6c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d110      	bne.n	8003da2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e006      	b.n	8003db0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	f043 0204 	orr.w	r2, r3, #4
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d12c      	bne.n	8003e2e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e023      	b.n	8003e3c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fa1e 	bl	800424c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2101      	movs	r1, #1
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003e20:	2201      	movs	r2, #1
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	409a      	lsls	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e006      	b.n	8003e3c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e32:	f043 0208 	orr.w	r2, r3, #8
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
  }
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e52:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	4013      	ands	r3, r2
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e86:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003e9e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003eb6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d006      	beq.n	8003eee <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2240      	movs	r2, #64	; 0x40
 8003ee6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f939 	bl	8004160 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01b      	beq.n	8003f34 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d014      	beq.n	8003f34 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003f12:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f2a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f2c:	6939      	ldr	r1, [r7, #16]
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8f7 	bl	8004122 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003f42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8b6 	bl	80040b6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a3a      	ldr	r2, [r7, #32]
 8003f56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003f58:	6a39      	ldr	r1, [r7, #32]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8b6 	bl	80040cc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003f6e:	69f9      	ldr	r1, [r7, #28]
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8b6 	bl	80040e2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8ab 	bl	80040f8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01a      	beq.n	8003fe6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d013      	beq.n	8003fe6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003fc6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f893 	bl	800410c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800400a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f893 	bl	8004138 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00e      	beq.n	800403e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004036:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f887 	bl	800414c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d011      	beq.n	8004070 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004062:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004068:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800407e:	6979      	ldr	r1, [r7, #20]
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f881 	bl	8004188 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f863 	bl	8004174 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80040ae:	bf00      	nop
 80040b0:	3728      	adds	r7, #40	; 0x28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80041aa:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ba:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	041a      	lsls	r2, r3, #16
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	061a      	lsls	r2, r3, #24
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e005      	b.n	800422e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3304      	adds	r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	429a      	cmp	r2, r3
 8004238:	d3f3      	bcc.n	8004222 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	4000a400 	.word	0x4000a400

0800424c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	; 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800426a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004272:	4313      	orrs	r3, r2
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e00a      	b.n	800428e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004280:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004286:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800428c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004298:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800429e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80042a4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	440b      	add	r3, r1
 80042be:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3304      	adds	r3, #4
 80042ca:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	3304      	adds	r3, #4
 80042d6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e020      	b.n	8004320 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	3303      	adds	r3, #3
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3302      	adds	r3, #2
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	440b      	add	r3, r1
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80042f6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3301      	adds	r3, #1
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	440b      	add	r3, r1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004304:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	440a      	add	r2, r1
 800430c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800430e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	3304      	adds	r3, #4
 8004318:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3304      	adds	r3, #4
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	4a06      	ldr	r2, [pc, #24]	; (8004340 <FDCAN_CopyMessageToRAM+0xf4>)
 8004328:	5cd3      	ldrb	r3, [r2, r3]
 800432a:	461a      	mov	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4293      	cmp	r3, r2
 8004330:	d3d5      	bcc.n	80042de <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	3724      	adds	r7, #36	; 0x24
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	0800c27c 	.word	0x0800c27c

08004344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004352:	e15a      	b.n	800460a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2101      	movs	r1, #1
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 814c 	beq.w	8004604 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d005      	beq.n	8004384 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004380:	2b02      	cmp	r3, #2
 8004382:	d130      	bne.n	80043e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ba:	2201      	movs	r2, #1
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 0201 	and.w	r2, r3, #1
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d017      	beq.n	8004422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	2203      	movs	r2, #3
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d123      	bne.n	8004476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	220f      	movs	r2, #15
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	08da      	lsrs	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3208      	adds	r2, #8
 8004470:	6939      	ldr	r1, [r7, #16]
 8004472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	2203      	movs	r2, #3
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0203 	and.w	r2, r3, #3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80a6 	beq.w	8004604 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b8:	4b5b      	ldr	r3, [pc, #364]	; (8004628 <HAL_GPIO_Init+0x2e4>)
 80044ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044bc:	4a5a      	ldr	r2, [pc, #360]	; (8004628 <HAL_GPIO_Init+0x2e4>)
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	6613      	str	r3, [r2, #96]	; 0x60
 80044c4:	4b58      	ldr	r3, [pc, #352]	; (8004628 <HAL_GPIO_Init+0x2e4>)
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044d0:	4a56      	ldr	r2, [pc, #344]	; (800462c <HAL_GPIO_Init+0x2e8>)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	3302      	adds	r3, #2
 80044d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	220f      	movs	r2, #15
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044fa:	d01f      	beq.n	800453c <HAL_GPIO_Init+0x1f8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a4c      	ldr	r2, [pc, #304]	; (8004630 <HAL_GPIO_Init+0x2ec>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d019      	beq.n	8004538 <HAL_GPIO_Init+0x1f4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a4b      	ldr	r2, [pc, #300]	; (8004634 <HAL_GPIO_Init+0x2f0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_GPIO_Init+0x1f0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a4a      	ldr	r2, [pc, #296]	; (8004638 <HAL_GPIO_Init+0x2f4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00d      	beq.n	8004530 <HAL_GPIO_Init+0x1ec>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a49      	ldr	r2, [pc, #292]	; (800463c <HAL_GPIO_Init+0x2f8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <HAL_GPIO_Init+0x1e8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a48      	ldr	r2, [pc, #288]	; (8004640 <HAL_GPIO_Init+0x2fc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_GPIO_Init+0x1e4>
 8004524:	2305      	movs	r3, #5
 8004526:	e00a      	b.n	800453e <HAL_GPIO_Init+0x1fa>
 8004528:	2306      	movs	r3, #6
 800452a:	e008      	b.n	800453e <HAL_GPIO_Init+0x1fa>
 800452c:	2304      	movs	r3, #4
 800452e:	e006      	b.n	800453e <HAL_GPIO_Init+0x1fa>
 8004530:	2303      	movs	r3, #3
 8004532:	e004      	b.n	800453e <HAL_GPIO_Init+0x1fa>
 8004534:	2302      	movs	r3, #2
 8004536:	e002      	b.n	800453e <HAL_GPIO_Init+0x1fa>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_GPIO_Init+0x1fa>
 800453c:	2300      	movs	r3, #0
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	f002 0203 	and.w	r2, r2, #3
 8004544:	0092      	lsls	r2, r2, #2
 8004546:	4093      	lsls	r3, r2
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800454e:	4937      	ldr	r1, [pc, #220]	; (800462c <HAL_GPIO_Init+0x2e8>)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	3302      	adds	r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800455c:	4b39      	ldr	r3, [pc, #228]	; (8004644 <HAL_GPIO_Init+0x300>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	43db      	mvns	r3, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004580:	4a30      	ldr	r2, [pc, #192]	; (8004644 <HAL_GPIO_Init+0x300>)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004586:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <HAL_GPIO_Init+0x300>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045aa:	4a26      	ldr	r2, [pc, #152]	; (8004644 <HAL_GPIO_Init+0x300>)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045b0:	4b24      	ldr	r3, [pc, #144]	; (8004644 <HAL_GPIO_Init+0x300>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <HAL_GPIO_Init+0x300>)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <HAL_GPIO_Init+0x300>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045fe:	4a11      	ldr	r2, [pc, #68]	; (8004644 <HAL_GPIO_Init+0x300>)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	3301      	adds	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	f47f ae9d 	bne.w	8004354 <HAL_GPIO_Init+0x10>
  }
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40021000 	.word	0x40021000
 800462c:	40010000 	.word	0x40010000
 8004630:	48000400 	.word	0x48000400
 8004634:	48000800 	.word	0x48000800
 8004638:	48000c00 	.word	0x48000c00
 800463c:	48001000 	.word	0x48001000
 8004640:	48001400 	.word	0x48001400
 8004644:	40010400 	.word	0x40010400

08004648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]
 8004654:	4613      	mov	r3, r2
 8004656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004658:	787b      	ldrb	r3, [r7, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004664:	e002      	b.n	800466c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d141      	bne.n	800470a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004686:	4b4b      	ldr	r3, [pc, #300]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004692:	d131      	bne.n	80046f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004694:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469a:	4a46      	ldr	r2, [pc, #280]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a4:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046ac:	4a41      	ldr	r2, [pc, #260]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046b4:	4b40      	ldr	r3, [pc, #256]	; (80047b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2232      	movs	r2, #50	; 0x32
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	0c9b      	lsrs	r3, r3, #18
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ca:	e002      	b.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d2:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d102      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f2      	bne.n	80046cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e6:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f2:	d158      	bne.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e057      	b.n	80047a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046f8:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fe:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004708:	e04d      	b.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004710:	d141      	bne.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004712:	4b28      	ldr	r3, [pc, #160]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800471a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471e:	d131      	bne.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004726:	4a23      	ldr	r2, [pc, #140]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004730:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004738:	4a1e      	ldr	r2, [pc, #120]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800473e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004740:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2232      	movs	r2, #50	; 0x32
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	0c9b      	lsrs	r3, r3, #18
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004756:	e002      	b.n	800475e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3b01      	subs	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d102      	bne.n	8004772 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f2      	bne.n	8004758 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477e:	d112      	bne.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e011      	b.n	80047a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004794:	e007      	b.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800479e:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40007000 	.word	0x40007000
 80047b8:	20000000 	.word	0x20000000
 80047bc:	431bde83 	.word	0x431bde83

080047c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e306      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d075      	beq.n	80048ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047de:	4b97      	ldr	r3, [pc, #604]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e8:	4b94      	ldr	r3, [pc, #592]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	d102      	bne.n	80047fe <HAL_RCC_OscConfig+0x3e>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d002      	beq.n	8004804 <HAL_RCC_OscConfig+0x44>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d10b      	bne.n	800481c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004804:	4b8d      	ldr	r3, [pc, #564]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d05b      	beq.n	80048c8 <HAL_RCC_OscConfig+0x108>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d157      	bne.n	80048c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e2e1      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d106      	bne.n	8004834 <HAL_RCC_OscConfig+0x74>
 8004826:	4b85      	ldr	r3, [pc, #532]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a84      	ldr	r2, [pc, #528]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e01d      	b.n	8004870 <HAL_RCC_OscConfig+0xb0>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x98>
 800483e:	4b7f      	ldr	r3, [pc, #508]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a7e      	ldr	r2, [pc, #504]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	4b7c      	ldr	r3, [pc, #496]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7b      	ldr	r2, [pc, #492]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e00b      	b.n	8004870 <HAL_RCC_OscConfig+0xb0>
 8004858:	4b78      	ldr	r3, [pc, #480]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a77      	ldr	r2, [pc, #476]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 800485e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4b75      	ldr	r3, [pc, #468]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a74      	ldr	r2, [pc, #464]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 800486a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd ffc2 	bl	8002800 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004880:	f7fd ffbe 	bl	8002800 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e2a6      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004892:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0xc0>
 800489e:	e014      	b.n	80048ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd ffae 	bl	8002800 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fd ffaa 	bl	8002800 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e292      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ba:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0xe8>
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d075      	beq.n	80049c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d6:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e0:	4b56      	ldr	r3, [pc, #344]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b0c      	cmp	r3, #12
 80048ee:	d102      	bne.n	80048f6 <HAL_RCC_OscConfig+0x136>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_OscConfig+0x13c>
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d11f      	bne.n	800493c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fc:	4b4f      	ldr	r3, [pc, #316]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_OscConfig+0x154>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e265      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b49      	ldr	r3, [pc, #292]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	4946      	ldr	r1, [pc, #280]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd ff1b 	bl	8002768 <HAL_InitTick>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d043      	beq.n	80049c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e251      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d023      	beq.n	800498c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004944:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a3c      	ldr	r2, [pc, #240]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 800494a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fd ff56 	bl	8002800 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004958:	f7fd ff52 	bl	8002800 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e23a      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800496a:	4b34      	ldr	r3, [pc, #208]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004976:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	492d      	ldr	r1, [pc, #180]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	604b      	str	r3, [r1, #4]
 800498a:	e01a      	b.n	80049c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498c:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fd ff32 	bl	8002800 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a0:	f7fd ff2e 	bl	8002800 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e216      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b2:	4b22      	ldr	r3, [pc, #136]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x1e0>
 80049be:	e000      	b.n	80049c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d041      	beq.n	8004a52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01c      	beq.n	8004a10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d6:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80049d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049dc:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e6:	f7fd ff0b 	bl	8002800 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ee:	f7fd ff07 	bl	8002800 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e1ef      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a00:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0ef      	beq.n	80049ee <HAL_RCC_OscConfig+0x22e>
 8004a0e:	e020      	b.n	8004a52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd feee 	bl	8002800 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a26:	e00d      	b.n	8004a44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a28:	f7fd feea 	bl	8002800 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d906      	bls.n	8004a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1d2      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a44:	4b8c      	ldr	r3, [pc, #560]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ea      	bne.n	8004a28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80a6 	beq.w	8004bac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a60:	2300      	movs	r3, #0
 8004a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a64:	4b84      	ldr	r3, [pc, #528]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_OscConfig+0x2b4>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x2b6>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	4b7f      	ldr	r3, [pc, #508]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	4a7e      	ldr	r2, [pc, #504]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6593      	str	r3, [r2, #88]	; 0x58
 8004a86:	4b7c      	ldr	r3, [pc, #496]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a92:	2301      	movs	r3, #1
 8004a94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a96:	4b79      	ldr	r3, [pc, #484]	; (8004c7c <HAL_RCC_OscConfig+0x4bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d118      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aa2:	4b76      	ldr	r3, [pc, #472]	; (8004c7c <HAL_RCC_OscConfig+0x4bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a75      	ldr	r2, [pc, #468]	; (8004c7c <HAL_RCC_OscConfig+0x4bc>)
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aae:	f7fd fea7 	bl	8002800 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab6:	f7fd fea3 	bl	8002800 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e18b      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac8:	4b6c      	ldr	r3, [pc, #432]	; (8004c7c <HAL_RCC_OscConfig+0x4bc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d108      	bne.n	8004aee <HAL_RCC_OscConfig+0x32e>
 8004adc:	4b66      	ldr	r3, [pc, #408]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	4a65      	ldr	r2, [pc, #404]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aec:	e024      	b.n	8004b38 <HAL_RCC_OscConfig+0x378>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d110      	bne.n	8004b18 <HAL_RCC_OscConfig+0x358>
 8004af6:	4b60      	ldr	r3, [pc, #384]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	4a5e      	ldr	r2, [pc, #376]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004afe:	f043 0304 	orr.w	r3, r3, #4
 8004b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b06:	4b5c      	ldr	r3, [pc, #368]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	4a5a      	ldr	r2, [pc, #360]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b16:	e00f      	b.n	8004b38 <HAL_RCC_OscConfig+0x378>
 8004b18:	4b57      	ldr	r3, [pc, #348]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	4a56      	ldr	r2, [pc, #344]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b28:	4b53      	ldr	r3, [pc, #332]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	4a52      	ldr	r2, [pc, #328]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004b30:	f023 0304 	bic.w	r3, r3, #4
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d016      	beq.n	8004b6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fd fe5e 	bl	8002800 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fd fe5a 	bl	8002800 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e140      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5e:	4b46      	ldr	r3, [pc, #280]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0ed      	beq.n	8004b48 <HAL_RCC_OscConfig+0x388>
 8004b6c:	e015      	b.n	8004b9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fe47 	bl	8002800 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fd fe43 	bl	8002800 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e129      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b8c:	4b3a      	ldr	r3, [pc, #232]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1ed      	bne.n	8004b76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba0:	4b35      	ldr	r3, [pc, #212]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	4a34      	ldr	r2, [pc, #208]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004baa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d03c      	beq.n	8004c32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01c      	beq.n	8004bfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bc0:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc6:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd0:	f7fd fe16 	bl	8002800 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bd8:	f7fd fe12 	bl	8002800 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e0fa      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0ef      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x418>
 8004bf8:	e01b      	b.n	8004c32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bfa:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c00:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0a:	f7fd fdf9 	bl	8002800 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c12:	f7fd fdf5 	bl	8002800 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e0dd      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c24:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ef      	bne.n	8004c12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80d1 	beq.w	8004dde <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	f000 808b 	beq.w	8004d60 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d15e      	bne.n	8004d10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <HAL_RCC_OscConfig+0x4b8>)
 8004c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fd fdcf 	bl	8002800 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c64:	e00c      	b.n	8004c80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c66:	f7fd fdcb 	bl	8002800 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d905      	bls.n	8004c80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0b3      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c80:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ec      	bne.n	8004c66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c8c:	4b56      	ldr	r3, [pc, #344]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	4b56      	ldr	r3, [pc, #344]	; (8004dec <HAL_RCC_OscConfig+0x62c>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6a11      	ldr	r1, [r2, #32]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c9c:	3a01      	subs	r2, #1
 8004c9e:	0112      	lsls	r2, r2, #4
 8004ca0:	4311      	orrs	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ca6:	0212      	lsls	r2, r2, #8
 8004ca8:	4311      	orrs	r1, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cae:	0852      	lsrs	r2, r2, #1
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0552      	lsls	r2, r2, #21
 8004cb4:	4311      	orrs	r1, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cba:	0852      	lsrs	r2, r2, #1
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	0652      	lsls	r2, r2, #25
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cc6:	06d2      	lsls	r2, r2, #27
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	4947      	ldr	r1, [pc, #284]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a44      	ldr	r2, [pc, #272]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cdc:	4b42      	ldr	r3, [pc, #264]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a41      	ldr	r2, [pc, #260]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fd8a 	bl	8002800 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fd fd86 	bl	8002800 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e06e      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x530>
 8004d0e:	e066      	b.n	8004dde <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d10:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a34      	ldr	r2, [pc, #208]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d1a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d1c:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4a31      	ldr	r2, [pc, #196]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d28:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd fd62 	bl	8002800 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fd fd5e 	bl	8002800 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e046      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x580>
 8004d5e:	e03e      	b.n	8004dde <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e039      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d6c:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <HAL_RCC_OscConfig+0x628>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 0203 	and.w	r2, r3, #3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d12c      	bne.n	8004dda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d123      	bne.n	8004dda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d11b      	bne.n	8004dda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d113      	bne.n	8004dda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d109      	bne.n	8004dda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	019f800c 	.word	0x019f800c

08004df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e11e      	b.n	8005046 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e08:	4b91      	ldr	r3, [pc, #580]	; (8005050 <HAL_RCC_ClockConfig+0x260>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d910      	bls.n	8004e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e16:	4b8e      	ldr	r3, [pc, #568]	; (8005050 <HAL_RCC_ClockConfig+0x260>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 020f 	bic.w	r2, r3, #15
 8004e1e:	498c      	ldr	r1, [pc, #560]	; (8005050 <HAL_RCC_ClockConfig+0x260>)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	4b8a      	ldr	r3, [pc, #552]	; (8005050 <HAL_RCC_ClockConfig+0x260>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e106      	b.n	8005046 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d073      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d129      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4c:	4b81      	ldr	r3, [pc, #516]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0f4      	b.n	8005046 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e5c:	f000 f99e 	bl	800519c <RCC_GetSysClockFreqFromPLLSource>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4a7c      	ldr	r2, [pc, #496]	; (8005058 <HAL_RCC_ClockConfig+0x268>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d93f      	bls.n	8004eea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e6a:	4b7a      	ldr	r3, [pc, #488]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d033      	beq.n	8004eea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d12f      	bne.n	8004eea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e8a:	4b72      	ldr	r3, [pc, #456]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e92:	4a70      	ldr	r2, [pc, #448]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e024      	b.n	8004eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ea8:	4b6a      	ldr	r3, [pc, #424]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0c6      	b.n	8005046 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb8:	4b66      	ldr	r3, [pc, #408]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0be      	b.n	8005046 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ec8:	f000 f8ce 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4a61      	ldr	r2, [pc, #388]	; (8005058 <HAL_RCC_ClockConfig+0x268>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d909      	bls.n	8004eea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ed6:	4b5f      	ldr	r3, [pc, #380]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ede:	4a5d      	ldr	r2, [pc, #372]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eea:	4b5a      	ldr	r3, [pc, #360]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 0203 	bic.w	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4957      	ldr	r1, [pc, #348]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efc:	f7fd fc80 	bl	8002800 <HAL_GetTick>
 8004f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f04:	f7fd fc7c 	bl	8002800 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e095      	b.n	8005046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	4b4e      	ldr	r3, [pc, #312]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 020c 	and.w	r2, r3, #12
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d1eb      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d023      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f44:	4b43      	ldr	r3, [pc, #268]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a42      	ldr	r2, [pc, #264]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f5c:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f64:	4a3b      	ldr	r2, [pc, #236]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6c:	4b39      	ldr	r3, [pc, #228]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4936      	ldr	r1, [pc, #216]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d105      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f86:	4b33      	ldr	r3, [pc, #204]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	4a32      	ldr	r2, [pc, #200]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f92:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <HAL_RCC_ClockConfig+0x260>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d21d      	bcs.n	8004fdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa0:	4b2b      	ldr	r3, [pc, #172]	; (8005050 <HAL_RCC_ClockConfig+0x260>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f023 020f 	bic.w	r2, r3, #15
 8004fa8:	4929      	ldr	r1, [pc, #164]	; (8005050 <HAL_RCC_ClockConfig+0x260>)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fb0:	f7fd fc26 	bl	8002800 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fd fc22 	bl	8002800 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e03b      	b.n	8005046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b20      	ldr	r3, [pc, #128]	; (8005050 <HAL_RCC_ClockConfig+0x260>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d1ed      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe8:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4917      	ldr	r1, [pc, #92]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005006:	4b13      	ldr	r3, [pc, #76]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	490f      	ldr	r1, [pc, #60]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8005016:	4313      	orrs	r3, r2
 8005018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800501a:	f000 f825 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 800501e:	4602      	mov	r2, r0
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_RCC_ClockConfig+0x264>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	490c      	ldr	r1, [pc, #48]	; (800505c <HAL_RCC_ClockConfig+0x26c>)
 800502c:	5ccb      	ldrb	r3, [r1, r3]
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <HAL_RCC_ClockConfig+0x270>)
 8005038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x274>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd fb92 	bl	8002768 <HAL_InitTick>
 8005044:	4603      	mov	r3, r0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40022000 	.word	0x40022000
 8005054:	40021000 	.word	0x40021000
 8005058:	04c4b400 	.word	0x04c4b400
 800505c:	0800c264 	.word	0x0800c264
 8005060:	20000000 	.word	0x20000000
 8005064:	20000004 	.word	0x20000004

08005068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800506e:	4b2c      	ldr	r3, [pc, #176]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b04      	cmp	r3, #4
 8005078:	d102      	bne.n	8005080 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800507a:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <HAL_RCC_GetSysClockFreq+0xbc>)
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e047      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d102      	bne.n	8005092 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800508c:	4b26      	ldr	r3, [pc, #152]	; (8005128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	e03e      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005092:	4b23      	ldr	r3, [pc, #140]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d136      	bne.n	800510c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800509e:	4b20      	ldr	r3, [pc, #128]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	3301      	adds	r3, #1
 80050b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050bc:	4a1a      	ldr	r2, [pc, #104]	; (8005128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	4a16      	ldr	r2, [pc, #88]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c6:	68d2      	ldr	r2, [r2, #12]
 80050c8:	0a12      	lsrs	r2, r2, #8
 80050ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	617b      	str	r3, [r7, #20]
      break;
 80050d4:	e00c      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d6:	4a13      	ldr	r2, [pc, #76]	; (8005124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	4a10      	ldr	r2, [pc, #64]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050e0:	68d2      	ldr	r2, [r2, #12]
 80050e2:	0a12      	lsrs	r2, r2, #8
 80050e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
      break;
 80050ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	0e5b      	lsrs	r3, r3, #25
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	3301      	adds	r3, #1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	e001      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005110:	693b      	ldr	r3, [r7, #16]
}
 8005112:	4618      	mov	r0, r3
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	00f42400 	.word	0x00f42400
 8005128:	007a1200 	.word	0x007a1200

0800512c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005130:	4b03      	ldr	r3, [pc, #12]	; (8005140 <HAL_RCC_GetHCLKFreq+0x14>)
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000000 	.word	0x20000000

08005144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005148:	f7ff fff0 	bl	800512c <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4904      	ldr	r1, [pc, #16]	; (800516c <HAL_RCC_GetPCLK1Freq+0x28>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000
 800516c:	0800c274 	.word	0x0800c274

08005170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005174:	f7ff ffda 	bl	800512c <HAL_RCC_GetHCLKFreq>
 8005178:	4602      	mov	r2, r0
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	0adb      	lsrs	r3, r3, #11
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	4904      	ldr	r1, [pc, #16]	; (8005198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005186:	5ccb      	ldrb	r3, [r1, r3]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005190:	4618      	mov	r0, r3
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40021000 	.word	0x40021000
 8005198:	0800c274 	.word	0x0800c274

0800519c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051a2:	4b1e      	ldr	r3, [pc, #120]	; (800521c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d10c      	bne.n	80051da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c0:	4a17      	ldr	r2, [pc, #92]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	4a14      	ldr	r2, [pc, #80]	; (800521c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ca:	68d2      	ldr	r2, [r2, #12]
 80051cc:	0a12      	lsrs	r2, r2, #8
 80051ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	617b      	str	r3, [r7, #20]
    break;
 80051d8:	e00c      	b.n	80051f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051da:	4a12      	ldr	r2, [pc, #72]	; (8005224 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	4a0e      	ldr	r2, [pc, #56]	; (800521c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051e4:	68d2      	ldr	r2, [r2, #12]
 80051e6:	0a12      	lsrs	r2, r2, #8
 80051e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
    break;
 80051f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	0e5b      	lsrs	r3, r3, #25
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	3301      	adds	r3, #1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800520e:	687b      	ldr	r3, [r7, #4]
}
 8005210:	4618      	mov	r0, r3
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40021000 	.word	0x40021000
 8005220:	007a1200 	.word	0x007a1200
 8005224:	00f42400 	.word	0x00f42400

08005228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005230:	2300      	movs	r3, #0
 8005232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005234:	2300      	movs	r3, #0
 8005236:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8098 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524a:	4b43      	ldr	r3, [pc, #268]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10d      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005256:	4b40      	ldr	r3, [pc, #256]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	4a3f      	ldr	r2, [pc, #252]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800525c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005260:	6593      	str	r3, [r2, #88]	; 0x58
 8005262:	4b3d      	ldr	r3, [pc, #244]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526e:	2301      	movs	r3, #1
 8005270:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005272:	4b3a      	ldr	r3, [pc, #232]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a39      	ldr	r2, [pc, #228]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800527e:	f7fd fabf 	bl	8002800 <HAL_GetTick>
 8005282:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005284:	e009      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005286:	f7fd fabb 	bl	8002800 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d902      	bls.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	74fb      	strb	r3, [r7, #19]
        break;
 8005298:	e005      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800529a:	4b30      	ldr	r3, [pc, #192]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ef      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052a6:	7cfb      	ldrb	r3, [r7, #19]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d159      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ac:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01e      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d019      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052c8:	4b23      	ldr	r3, [pc, #140]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052d4:	4b20      	ldr	r3, [pc, #128]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052e4:	4b1c      	ldr	r3, [pc, #112]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052f4:	4a18      	ldr	r2, [pc, #96]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d016      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005306:	f7fd fa7b 	bl	8002800 <HAL_GetTick>
 800530a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800530c:	e00b      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fd fa77 	bl	8002800 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f241 3288 	movw	r2, #5000	; 0x1388
 800531c:	4293      	cmp	r3, r2
 800531e:	d902      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	74fb      	strb	r3, [r7, #19]
            break;
 8005324:	e006      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0ec      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005334:	7cfb      	ldrb	r3, [r7, #19]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800533a:	4b07      	ldr	r3, [pc, #28]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4903      	ldr	r1, [pc, #12]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005350:	e008      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005352:	7cfb      	ldrb	r3, [r7, #19]
 8005354:	74bb      	strb	r3, [r7, #18]
 8005356:	e005      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005358:	40021000 	.word	0x40021000
 800535c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005364:	7c7b      	ldrb	r3, [r7, #17]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d105      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536a:	4ba6      	ldr	r3, [pc, #664]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	4aa5      	ldr	r2, [pc, #660]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005374:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005382:	4ba0      	ldr	r3, [pc, #640]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f023 0203 	bic.w	r2, r3, #3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	499c      	ldr	r1, [pc, #624]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a4:	4b97      	ldr	r3, [pc, #604]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	f023 020c 	bic.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	4994      	ldr	r1, [pc, #592]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053c6:	4b8f      	ldr	r3, [pc, #572]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	498b      	ldr	r1, [pc, #556]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053e8:	4b86      	ldr	r3, [pc, #536]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	4983      	ldr	r1, [pc, #524]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800540a:	4b7e      	ldr	r3, [pc, #504]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	497a      	ldr	r1, [pc, #488]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800542c:	4b75      	ldr	r3, [pc, #468]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	4972      	ldr	r1, [pc, #456]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800544e:	4b6d      	ldr	r3, [pc, #436]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	4969      	ldr	r1, [pc, #420]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005470:	4b64      	ldr	r3, [pc, #400]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	4961      	ldr	r1, [pc, #388]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005492:	4b5c      	ldr	r3, [pc, #368]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005498:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	4958      	ldr	r1, [pc, #352]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d015      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054b4:	4b53      	ldr	r3, [pc, #332]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	4950      	ldr	r1, [pc, #320]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d2:	d105      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4a4a      	ldr	r2, [pc, #296]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d015      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054ec:	4b45      	ldr	r3, [pc, #276]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	4942      	ldr	r1, [pc, #264]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800550a:	d105      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800550c:	4b3d      	ldr	r3, [pc, #244]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4a3c      	ldr	r2, [pc, #240]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005516:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005524:	4b37      	ldr	r3, [pc, #220]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	4934      	ldr	r1, [pc, #208]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005542:	d105      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005544:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4a2e      	ldr	r2, [pc, #184]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800554e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d015      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800555c:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	4926      	ldr	r1, [pc, #152]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800557a:	d105      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800557c:	4b21      	ldr	r3, [pc, #132]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a20      	ldr	r2, [pc, #128]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005586:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d015      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005594:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	4918      	ldr	r1, [pc, #96]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b2:	d105      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4a12      	ldr	r2, [pc, #72]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d015      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	490a      	ldr	r1, [pc, #40]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ea:	d105      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a04      	ldr	r2, [pc, #16]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40021000 	.word	0x40021000

08005608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e09d      	b.n	8005756 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562a:	d009      	beq.n	8005640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
 8005632:	e005      	b.n	8005640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fd3c 	bl	80020d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005680:	d902      	bls.n	8005688 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e002      	b.n	800568e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800568c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005696:	d007      	beq.n	80056a8 <HAL_SPI_Init+0xa0>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	ea42 0103 	orr.w	r1, r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	f003 0204 	and.w	r2, r3, #4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005724:	ea42 0103 	orr.w	r1, r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b088      	sub	sp, #32
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_SPI_Transmit+0x22>
 800577c:	2302      	movs	r3, #2
 800577e:	e158      	b.n	8005a32 <HAL_SPI_Transmit+0x2d4>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005788:	f7fd f83a 	bl	8002800 <HAL_GetTick>
 800578c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d002      	beq.n	80057a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800579e:	2302      	movs	r3, #2
 80057a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057a2:	e13d      	b.n	8005a20 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_Transmit+0x52>
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057b4:	e134      	b.n	8005a20 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2203      	movs	r2, #3
 80057ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	88fa      	ldrh	r2, [r7, #6]
 80057ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005800:	d10f      	bne.n	8005822 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005810:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d007      	beq.n	8005840 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800583e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005848:	d94b      	bls.n	80058e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_SPI_Transmit+0xfa>
 8005852:	8afb      	ldrh	r3, [r7, #22]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d13e      	bne.n	80058d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800587c:	e02b      	b.n	80058d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b02      	cmp	r3, #2
 800588a:	d112      	bne.n	80058b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	881a      	ldrh	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	1c9a      	adds	r2, r3, #2
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058b0:	e011      	b.n	80058d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b2:	f7fc ffa5 	bl	8002800 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d803      	bhi.n	80058ca <HAL_SPI_Transmit+0x16c>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d102      	bne.n	80058d0 <HAL_SPI_Transmit+0x172>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058d4:	e0a4      	b.n	8005a20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ce      	bne.n	800587e <HAL_SPI_Transmit+0x120>
 80058e0:	e07c      	b.n	80059dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_SPI_Transmit+0x192>
 80058ea:	8afb      	ldrh	r3, [r7, #22]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d170      	bne.n	80059d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d912      	bls.n	8005920 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	881a      	ldrh	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	1c9a      	adds	r2, r3, #2
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b02      	subs	r3, #2
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800591e:	e058      	b.n	80059d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005946:	e044      	b.n	80059d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d12b      	bne.n	80059ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d912      	bls.n	8005986 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	881a      	ldrh	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b02      	subs	r3, #2
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005984:	e025      	b.n	80059d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ac:	e011      	b.n	80059d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ae:	f7fc ff27 	bl	8002800 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d803      	bhi.n	80059c6 <HAL_SPI_Transmit+0x268>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d102      	bne.n	80059cc <HAL_SPI_Transmit+0x26e>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059d0:	e026      	b.n	8005a20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1b5      	bne.n	8005948 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fb5b 	bl	800609c <SPI_EndRxTxTransaction>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e000      	b.n	8005a20 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005a1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a30:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3720      	adds	r7, #32
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b08a      	sub	sp, #40	; 0x28
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_SPI_TransmitReceive+0x26>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e1fb      	b.n	8005e58 <HAL_SPI_TransmitReceive+0x41e>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a68:	f7fc feca 	bl	8002800 <HAL_GetTick>
 8005a6c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a74:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a7c:	887b      	ldrh	r3, [r7, #2]
 8005a7e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a80:	887b      	ldrh	r3, [r7, #2]
 8005a82:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a84:	7efb      	ldrb	r3, [r7, #27]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d00e      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x6e>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a90:	d106      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x66>
 8005a9a:	7efb      	ldrb	r3, [r7, #27]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d003      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005aa6:	e1cd      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x80>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x80>
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ac0:	e1c0      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d003      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2205      	movs	r2, #5
 8005ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	887a      	ldrh	r2, [r7, #2]
 8005ae6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	887a      	ldrh	r2, [r7, #2]
 8005afc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	887a      	ldrh	r2, [r7, #2]
 8005b02:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b18:	d802      	bhi.n	8005b20 <HAL_SPI_TransmitReceive+0xe6>
 8005b1a:	8a3b      	ldrh	r3, [r7, #16]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d908      	bls.n	8005b32 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	e007      	b.n	8005b42 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b40:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d007      	beq.n	8005b60 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b68:	d97c      	bls.n	8005c64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_SPI_TransmitReceive+0x13e>
 8005b72:	8a7b      	ldrh	r3, [r7, #18]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d169      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	881a      	ldrh	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b9c:	e056      	b.n	8005c4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d11b      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x1aa>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x1aa>
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d113      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	881a      	ldrh	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	1c9a      	adds	r2, r3, #2
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d11c      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x1f2>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d016      	beq.n	8005c2c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	b292      	uxth	r2, r2
 8005c0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	1c9a      	adds	r2, r3, #2
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c2c:	f7fc fde8 	bl	8002800 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d807      	bhi.n	8005c4c <HAL_SPI_TransmitReceive+0x212>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d003      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c4a:	e0fb      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1a3      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x164>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d19d      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x164>
 8005c62:	e0df      	b.n	8005e24 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x23a>
 8005c6c:	8a7b      	ldrh	r3, [r7, #18]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	f040 80cb 	bne.w	8005e0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d912      	bls.n	8005ca4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	881a      	ldrh	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b02      	subs	r3, #2
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca2:	e0b2      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cca:	e09e      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d134      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x30a>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d02f      	beq.n	8005d44 <HAL_SPI_TransmitReceive+0x30a>
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d12c      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d912      	bls.n	8005d1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	881a      	ldrh	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b02      	subs	r3, #2
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d18:	e012      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d148      	bne.n	8005de4 <HAL_SPI_TransmitReceive+0x3aa>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d042      	beq.n	8005de4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d923      	bls.n	8005db2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	b292      	uxth	r2, r2
 8005d76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b02      	subs	r3, #2
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d81f      	bhi.n	8005de0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dae:	605a      	str	r2, [r3, #4]
 8005db0:	e016      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f103 020c 	add.w	r2, r3, #12
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de0:	2301      	movs	r3, #1
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005de4:	f7fc fd0c 	bl	8002800 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d803      	bhi.n	8005dfc <HAL_SPI_TransmitReceive+0x3c2>
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d102      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x3c8>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e08:	e01c      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f47f af5b 	bne.w	8005ccc <HAL_SPI_TransmitReceive+0x292>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f47f af54 	bne.w	8005ccc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f937 	bl	800609c <SPI_EndRxTxTransaction>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	661a      	str	r2, [r3, #96]	; 0x60
 8005e40:	e000      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3728      	adds	r7, #40	; 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e70:	f7fc fcc6 	bl	8002800 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e80:	f7fc fcbe 	bl	8002800 <HAL_GetTick>
 8005e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	015b      	lsls	r3, r3, #5
 8005e8c:	0d1b      	lsrs	r3, r3, #20
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	fb02 f303 	mul.w	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e96:	e054      	b.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d050      	beq.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ea0:	f7fc fcae 	bl	8002800 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d902      	bls.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d13d      	bne.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ece:	d111      	bne.n	8005ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	d004      	beq.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee2:	d107      	bne.n	8005ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efc:	d10f      	bne.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e017      	b.n	8005f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	bf0c      	ite	eq
 8005f52:	2301      	moveq	r3, #1
 8005f54:	2300      	movne	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d19b      	bne.n	8005e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000000 	.word	0x20000000

08005f70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f82:	f7fc fc3d 	bl	8002800 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	4413      	add	r3, r2
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f92:	f7fc fc35 	bl	8002800 <HAL_GetTick>
 8005f96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fa0:	4b3d      	ldr	r3, [pc, #244]	; (8006098 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	00da      	lsls	r2, r3, #3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	0d1b      	lsrs	r3, r3, #20
 8005fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fb8:	e060      	b.n	800607c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fc0:	d107      	bne.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d050      	beq.n	800607c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fda:	f7fc fc11 	bl	8002800 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d902      	bls.n	8005ff0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d13d      	bne.n	800606c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ffe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006008:	d111      	bne.n	800602e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006012:	d004      	beq.n	800601e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601c:	d107      	bne.n	800602e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006036:	d10f      	bne.n	8006058 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e010      	b.n	800608e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	3b01      	subs	r3, #1
 800607a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	d196      	bne.n	8005fba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3728      	adds	r7, #40	; 0x28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000000 	.word	0x20000000

0800609c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff ff5b 	bl	8005f70 <SPI_WaitFifoStateUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c4:	f043 0220 	orr.w	r2, r3, #32
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e027      	b.n	8006120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2200      	movs	r2, #0
 80060d8:	2180      	movs	r1, #128	; 0x80
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fec0 	bl	8005e60 <SPI_WaitFlagStateUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e014      	b.n	8006120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff ff34 	bl	8005f70 <SPI_WaitFifoStateUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006112:	f043 0220 	orr.w	r2, r3, #32
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e000      	b.n	8006120 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e049      	b.n	80061ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fc f9ec 	bl	800252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f000 fb4c 	bl	8006804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d001      	beq.n	80061f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e04a      	b.n	8006286 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a21      	ldr	r2, [pc, #132]	; (8006294 <HAL_TIM_Base_Start_IT+0xbc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x6c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d013      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x6c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <HAL_TIM_Base_Start_IT+0xc0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x6c>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1c      	ldr	r2, [pc, #112]	; (800629c <HAL_TIM_Base_Start_IT+0xc4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x6c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x6c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d115      	bne.n	8006270 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	4b17      	ldr	r3, [pc, #92]	; (80062a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800624c:	4013      	ands	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b06      	cmp	r3, #6
 8006254:	d015      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xaa>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625c:	d011      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	e008      	b.n	8006282 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e000      	b.n	8006284 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	00010007 	.word	0x00010007

080062ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0202 	mvn.w	r2, #2
 80062d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa6a 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa5c 	bl	80067b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa6d 	bl	80067dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b04      	cmp	r3, #4
 8006314:	d122      	bne.n	800635c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b04      	cmp	r3, #4
 8006322:	d11b      	bne.n	800635c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0204 	mvn.w	r2, #4
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2202      	movs	r2, #2
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa40 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa32 	bl	80067b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa43 	bl	80067dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b08      	cmp	r3, #8
 8006368:	d122      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b08      	cmp	r3, #8
 8006376:	d11b      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0208 	mvn.w	r2, #8
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2204      	movs	r2, #4
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa16 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa08 	bl	80067b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fa19 	bl	80067dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b10      	cmp	r3, #16
 80063bc:	d122      	bne.n	8006404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d11b      	bne.n	8006404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0210 	mvn.w	r2, #16
 80063d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2208      	movs	r2, #8
 80063da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9ec 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9de 	bl	80067b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f9ef 	bl	80067dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d10e      	bne.n	8006430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d107      	bne.n	8006430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0201 	mvn.w	r2, #1
 8006428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9b8 	bl	80067a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d10e      	bne.n	800645c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d107      	bne.n	800645c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fb8c 	bl	8006b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646a:	d10e      	bne.n	800648a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006476:	2b80      	cmp	r3, #128	; 0x80
 8006478:	d107      	bne.n	800648a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fb7f 	bl	8006b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	d10e      	bne.n	80064b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a2:	2b40      	cmp	r3, #64	; 0x40
 80064a4:	d107      	bne.n	80064b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f99d 	bl	80067f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d10e      	bne.n	80064e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d107      	bne.n	80064e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f06f 0220 	mvn.w	r2, #32
 80064da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fb3f 	bl	8006b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f0:	d10f      	bne.n	8006512 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006500:	d107      	bne.n	8006512 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800650a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fb45 	bl	8006b9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800651c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006520:	d10f      	bne.n	8006542 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800652c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006530:	d107      	bne.n	8006542 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800653a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb37 	bl	8006bb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006550:	d10f      	bne.n	8006572 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800655c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006560:	d107      	bne.n	8006572 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800656a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fb29 	bl	8006bc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800657c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006580:	d10f      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800658c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006590:	d107      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800659a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb1b 	bl	8006bd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_TIM_ConfigClockSource+0x1c>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e0de      	b.n	8006786 <HAL_TIM_ConfigClockSource+0x1da>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80065e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a63      	ldr	r2, [pc, #396]	; (8006790 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	f000 80a9 	beq.w	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 8006608:	4a61      	ldr	r2, [pc, #388]	; (8006790 <HAL_TIM_ConfigClockSource+0x1e4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	f200 80ae 	bhi.w	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 8006610:	4a60      	ldr	r2, [pc, #384]	; (8006794 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	f000 80a1 	beq.w	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 8006618:	4a5e      	ldr	r2, [pc, #376]	; (8006794 <HAL_TIM_ConfigClockSource+0x1e8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	f200 80a6 	bhi.w	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 8006620:	4a5d      	ldr	r2, [pc, #372]	; (8006798 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006622:	4293      	cmp	r3, r2
 8006624:	f000 8099 	beq.w	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 8006628:	4a5b      	ldr	r2, [pc, #364]	; (8006798 <HAL_TIM_ConfigClockSource+0x1ec>)
 800662a:	4293      	cmp	r3, r2
 800662c:	f200 809e 	bhi.w	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 8006630:	4a5a      	ldr	r2, [pc, #360]	; (800679c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f000 8091 	beq.w	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 8006638:	4a58      	ldr	r2, [pc, #352]	; (800679c <HAL_TIM_ConfigClockSource+0x1f0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	f200 8096 	bhi.w	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 8006640:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006644:	f000 8089 	beq.w	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 8006648:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800664c:	f200 808e 	bhi.w	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 8006650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006654:	d03e      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0x128>
 8006656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665a:	f200 8087 	bhi.w	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006662:	f000 8086 	beq.w	8006772 <HAL_TIM_ConfigClockSource+0x1c6>
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	d87f      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 800666c:	2b70      	cmp	r3, #112	; 0x70
 800666e:	d01a      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0xfa>
 8006670:	2b70      	cmp	r3, #112	; 0x70
 8006672:	d87b      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 8006674:	2b60      	cmp	r3, #96	; 0x60
 8006676:	d050      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x16e>
 8006678:	2b60      	cmp	r3, #96	; 0x60
 800667a:	d877      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 800667c:	2b50      	cmp	r3, #80	; 0x50
 800667e:	d03c      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x14e>
 8006680:	2b50      	cmp	r3, #80	; 0x50
 8006682:	d873      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d058      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x18e>
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d86f      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 800668c:	2b30      	cmp	r3, #48	; 0x30
 800668e:	d064      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 8006690:	2b30      	cmp	r3, #48	; 0x30
 8006692:	d86b      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 8006694:	2b20      	cmp	r3, #32
 8006696:	d060      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 8006698:	2b20      	cmp	r3, #32
 800669a:	d867      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x1c0>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d05c      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 80066a0:	2b10      	cmp	r3, #16
 80066a2:	d05a      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x1ae>
 80066a4:	e062      	b.n	800676c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	6899      	ldr	r1, [r3, #8]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f000 f9b1 	bl	8006a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	609a      	str	r2, [r3, #8]
      break;
 80066d2:	e04f      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6899      	ldr	r1, [r3, #8]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f000 f99a 	bl	8006a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066f6:	609a      	str	r2, [r3, #8]
      break;
 80066f8:	e03c      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6859      	ldr	r1, [r3, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	461a      	mov	r2, r3
 8006708:	f000 f90c 	bl	8006924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2150      	movs	r1, #80	; 0x50
 8006712:	4618      	mov	r0, r3
 8006714:	f000 f965 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 8006718:	e02c      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	461a      	mov	r2, r3
 8006728:	f000 f92b 	bl	8006982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2160      	movs	r1, #96	; 0x60
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f955 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 8006738:	e01c      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	461a      	mov	r2, r3
 8006748:	f000 f8ec 	bl	8006924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2140      	movs	r1, #64	; 0x40
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f945 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 8006758:	e00c      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f000 f93c 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800676a:	e003      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
      break;
 8006770:	e000      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	00100070 	.word	0x00100070
 8006794:	00100040 	.word	0x00100040
 8006798:	00100030 	.word	0x00100030
 800679c:	00100020 	.word	0x00100020

080067a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a3c      	ldr	r2, [pc, #240]	; (8006908 <TIM_Base_SetConfig+0x104>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00f      	beq.n	800683c <TIM_Base_SetConfig+0x38>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006822:	d00b      	beq.n	800683c <TIM_Base_SetConfig+0x38>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a39      	ldr	r2, [pc, #228]	; (800690c <TIM_Base_SetConfig+0x108>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_Base_SetConfig+0x38>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a38      	ldr	r2, [pc, #224]	; (8006910 <TIM_Base_SetConfig+0x10c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0x38>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a37      	ldr	r2, [pc, #220]	; (8006914 <TIM_Base_SetConfig+0x110>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d108      	bne.n	800684e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2d      	ldr	r2, [pc, #180]	; (8006908 <TIM_Base_SetConfig+0x104>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01b      	beq.n	800688e <TIM_Base_SetConfig+0x8a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d017      	beq.n	800688e <TIM_Base_SetConfig+0x8a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a2a      	ldr	r2, [pc, #168]	; (800690c <TIM_Base_SetConfig+0x108>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d013      	beq.n	800688e <TIM_Base_SetConfig+0x8a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a29      	ldr	r2, [pc, #164]	; (8006910 <TIM_Base_SetConfig+0x10c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00f      	beq.n	800688e <TIM_Base_SetConfig+0x8a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a28      	ldr	r2, [pc, #160]	; (8006914 <TIM_Base_SetConfig+0x110>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00b      	beq.n	800688e <TIM_Base_SetConfig+0x8a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a27      	ldr	r2, [pc, #156]	; (8006918 <TIM_Base_SetConfig+0x114>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d007      	beq.n	800688e <TIM_Base_SetConfig+0x8a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a26      	ldr	r2, [pc, #152]	; (800691c <TIM_Base_SetConfig+0x118>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d003      	beq.n	800688e <TIM_Base_SetConfig+0x8a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a25      	ldr	r2, [pc, #148]	; (8006920 <TIM_Base_SetConfig+0x11c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d108      	bne.n	80068a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a10      	ldr	r2, [pc, #64]	; (8006908 <TIM_Base_SetConfig+0x104>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_Base_SetConfig+0xe8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a11      	ldr	r2, [pc, #68]	; (8006914 <TIM_Base_SetConfig+0x110>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00b      	beq.n	80068ec <TIM_Base_SetConfig+0xe8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a10      	ldr	r2, [pc, #64]	; (8006918 <TIM_Base_SetConfig+0x114>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_Base_SetConfig+0xe8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a0f      	ldr	r2, [pc, #60]	; (800691c <TIM_Base_SetConfig+0x118>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_Base_SetConfig+0xe8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a0e      	ldr	r2, [pc, #56]	; (8006920 <TIM_Base_SetConfig+0x11c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d103      	bne.n	80068f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	615a      	str	r2, [r3, #20]
}
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40013400 	.word	0x40013400
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400
 8006920:	40014800 	.word	0x40014800

08006924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 030a 	bic.w	r3, r3, #10
 8006960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006982:	b480      	push	{r7}
 8006984:	b087      	sub	sp, #28
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0210 	bic.w	r2, r3, #16
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80069f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f043 0307 	orr.w	r3, r3, #7
 8006a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	bf00      	nop
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	021a      	lsls	r2, r3, #8
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	609a      	str	r2, [r3, #8]
}
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e065      	b.n	8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a2c      	ldr	r2, [pc, #176]	; (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2b      	ldr	r2, [pc, #172]	; (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d108      	bne.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006aae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1b      	ldr	r2, [pc, #108]	; (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d018      	beq.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aea:	d013      	beq.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a18      	ldr	r2, [pc, #96]	; (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00e      	beq.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a12      	ldr	r2, [pc, #72]	; (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a13      	ldr	r2, [pc, #76]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d10c      	bne.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	40012c00 	.word	0x40012c00
 8006b50:	40013400 	.word	0x40013400
 8006b54:	40000400 	.word	0x40000400
 8006b58:	40000800 	.word	0x40000800
 8006b5c:	40014000 	.word	0x40014000

08006b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e042      	b.n	8006c84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d106      	bne.n	8006c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7fb fd0f 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2224      	movs	r2, #36	; 0x24
 8006c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f8c2 	bl	8006db8 <UART_SetConfig>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e022      	b.n	8006c84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb82 	bl	8007350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc09 	bl	8007494 <UART_CheckIdleState>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	f040 8083 	bne.w	8006dae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_UART_Transmit+0x28>
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e07b      	b.n	8006db0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UART_Transmit+0x3a>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e074      	b.n	8006db0 <HAL_UART_Transmit+0x124>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2221      	movs	r2, #33	; 0x21
 8006cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cde:	f7fb fd8f 	bl	8002800 <HAL_GetTick>
 8006ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	88fa      	ldrh	r2, [r7, #6]
 8006cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfc:	d108      	bne.n	8006d10 <HAL_UART_Transmit+0x84>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	e003      	b.n	8006d18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006d20:	e02c      	b.n	8006d7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2180      	movs	r1, #128	; 0x80
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fbfc 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e039      	b.n	8006db0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	3302      	adds	r3, #2
 8006d56:	61bb      	str	r3, [r7, #24]
 8006d58:	e007      	b.n	8006d6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	781a      	ldrb	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1cc      	bne.n	8006d22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2140      	movs	r1, #64	; 0x40
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 fbc9 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e006      	b.n	8006db0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e000      	b.n	8006db0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006dae:	2302      	movs	r3, #2
  }
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dbc:	b08c      	sub	sp, #48	; 0x30
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4bab      	ldr	r3, [pc, #684]	; (8007094 <UART_SetConfig+0x2dc>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4aa0      	ldr	r2, [pc, #640]	; (8007098 <UART_SetConfig+0x2e0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e20:	4313      	orrs	r3, r2
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	f023 010f 	bic.w	r1, r3, #15
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a91      	ldr	r2, [pc, #580]	; (800709c <UART_SetConfig+0x2e4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d125      	bne.n	8006ea8 <UART_SetConfig+0xf0>
 8006e5c:	4b90      	ldr	r3, [pc, #576]	; (80070a0 <UART_SetConfig+0x2e8>)
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d81a      	bhi.n	8006ea0 <UART_SetConfig+0xe8>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <UART_SetConfig+0xb8>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006e81 	.word	0x08006e81
 8006e74:	08006e91 	.word	0x08006e91
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e86:	e0d6      	b.n	8007036 <UART_SetConfig+0x27e>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8e:	e0d2      	b.n	8007036 <UART_SetConfig+0x27e>
 8006e90:	2304      	movs	r3, #4
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e96:	e0ce      	b.n	8007036 <UART_SetConfig+0x27e>
 8006e98:	2308      	movs	r3, #8
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e9e:	e0ca      	b.n	8007036 <UART_SetConfig+0x27e>
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea6:	e0c6      	b.n	8007036 <UART_SetConfig+0x27e>
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a7d      	ldr	r2, [pc, #500]	; (80070a4 <UART_SetConfig+0x2ec>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d138      	bne.n	8006f24 <UART_SetConfig+0x16c>
 8006eb2:	4b7b      	ldr	r3, [pc, #492]	; (80070a0 <UART_SetConfig+0x2e8>)
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb8:	f003 030c 	and.w	r3, r3, #12
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	d82d      	bhi.n	8006f1c <UART_SetConfig+0x164>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <UART_SetConfig+0x110>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006f1d 	.word	0x08006f1d
 8006ed0:	08006f1d 	.word	0x08006f1d
 8006ed4:	08006f1d 	.word	0x08006f1d
 8006ed8:	08006f0d 	.word	0x08006f0d
 8006edc:	08006f1d 	.word	0x08006f1d
 8006ee0:	08006f1d 	.word	0x08006f1d
 8006ee4:	08006f1d 	.word	0x08006f1d
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	08006f1d 	.word	0x08006f1d
 8006ef0:	08006f1d 	.word	0x08006f1d
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f15 	.word	0x08006f15
 8006efc:	2300      	movs	r3, #0
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f02:	e098      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0a:	e094      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f12:	e090      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1a:	e08c      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f22:	e088      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a5f      	ldr	r2, [pc, #380]	; (80070a8 <UART_SetConfig+0x2f0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d125      	bne.n	8006f7a <UART_SetConfig+0x1c2>
 8006f2e:	4b5c      	ldr	r3, [pc, #368]	; (80070a0 <UART_SetConfig+0x2e8>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d016      	beq.n	8006f6a <UART_SetConfig+0x1b2>
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d818      	bhi.n	8006f72 <UART_SetConfig+0x1ba>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d00a      	beq.n	8006f5a <UART_SetConfig+0x1a2>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d814      	bhi.n	8006f72 <UART_SetConfig+0x1ba>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <UART_SetConfig+0x19a>
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d008      	beq.n	8006f62 <UART_SetConfig+0x1aa>
 8006f50:	e00f      	b.n	8006f72 <UART_SetConfig+0x1ba>
 8006f52:	2300      	movs	r3, #0
 8006f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f58:	e06d      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f60:	e069      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f62:	2304      	movs	r3, #4
 8006f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f68:	e065      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f70:	e061      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f72:	2310      	movs	r3, #16
 8006f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f78:	e05d      	b.n	8007036 <UART_SetConfig+0x27e>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a4b      	ldr	r2, [pc, #300]	; (80070ac <UART_SetConfig+0x2f4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d125      	bne.n	8006fd0 <UART_SetConfig+0x218>
 8006f84:	4b46      	ldr	r3, [pc, #280]	; (80070a0 <UART_SetConfig+0x2e8>)
 8006f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f90:	d016      	beq.n	8006fc0 <UART_SetConfig+0x208>
 8006f92:	2bc0      	cmp	r3, #192	; 0xc0
 8006f94:	d818      	bhi.n	8006fc8 <UART_SetConfig+0x210>
 8006f96:	2b80      	cmp	r3, #128	; 0x80
 8006f98:	d00a      	beq.n	8006fb0 <UART_SetConfig+0x1f8>
 8006f9a:	2b80      	cmp	r3, #128	; 0x80
 8006f9c:	d814      	bhi.n	8006fc8 <UART_SetConfig+0x210>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <UART_SetConfig+0x1f0>
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d008      	beq.n	8006fb8 <UART_SetConfig+0x200>
 8006fa6:	e00f      	b.n	8006fc8 <UART_SetConfig+0x210>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fae:	e042      	b.n	8007036 <UART_SetConfig+0x27e>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb6:	e03e      	b.n	8007036 <UART_SetConfig+0x27e>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fbe:	e03a      	b.n	8007036 <UART_SetConfig+0x27e>
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc6:	e036      	b.n	8007036 <UART_SetConfig+0x27e>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fce:	e032      	b.n	8007036 <UART_SetConfig+0x27e>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a30      	ldr	r2, [pc, #192]	; (8007098 <UART_SetConfig+0x2e0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d12a      	bne.n	8007030 <UART_SetConfig+0x278>
 8006fda:	4b31      	ldr	r3, [pc, #196]	; (80070a0 <UART_SetConfig+0x2e8>)
 8006fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fe8:	d01a      	beq.n	8007020 <UART_SetConfig+0x268>
 8006fea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fee:	d81b      	bhi.n	8007028 <UART_SetConfig+0x270>
 8006ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff4:	d00c      	beq.n	8007010 <UART_SetConfig+0x258>
 8006ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffa:	d815      	bhi.n	8007028 <UART_SetConfig+0x270>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <UART_SetConfig+0x250>
 8007000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007004:	d008      	beq.n	8007018 <UART_SetConfig+0x260>
 8007006:	e00f      	b.n	8007028 <UART_SetConfig+0x270>
 8007008:	2300      	movs	r3, #0
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700e:	e012      	b.n	8007036 <UART_SetConfig+0x27e>
 8007010:	2302      	movs	r3, #2
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007016:	e00e      	b.n	8007036 <UART_SetConfig+0x27e>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701e:	e00a      	b.n	8007036 <UART_SetConfig+0x27e>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007026:	e006      	b.n	8007036 <UART_SetConfig+0x27e>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702e:	e002      	b.n	8007036 <UART_SetConfig+0x27e>
 8007030:	2310      	movs	r3, #16
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <UART_SetConfig+0x2e0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	f040 80a8 	bne.w	8007192 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007046:	2b08      	cmp	r3, #8
 8007048:	d834      	bhi.n	80070b4 <UART_SetConfig+0x2fc>
 800704a:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <UART_SetConfig+0x298>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007075 	.word	0x08007075
 8007054:	080070b5 	.word	0x080070b5
 8007058:	0800707d 	.word	0x0800707d
 800705c:	080070b5 	.word	0x080070b5
 8007060:	08007083 	.word	0x08007083
 8007064:	080070b5 	.word	0x080070b5
 8007068:	080070b5 	.word	0x080070b5
 800706c:	080070b5 	.word	0x080070b5
 8007070:	0800708b 	.word	0x0800708b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007074:	f7fe f866 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8007078:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707a:	e021      	b.n	80070c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800707c:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <UART_SetConfig+0x2f8>)
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007080:	e01e      	b.n	80070c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007082:	f7fd fff1 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8007086:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007088:	e01a      	b.n	80070c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007090:	e016      	b.n	80070c0 <UART_SetConfig+0x308>
 8007092:	bf00      	nop
 8007094:	cfff69f3 	.word	0xcfff69f3
 8007098:	40008000 	.word	0x40008000
 800709c:	40013800 	.word	0x40013800
 80070a0:	40021000 	.word	0x40021000
 80070a4:	40004400 	.word	0x40004400
 80070a8:	40004800 	.word	0x40004800
 80070ac:	40004c00 	.word	0x40004c00
 80070b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 812a 	beq.w	800731c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	4a9e      	ldr	r2, [pc, #632]	; (8007348 <UART_SetConfig+0x590>)
 80070ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070d2:	461a      	mov	r2, r3
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80070da:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	4613      	mov	r3, r2
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	4413      	add	r3, r2
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d305      	bcc.n	80070f8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d903      	bls.n	8007100 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070fe:	e10d      	b.n	800731c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	2200      	movs	r2, #0
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	60fa      	str	r2, [r7, #12]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	4a8e      	ldr	r2, [pc, #568]	; (8007348 <UART_SetConfig+0x590>)
 800710e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007112:	b29b      	uxth	r3, r3
 8007114:	2200      	movs	r2, #0
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800711e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007122:	f7f9 fdd9 	bl	8000cd8 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4610      	mov	r0, r2
 800712c:	4619      	mov	r1, r3
 800712e:	f04f 0200 	mov.w	r2, #0
 8007132:	f04f 0300 	mov.w	r3, #0
 8007136:	020b      	lsls	r3, r1, #8
 8007138:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800713c:	0202      	lsls	r2, r0, #8
 800713e:	6979      	ldr	r1, [r7, #20]
 8007140:	6849      	ldr	r1, [r1, #4]
 8007142:	0849      	lsrs	r1, r1, #1
 8007144:	2000      	movs	r0, #0
 8007146:	460c      	mov	r4, r1
 8007148:	4605      	mov	r5, r0
 800714a:	eb12 0804 	adds.w	r8, r2, r4
 800714e:	eb43 0905 	adc.w	r9, r3, r5
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	469a      	mov	sl, r3
 800715a:	4693      	mov	fp, r2
 800715c:	4652      	mov	r2, sl
 800715e:	465b      	mov	r3, fp
 8007160:	4640      	mov	r0, r8
 8007162:	4649      	mov	r1, r9
 8007164:	f7f9 fdb8 	bl	8000cd8 <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4613      	mov	r3, r2
 800716e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007176:	d308      	bcc.n	800718a <UART_SetConfig+0x3d2>
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717e:	d204      	bcs.n	800718a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	60da      	str	r2, [r3, #12]
 8007188:	e0c8      	b.n	800731c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007190:	e0c4      	b.n	800731c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719a:	d167      	bne.n	800726c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800719c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d828      	bhi.n	80071f6 <UART_SetConfig+0x43e>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <UART_SetConfig+0x3f4>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071d1 	.word	0x080071d1
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	080071f7 	.word	0x080071f7
 80071bc:	080071e7 	.word	0x080071e7
 80071c0:	080071f7 	.word	0x080071f7
 80071c4:	080071f7 	.word	0x080071f7
 80071c8:	080071f7 	.word	0x080071f7
 80071cc:	080071ef 	.word	0x080071ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d0:	f7fd ffb8 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 80071d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071d6:	e014      	b.n	8007202 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d8:	f7fd ffca 	bl	8005170 <HAL_RCC_GetPCLK2Freq>
 80071dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071de:	e010      	b.n	8007202 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e0:	4b5a      	ldr	r3, [pc, #360]	; (800734c <UART_SetConfig+0x594>)
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071e4:	e00d      	b.n	8007202 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e6:	f7fd ff3f 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 80071ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071ec:	e009      	b.n	8007202 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071f4:	e005      	b.n	8007202 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007200:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8089 	beq.w	800731c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	4a4e      	ldr	r2, [pc, #312]	; (8007348 <UART_SetConfig+0x590>)
 8007210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007214:	461a      	mov	r2, r3
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	fbb3 f3f2 	udiv	r3, r3, r2
 800721c:	005a      	lsls	r2, r3, #1
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	441a      	add	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	fbb2 f3f3 	udiv	r3, r2, r3
 800722e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	2b0f      	cmp	r3, #15
 8007234:	d916      	bls.n	8007264 <UART_SetConfig+0x4ac>
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723c:	d212      	bcs.n	8007264 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f023 030f 	bic.w	r3, r3, #15
 8007246:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	b29b      	uxth	r3, r3
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	b29a      	uxth	r2, r3
 8007254:	8bfb      	ldrh	r3, [r7, #30]
 8007256:	4313      	orrs	r3, r2
 8007258:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	8bfa      	ldrh	r2, [r7, #30]
 8007260:	60da      	str	r2, [r3, #12]
 8007262:	e05b      	b.n	800731c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800726a:	e057      	b.n	800731c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800726c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007270:	2b08      	cmp	r3, #8
 8007272:	d828      	bhi.n	80072c6 <UART_SetConfig+0x50e>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0x4c4>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072a9 	.word	0x080072a9
 8007284:	080072b1 	.word	0x080072b1
 8007288:	080072c7 	.word	0x080072c7
 800728c:	080072b7 	.word	0x080072b7
 8007290:	080072c7 	.word	0x080072c7
 8007294:	080072c7 	.word	0x080072c7
 8007298:	080072c7 	.word	0x080072c7
 800729c:	080072bf 	.word	0x080072bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a0:	f7fd ff50 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 80072a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072a6:	e014      	b.n	80072d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a8:	f7fd ff62 	bl	8005170 <HAL_RCC_GetPCLK2Freq>
 80072ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072ae:	e010      	b.n	80072d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b0:	4b26      	ldr	r3, [pc, #152]	; (800734c <UART_SetConfig+0x594>)
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072b4:	e00d      	b.n	80072d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b6:	f7fd fed7 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 80072ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072bc:	e009      	b.n	80072d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072c4:	e005      	b.n	80072d2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072d0:	bf00      	nop
    }

    if (pclk != 0U)
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d021      	beq.n	800731c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <UART_SetConfig+0x590>)
 80072de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e2:	461a      	mov	r2, r3
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	441a      	add	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	2b0f      	cmp	r3, #15
 8007300:	d909      	bls.n	8007316 <UART_SetConfig+0x55e>
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007308:	d205      	bcs.n	8007316 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	b29a      	uxth	r2, r3
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60da      	str	r2, [r3, #12]
 8007314:	e002      	b.n	800731c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2201      	movs	r2, #1
 8007320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2201      	movs	r2, #1
 8007328:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2200      	movs	r2, #0
 8007330:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2200      	movs	r2, #0
 8007336:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007338:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800733c:	4618      	mov	r0, r3
 800733e:	3730      	adds	r7, #48	; 0x30
 8007340:	46bd      	mov	sp, r7
 8007342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007346:	bf00      	nop
 8007348:	0800c28c 	.word	0x0800c28c
 800734c:	00f42400 	.word	0x00f42400

08007350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01a      	beq.n	8007466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800744e:	d10a      	bne.n	8007466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	605a      	str	r2, [r3, #4]
  }
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af02      	add	r7, sp, #8
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074a4:	f7fb f9ac 	bl	8002800 <HAL_GetTick>
 80074a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d10e      	bne.n	80074d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f82f 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e025      	b.n	8007522 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d10e      	bne.n	8007502 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f819 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e00f      	b.n	8007522 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b09c      	sub	sp, #112	; 0x70
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	603b      	str	r3, [r7, #0]
 8007536:	4613      	mov	r3, r2
 8007538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753a:	e0a9      	b.n	8007690 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	f000 80a5 	beq.w	8007690 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007546:	f7fb f95b 	bl	8002800 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007552:	429a      	cmp	r2, r3
 8007554:	d302      	bcc.n	800755c <UART_WaitOnFlagUntilTimeout+0x32>
 8007556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007558:	2b00      	cmp	r3, #0
 800755a:	d140      	bne.n	80075de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800756a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800756c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007570:	667b      	str	r3, [r7, #100]	; 0x64
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800757a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800757c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007580:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e6      	bne.n	800755c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	663b      	str	r3, [r7, #96]	; 0x60
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3308      	adds	r3, #8
 80075ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80075b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e5      	bne.n	800758e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e069      	b.n	80076b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d051      	beq.n	8007690 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075fa:	d149      	bne.n	8007690 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007604:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800761a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
 8007626:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800762a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e6      	bne.n	8007606 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	613b      	str	r3, [r7, #16]
   return(result);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007658:	623a      	str	r2, [r7, #32]
 800765a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	69f9      	ldr	r1, [r7, #28]
 800765e:	6a3a      	ldr	r2, [r7, #32]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	61bb      	str	r3, [r7, #24]
   return(result);
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e5      	bne.n	8007638 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2220      	movs	r2, #32
 8007680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e010      	b.n	80076b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4013      	ands	r3, r2
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	429a      	cmp	r2, r3
 800769e:	bf0c      	ite	eq
 80076a0:	2301      	moveq	r3, #1
 80076a2:	2300      	movne	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	f43f af46 	beq.w	800753c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3770      	adds	r7, #112	; 0x70
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e027      	b.n	8007720 <HAL_UARTEx_DisableFifoMode+0x66>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2224      	movs	r2, #36	; 0x24
 80076dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007740:	2302      	movs	r3, #2
 8007742:	e02d      	b.n	80077a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2224      	movs	r2, #36	; 0x24
 8007750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f84f 	bl	8007824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077bc:	2302      	movs	r3, #2
 80077be:	e02d      	b.n	800781c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	; 0x24
 80077cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0201 	bic.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f811 	bl	8007824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007830:	2b00      	cmp	r3, #0
 8007832:	d108      	bne.n	8007846 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007844:	e031      	b.n	80078aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007846:	2308      	movs	r3, #8
 8007848:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800784a:	2308      	movs	r3, #8
 800784c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	0e5b      	lsrs	r3, r3, #25
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	0f5b      	lsrs	r3, r3, #29
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	7b3a      	ldrb	r2, [r7, #12]
 8007872:	4911      	ldr	r1, [pc, #68]	; (80078b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007874:	5c8a      	ldrb	r2, [r1, r2]
 8007876:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800787a:	7b3a      	ldrb	r2, [r7, #12]
 800787c:	490f      	ldr	r1, [pc, #60]	; (80078bc <UARTEx_SetNbDataToProcess+0x98>)
 800787e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007880:	fb93 f3f2 	sdiv	r3, r3, r2
 8007884:	b29a      	uxth	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	7b7a      	ldrb	r2, [r7, #13]
 8007890:	4909      	ldr	r1, [pc, #36]	; (80078b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007892:	5c8a      	ldrb	r2, [r1, r2]
 8007894:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007898:	7b7a      	ldrb	r2, [r7, #13]
 800789a:	4908      	ldr	r1, [pc, #32]	; (80078bc <UARTEx_SetNbDataToProcess+0x98>)
 800789c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800789e:	fb93 f3f2 	sdiv	r3, r3, r2
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078aa:	bf00      	nop
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	0800c2a4 	.word	0x0800c2a4
 80078bc:	0800c2ac 	.word	0x0800c2ac

080078c0 <__errno>:
 80078c0:	4b01      	ldr	r3, [pc, #4]	; (80078c8 <__errno+0x8>)
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	2000000c 	.word	0x2000000c

080078cc <__libc_init_array>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4d0d      	ldr	r5, [pc, #52]	; (8007904 <__libc_init_array+0x38>)
 80078d0:	4c0d      	ldr	r4, [pc, #52]	; (8007908 <__libc_init_array+0x3c>)
 80078d2:	1b64      	subs	r4, r4, r5
 80078d4:	10a4      	asrs	r4, r4, #2
 80078d6:	2600      	movs	r6, #0
 80078d8:	42a6      	cmp	r6, r4
 80078da:	d109      	bne.n	80078f0 <__libc_init_array+0x24>
 80078dc:	4d0b      	ldr	r5, [pc, #44]	; (800790c <__libc_init_array+0x40>)
 80078de:	4c0c      	ldr	r4, [pc, #48]	; (8007910 <__libc_init_array+0x44>)
 80078e0:	f004 fc92 	bl	800c208 <_init>
 80078e4:	1b64      	subs	r4, r4, r5
 80078e6:	10a4      	asrs	r4, r4, #2
 80078e8:	2600      	movs	r6, #0
 80078ea:	42a6      	cmp	r6, r4
 80078ec:	d105      	bne.n	80078fa <__libc_init_array+0x2e>
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f4:	4798      	blx	r3
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7ee      	b.n	80078d8 <__libc_init_array+0xc>
 80078fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80078fe:	4798      	blx	r3
 8007900:	3601      	adds	r6, #1
 8007902:	e7f2      	b.n	80078ea <__libc_init_array+0x1e>
 8007904:	0800c764 	.word	0x0800c764
 8007908:	0800c764 	.word	0x0800c764
 800790c:	0800c764 	.word	0x0800c764
 8007910:	0800c76c 	.word	0x0800c76c

08007914 <memset>:
 8007914:	4402      	add	r2, r0
 8007916:	4603      	mov	r3, r0
 8007918:	4293      	cmp	r3, r2
 800791a:	d100      	bne.n	800791e <memset+0xa>
 800791c:	4770      	bx	lr
 800791e:	f803 1b01 	strb.w	r1, [r3], #1
 8007922:	e7f9      	b.n	8007918 <memset+0x4>

08007924 <__cvt>:
 8007924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	ec55 4b10 	vmov	r4, r5, d0
 800792c:	2d00      	cmp	r5, #0
 800792e:	460e      	mov	r6, r1
 8007930:	4619      	mov	r1, r3
 8007932:	462b      	mov	r3, r5
 8007934:	bfbb      	ittet	lt
 8007936:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800793a:	461d      	movlt	r5, r3
 800793c:	2300      	movge	r3, #0
 800793e:	232d      	movlt	r3, #45	; 0x2d
 8007940:	700b      	strb	r3, [r1, #0]
 8007942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007944:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007948:	4691      	mov	r9, r2
 800794a:	f023 0820 	bic.w	r8, r3, #32
 800794e:	bfbc      	itt	lt
 8007950:	4622      	movlt	r2, r4
 8007952:	4614      	movlt	r4, r2
 8007954:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007958:	d005      	beq.n	8007966 <__cvt+0x42>
 800795a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800795e:	d100      	bne.n	8007962 <__cvt+0x3e>
 8007960:	3601      	adds	r6, #1
 8007962:	2102      	movs	r1, #2
 8007964:	e000      	b.n	8007968 <__cvt+0x44>
 8007966:	2103      	movs	r1, #3
 8007968:	ab03      	add	r3, sp, #12
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	ab02      	add	r3, sp, #8
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	ec45 4b10 	vmov	d0, r4, r5
 8007974:	4653      	mov	r3, sl
 8007976:	4632      	mov	r2, r6
 8007978:	f001 fdae 	bl	80094d8 <_dtoa_r>
 800797c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007980:	4607      	mov	r7, r0
 8007982:	d102      	bne.n	800798a <__cvt+0x66>
 8007984:	f019 0f01 	tst.w	r9, #1
 8007988:	d022      	beq.n	80079d0 <__cvt+0xac>
 800798a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800798e:	eb07 0906 	add.w	r9, r7, r6
 8007992:	d110      	bne.n	80079b6 <__cvt+0x92>
 8007994:	783b      	ldrb	r3, [r7, #0]
 8007996:	2b30      	cmp	r3, #48	; 0x30
 8007998:	d10a      	bne.n	80079b0 <__cvt+0x8c>
 800799a:	2200      	movs	r2, #0
 800799c:	2300      	movs	r3, #0
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f9 f8b9 	bl	8000b18 <__aeabi_dcmpeq>
 80079a6:	b918      	cbnz	r0, 80079b0 <__cvt+0x8c>
 80079a8:	f1c6 0601 	rsb	r6, r6, #1
 80079ac:	f8ca 6000 	str.w	r6, [sl]
 80079b0:	f8da 3000 	ldr.w	r3, [sl]
 80079b4:	4499      	add	r9, r3
 80079b6:	2200      	movs	r2, #0
 80079b8:	2300      	movs	r3, #0
 80079ba:	4620      	mov	r0, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	f7f9 f8ab 	bl	8000b18 <__aeabi_dcmpeq>
 80079c2:	b108      	cbz	r0, 80079c8 <__cvt+0xa4>
 80079c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80079c8:	2230      	movs	r2, #48	; 0x30
 80079ca:	9b03      	ldr	r3, [sp, #12]
 80079cc:	454b      	cmp	r3, r9
 80079ce:	d307      	bcc.n	80079e0 <__cvt+0xbc>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079d4:	1bdb      	subs	r3, r3, r7
 80079d6:	4638      	mov	r0, r7
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	b004      	add	sp, #16
 80079dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e0:	1c59      	adds	r1, r3, #1
 80079e2:	9103      	str	r1, [sp, #12]
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e7f0      	b.n	80079ca <__cvt+0xa6>

080079e8 <__exponent>:
 80079e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ea:	4603      	mov	r3, r0
 80079ec:	2900      	cmp	r1, #0
 80079ee:	bfb8      	it	lt
 80079f0:	4249      	neglt	r1, r1
 80079f2:	f803 2b02 	strb.w	r2, [r3], #2
 80079f6:	bfb4      	ite	lt
 80079f8:	222d      	movlt	r2, #45	; 0x2d
 80079fa:	222b      	movge	r2, #43	; 0x2b
 80079fc:	2909      	cmp	r1, #9
 80079fe:	7042      	strb	r2, [r0, #1]
 8007a00:	dd2a      	ble.n	8007a58 <__exponent+0x70>
 8007a02:	f10d 0407 	add.w	r4, sp, #7
 8007a06:	46a4      	mov	ip, r4
 8007a08:	270a      	movs	r7, #10
 8007a0a:	46a6      	mov	lr, r4
 8007a0c:	460a      	mov	r2, r1
 8007a0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a12:	fb07 1516 	mls	r5, r7, r6, r1
 8007a16:	3530      	adds	r5, #48	; 0x30
 8007a18:	2a63      	cmp	r2, #99	; 0x63
 8007a1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a22:	4631      	mov	r1, r6
 8007a24:	dcf1      	bgt.n	8007a0a <__exponent+0x22>
 8007a26:	3130      	adds	r1, #48	; 0x30
 8007a28:	f1ae 0502 	sub.w	r5, lr, #2
 8007a2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a30:	1c44      	adds	r4, r0, #1
 8007a32:	4629      	mov	r1, r5
 8007a34:	4561      	cmp	r1, ip
 8007a36:	d30a      	bcc.n	8007a4e <__exponent+0x66>
 8007a38:	f10d 0209 	add.w	r2, sp, #9
 8007a3c:	eba2 020e 	sub.w	r2, r2, lr
 8007a40:	4565      	cmp	r5, ip
 8007a42:	bf88      	it	hi
 8007a44:	2200      	movhi	r2, #0
 8007a46:	4413      	add	r3, r2
 8007a48:	1a18      	subs	r0, r3, r0
 8007a4a:	b003      	add	sp, #12
 8007a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a56:	e7ed      	b.n	8007a34 <__exponent+0x4c>
 8007a58:	2330      	movs	r3, #48	; 0x30
 8007a5a:	3130      	adds	r1, #48	; 0x30
 8007a5c:	7083      	strb	r3, [r0, #2]
 8007a5e:	70c1      	strb	r1, [r0, #3]
 8007a60:	1d03      	adds	r3, r0, #4
 8007a62:	e7f1      	b.n	8007a48 <__exponent+0x60>

08007a64 <_printf_float>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	ed2d 8b02 	vpush	{d8}
 8007a6c:	b08d      	sub	sp, #52	; 0x34
 8007a6e:	460c      	mov	r4, r1
 8007a70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a74:	4616      	mov	r6, r2
 8007a76:	461f      	mov	r7, r3
 8007a78:	4605      	mov	r5, r0
 8007a7a:	f002 fe8b 	bl	800a794 <_localeconv_r>
 8007a7e:	f8d0 a000 	ldr.w	sl, [r0]
 8007a82:	4650      	mov	r0, sl
 8007a84:	f7f8 fbcc 	bl	8000220 <strlen>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	9305      	str	r3, [sp, #20]
 8007a90:	f8d8 3000 	ldr.w	r3, [r8]
 8007a94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a98:	3307      	adds	r3, #7
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	f103 0208 	add.w	r2, r3, #8
 8007aa2:	f8c8 2000 	str.w	r2, [r8]
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007aae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ab6:	9307      	str	r3, [sp, #28]
 8007ab8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007abc:	ee08 0a10 	vmov	s16, r0
 8007ac0:	4b9f      	ldr	r3, [pc, #636]	; (8007d40 <_printf_float+0x2dc>)
 8007ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	f7f9 f857 	bl	8000b7c <__aeabi_dcmpun>
 8007ace:	bb88      	cbnz	r0, 8007b34 <_printf_float+0xd0>
 8007ad0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ad4:	4b9a      	ldr	r3, [pc, #616]	; (8007d40 <_printf_float+0x2dc>)
 8007ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ada:	f7f9 f831 	bl	8000b40 <__aeabi_dcmple>
 8007ade:	bb48      	cbnz	r0, 8007b34 <_printf_float+0xd0>
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f9 f820 	bl	8000b2c <__aeabi_dcmplt>
 8007aec:	b110      	cbz	r0, 8007af4 <_printf_float+0x90>
 8007aee:	232d      	movs	r3, #45	; 0x2d
 8007af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007af4:	4b93      	ldr	r3, [pc, #588]	; (8007d44 <_printf_float+0x2e0>)
 8007af6:	4894      	ldr	r0, [pc, #592]	; (8007d48 <_printf_float+0x2e4>)
 8007af8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007afc:	bf94      	ite	ls
 8007afe:	4698      	movls	r8, r3
 8007b00:	4680      	movhi	r8, r0
 8007b02:	2303      	movs	r3, #3
 8007b04:	6123      	str	r3, [r4, #16]
 8007b06:	9b05      	ldr	r3, [sp, #20]
 8007b08:	f023 0204 	bic.w	r2, r3, #4
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	f04f 0900 	mov.w	r9, #0
 8007b12:	9700      	str	r7, [sp, #0]
 8007b14:	4633      	mov	r3, r6
 8007b16:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 f9d8 	bl	8007ed0 <_printf_common>
 8007b20:	3001      	adds	r0, #1
 8007b22:	f040 8090 	bne.w	8007c46 <_printf_float+0x1e2>
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2a:	b00d      	add	sp, #52	; 0x34
 8007b2c:	ecbd 8b02 	vpop	{d8}
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b34:	4642      	mov	r2, r8
 8007b36:	464b      	mov	r3, r9
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f9 f81e 	bl	8000b7c <__aeabi_dcmpun>
 8007b40:	b140      	cbz	r0, 8007b54 <_printf_float+0xf0>
 8007b42:	464b      	mov	r3, r9
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bfbc      	itt	lt
 8007b48:	232d      	movlt	r3, #45	; 0x2d
 8007b4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b4e:	487f      	ldr	r0, [pc, #508]	; (8007d4c <_printf_float+0x2e8>)
 8007b50:	4b7f      	ldr	r3, [pc, #508]	; (8007d50 <_printf_float+0x2ec>)
 8007b52:	e7d1      	b.n	8007af8 <_printf_float+0x94>
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b5a:	9206      	str	r2, [sp, #24]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	d13f      	bne.n	8007be0 <_printf_float+0x17c>
 8007b60:	2306      	movs	r3, #6
 8007b62:	6063      	str	r3, [r4, #4]
 8007b64:	9b05      	ldr	r3, [sp, #20]
 8007b66:	6861      	ldr	r1, [r4, #4]
 8007b68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	ab0a      	add	r3, sp, #40	; 0x28
 8007b72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b76:	ab09      	add	r3, sp, #36	; 0x24
 8007b78:	ec49 8b10 	vmov	d0, r8, r9
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	6022      	str	r2, [r4, #0]
 8007b80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b84:	4628      	mov	r0, r5
 8007b86:	f7ff fecd 	bl	8007924 <__cvt>
 8007b8a:	9b06      	ldr	r3, [sp, #24]
 8007b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b8e:	2b47      	cmp	r3, #71	; 0x47
 8007b90:	4680      	mov	r8, r0
 8007b92:	d108      	bne.n	8007ba6 <_printf_float+0x142>
 8007b94:	1cc8      	adds	r0, r1, #3
 8007b96:	db02      	blt.n	8007b9e <_printf_float+0x13a>
 8007b98:	6863      	ldr	r3, [r4, #4]
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	dd41      	ble.n	8007c22 <_printf_float+0x1be>
 8007b9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007ba2:	fa5f fb8b 	uxtb.w	fp, fp
 8007ba6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007baa:	d820      	bhi.n	8007bee <_printf_float+0x18a>
 8007bac:	3901      	subs	r1, #1
 8007bae:	465a      	mov	r2, fp
 8007bb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bb4:	9109      	str	r1, [sp, #36]	; 0x24
 8007bb6:	f7ff ff17 	bl	80079e8 <__exponent>
 8007bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bbc:	1813      	adds	r3, r2, r0
 8007bbe:	2a01      	cmp	r2, #1
 8007bc0:	4681      	mov	r9, r0
 8007bc2:	6123      	str	r3, [r4, #16]
 8007bc4:	dc02      	bgt.n	8007bcc <_printf_float+0x168>
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	07d2      	lsls	r2, r2, #31
 8007bca:	d501      	bpl.n	8007bd0 <_printf_float+0x16c>
 8007bcc:	3301      	adds	r3, #1
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d09c      	beq.n	8007b12 <_printf_float+0xae>
 8007bd8:	232d      	movs	r3, #45	; 0x2d
 8007bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bde:	e798      	b.n	8007b12 <_printf_float+0xae>
 8007be0:	9a06      	ldr	r2, [sp, #24]
 8007be2:	2a47      	cmp	r2, #71	; 0x47
 8007be4:	d1be      	bne.n	8007b64 <_printf_float+0x100>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1bc      	bne.n	8007b64 <_printf_float+0x100>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e7b9      	b.n	8007b62 <_printf_float+0xfe>
 8007bee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007bf2:	d118      	bne.n	8007c26 <_printf_float+0x1c2>
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	6863      	ldr	r3, [r4, #4]
 8007bf8:	dd0b      	ble.n	8007c12 <_printf_float+0x1ae>
 8007bfa:	6121      	str	r1, [r4, #16]
 8007bfc:	b913      	cbnz	r3, 8007c04 <_printf_float+0x1a0>
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	07d0      	lsls	r0, r2, #31
 8007c02:	d502      	bpl.n	8007c0a <_printf_float+0x1a6>
 8007c04:	3301      	adds	r3, #1
 8007c06:	440b      	add	r3, r1
 8007c08:	6123      	str	r3, [r4, #16]
 8007c0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c0c:	f04f 0900 	mov.w	r9, #0
 8007c10:	e7de      	b.n	8007bd0 <_printf_float+0x16c>
 8007c12:	b913      	cbnz	r3, 8007c1a <_printf_float+0x1b6>
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	07d2      	lsls	r2, r2, #31
 8007c18:	d501      	bpl.n	8007c1e <_printf_float+0x1ba>
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	e7f4      	b.n	8007c08 <_printf_float+0x1a4>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e7f2      	b.n	8007c08 <_printf_float+0x1a4>
 8007c22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	4299      	cmp	r1, r3
 8007c2a:	db05      	blt.n	8007c38 <_printf_float+0x1d4>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	6121      	str	r1, [r4, #16]
 8007c30:	07d8      	lsls	r0, r3, #31
 8007c32:	d5ea      	bpl.n	8007c0a <_printf_float+0x1a6>
 8007c34:	1c4b      	adds	r3, r1, #1
 8007c36:	e7e7      	b.n	8007c08 <_printf_float+0x1a4>
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	bfd4      	ite	le
 8007c3c:	f1c1 0202 	rsble	r2, r1, #2
 8007c40:	2201      	movgt	r2, #1
 8007c42:	4413      	add	r3, r2
 8007c44:	e7e0      	b.n	8007c08 <_printf_float+0x1a4>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	055a      	lsls	r2, r3, #21
 8007c4a:	d407      	bmi.n	8007c5c <_printf_float+0x1f8>
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	4642      	mov	r2, r8
 8007c50:	4631      	mov	r1, r6
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b8      	blx	r7
 8007c56:	3001      	adds	r0, #1
 8007c58:	d12c      	bne.n	8007cb4 <_printf_float+0x250>
 8007c5a:	e764      	b.n	8007b26 <_printf_float+0xc2>
 8007c5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c60:	f240 80e0 	bls.w	8007e24 <_printf_float+0x3c0>
 8007c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f7f8 ff54 	bl	8000b18 <__aeabi_dcmpeq>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d034      	beq.n	8007cde <_printf_float+0x27a>
 8007c74:	4a37      	ldr	r2, [pc, #220]	; (8007d54 <_printf_float+0x2f0>)
 8007c76:	2301      	movs	r3, #1
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f af51 	beq.w	8007b26 <_printf_float+0xc2>
 8007c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	db02      	blt.n	8007c92 <_printf_float+0x22e>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	07d8      	lsls	r0, r3, #31
 8007c90:	d510      	bpl.n	8007cb4 <_printf_float+0x250>
 8007c92:	ee18 3a10 	vmov	r3, s16
 8007c96:	4652      	mov	r2, sl
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f af41 	beq.w	8007b26 <_printf_float+0xc2>
 8007ca4:	f04f 0800 	mov.w	r8, #0
 8007ca8:	f104 091a 	add.w	r9, r4, #26
 8007cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	4543      	cmp	r3, r8
 8007cb2:	dc09      	bgt.n	8007cc8 <_printf_float+0x264>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	079b      	lsls	r3, r3, #30
 8007cb8:	f100 8105 	bmi.w	8007ec6 <_printf_float+0x462>
 8007cbc:	68e0      	ldr	r0, [r4, #12]
 8007cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cc0:	4298      	cmp	r0, r3
 8007cc2:	bfb8      	it	lt
 8007cc4:	4618      	movlt	r0, r3
 8007cc6:	e730      	b.n	8007b2a <_printf_float+0xc6>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	464a      	mov	r2, r9
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b8      	blx	r7
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	f43f af27 	beq.w	8007b26 <_printf_float+0xc2>
 8007cd8:	f108 0801 	add.w	r8, r8, #1
 8007cdc:	e7e6      	b.n	8007cac <_printf_float+0x248>
 8007cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dc39      	bgt.n	8007d58 <_printf_float+0x2f4>
 8007ce4:	4a1b      	ldr	r2, [pc, #108]	; (8007d54 <_printf_float+0x2f0>)
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b8      	blx	r7
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f43f af19 	beq.w	8007b26 <_printf_float+0xc2>
 8007cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	d102      	bne.n	8007d02 <_printf_float+0x29e>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	07d9      	lsls	r1, r3, #31
 8007d00:	d5d8      	bpl.n	8007cb4 <_printf_float+0x250>
 8007d02:	ee18 3a10 	vmov	r3, s16
 8007d06:	4652      	mov	r2, sl
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af09 	beq.w	8007b26 <_printf_float+0xc2>
 8007d14:	f04f 0900 	mov.w	r9, #0
 8007d18:	f104 0a1a 	add.w	sl, r4, #26
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	425b      	negs	r3, r3
 8007d20:	454b      	cmp	r3, r9
 8007d22:	dc01      	bgt.n	8007d28 <_printf_float+0x2c4>
 8007d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d26:	e792      	b.n	8007c4e <_printf_float+0x1ea>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b8      	blx	r7
 8007d32:	3001      	adds	r0, #1
 8007d34:	f43f aef7 	beq.w	8007b26 <_printf_float+0xc2>
 8007d38:	f109 0901 	add.w	r9, r9, #1
 8007d3c:	e7ee      	b.n	8007d1c <_printf_float+0x2b8>
 8007d3e:	bf00      	nop
 8007d40:	7fefffff 	.word	0x7fefffff
 8007d44:	0800c2b8 	.word	0x0800c2b8
 8007d48:	0800c2bc 	.word	0x0800c2bc
 8007d4c:	0800c2c4 	.word	0x0800c2c4
 8007d50:	0800c2c0 	.word	0x0800c2c0
 8007d54:	0800c2c8 	.word	0x0800c2c8
 8007d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	bfa8      	it	ge
 8007d60:	461a      	movge	r2, r3
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	4691      	mov	r9, r2
 8007d66:	dc37      	bgt.n	8007dd8 <_printf_float+0x374>
 8007d68:	f04f 0b00 	mov.w	fp, #0
 8007d6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d70:	f104 021a 	add.w	r2, r4, #26
 8007d74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d76:	9305      	str	r3, [sp, #20]
 8007d78:	eba3 0309 	sub.w	r3, r3, r9
 8007d7c:	455b      	cmp	r3, fp
 8007d7e:	dc33      	bgt.n	8007de8 <_printf_float+0x384>
 8007d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d84:	429a      	cmp	r2, r3
 8007d86:	db3b      	blt.n	8007e00 <_printf_float+0x39c>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	07da      	lsls	r2, r3, #31
 8007d8c:	d438      	bmi.n	8007e00 <_printf_float+0x39c>
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	9a05      	ldr	r2, [sp, #20]
 8007d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d94:	1a9a      	subs	r2, r3, r2
 8007d96:	eba3 0901 	sub.w	r9, r3, r1
 8007d9a:	4591      	cmp	r9, r2
 8007d9c:	bfa8      	it	ge
 8007d9e:	4691      	movge	r9, r2
 8007da0:	f1b9 0f00 	cmp.w	r9, #0
 8007da4:	dc35      	bgt.n	8007e12 <_printf_float+0x3ae>
 8007da6:	f04f 0800 	mov.w	r8, #0
 8007daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dae:	f104 0a1a 	add.w	sl, r4, #26
 8007db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	eba3 0309 	sub.w	r3, r3, r9
 8007dbc:	4543      	cmp	r3, r8
 8007dbe:	f77f af79 	ble.w	8007cb4 <_printf_float+0x250>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b8      	blx	r7
 8007dcc:	3001      	adds	r0, #1
 8007dce:	f43f aeaa 	beq.w	8007b26 <_printf_float+0xc2>
 8007dd2:	f108 0801 	add.w	r8, r8, #1
 8007dd6:	e7ec      	b.n	8007db2 <_printf_float+0x34e>
 8007dd8:	4613      	mov	r3, r2
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4642      	mov	r2, r8
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	d1c0      	bne.n	8007d68 <_printf_float+0x304>
 8007de6:	e69e      	b.n	8007b26 <_printf_float+0xc2>
 8007de8:	2301      	movs	r3, #1
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	9205      	str	r2, [sp, #20]
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	f43f ae97 	beq.w	8007b26 <_printf_float+0xc2>
 8007df8:	9a05      	ldr	r2, [sp, #20]
 8007dfa:	f10b 0b01 	add.w	fp, fp, #1
 8007dfe:	e7b9      	b.n	8007d74 <_printf_float+0x310>
 8007e00:	ee18 3a10 	vmov	r3, s16
 8007e04:	4652      	mov	r2, sl
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d1be      	bne.n	8007d8e <_printf_float+0x32a>
 8007e10:	e689      	b.n	8007b26 <_printf_float+0xc2>
 8007e12:	9a05      	ldr	r2, [sp, #20]
 8007e14:	464b      	mov	r3, r9
 8007e16:	4442      	add	r2, r8
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d1c1      	bne.n	8007da6 <_printf_float+0x342>
 8007e22:	e680      	b.n	8007b26 <_printf_float+0xc2>
 8007e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e26:	2a01      	cmp	r2, #1
 8007e28:	dc01      	bgt.n	8007e2e <_printf_float+0x3ca>
 8007e2a:	07db      	lsls	r3, r3, #31
 8007e2c:	d538      	bpl.n	8007ea0 <_printf_float+0x43c>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4642      	mov	r2, r8
 8007e32:	4631      	mov	r1, r6
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b8      	blx	r7
 8007e38:	3001      	adds	r0, #1
 8007e3a:	f43f ae74 	beq.w	8007b26 <_printf_float+0xc2>
 8007e3e:	ee18 3a10 	vmov	r3, s16
 8007e42:	4652      	mov	r2, sl
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f ae6b 	beq.w	8007b26 <_printf_float+0xc2>
 8007e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e54:	2200      	movs	r2, #0
 8007e56:	2300      	movs	r3, #0
 8007e58:	f7f8 fe5e 	bl	8000b18 <__aeabi_dcmpeq>
 8007e5c:	b9d8      	cbnz	r0, 8007e96 <_printf_float+0x432>
 8007e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e60:	f108 0201 	add.w	r2, r8, #1
 8007e64:	3b01      	subs	r3, #1
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d10e      	bne.n	8007e8e <_printf_float+0x42a>
 8007e70:	e659      	b.n	8007b26 <_printf_float+0xc2>
 8007e72:	2301      	movs	r3, #1
 8007e74:	4652      	mov	r2, sl
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b8      	blx	r7
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f43f ae52 	beq.w	8007b26 <_printf_float+0xc2>
 8007e82:	f108 0801 	add.w	r8, r8, #1
 8007e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	4543      	cmp	r3, r8
 8007e8c:	dcf1      	bgt.n	8007e72 <_printf_float+0x40e>
 8007e8e:	464b      	mov	r3, r9
 8007e90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e94:	e6dc      	b.n	8007c50 <_printf_float+0x1ec>
 8007e96:	f04f 0800 	mov.w	r8, #0
 8007e9a:	f104 0a1a 	add.w	sl, r4, #26
 8007e9e:	e7f2      	b.n	8007e86 <_printf_float+0x422>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	e7df      	b.n	8007e66 <_printf_float+0x402>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	464a      	mov	r2, r9
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b8      	blx	r7
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	f43f ae38 	beq.w	8007b26 <_printf_float+0xc2>
 8007eb6:	f108 0801 	add.w	r8, r8, #1
 8007eba:	68e3      	ldr	r3, [r4, #12]
 8007ebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ebe:	1a5b      	subs	r3, r3, r1
 8007ec0:	4543      	cmp	r3, r8
 8007ec2:	dcf0      	bgt.n	8007ea6 <_printf_float+0x442>
 8007ec4:	e6fa      	b.n	8007cbc <_printf_float+0x258>
 8007ec6:	f04f 0800 	mov.w	r8, #0
 8007eca:	f104 0919 	add.w	r9, r4, #25
 8007ece:	e7f4      	b.n	8007eba <_printf_float+0x456>

08007ed0 <_printf_common>:
 8007ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	4616      	mov	r6, r2
 8007ed6:	4699      	mov	r9, r3
 8007ed8:	688a      	ldr	r2, [r1, #8]
 8007eda:	690b      	ldr	r3, [r1, #16]
 8007edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	bfb8      	it	lt
 8007ee4:	4613      	movlt	r3, r2
 8007ee6:	6033      	str	r3, [r6, #0]
 8007ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007eec:	4607      	mov	r7, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b10a      	cbz	r2, 8007ef6 <_printf_common+0x26>
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	0699      	lsls	r1, r3, #26
 8007efa:	bf42      	ittt	mi
 8007efc:	6833      	ldrmi	r3, [r6, #0]
 8007efe:	3302      	addmi	r3, #2
 8007f00:	6033      	strmi	r3, [r6, #0]
 8007f02:	6825      	ldr	r5, [r4, #0]
 8007f04:	f015 0506 	ands.w	r5, r5, #6
 8007f08:	d106      	bne.n	8007f18 <_printf_common+0x48>
 8007f0a:	f104 0a19 	add.w	sl, r4, #25
 8007f0e:	68e3      	ldr	r3, [r4, #12]
 8007f10:	6832      	ldr	r2, [r6, #0]
 8007f12:	1a9b      	subs	r3, r3, r2
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	dc26      	bgt.n	8007f66 <_printf_common+0x96>
 8007f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f1c:	1e13      	subs	r3, r2, #0
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	bf18      	it	ne
 8007f22:	2301      	movne	r3, #1
 8007f24:	0692      	lsls	r2, r2, #26
 8007f26:	d42b      	bmi.n	8007f80 <_printf_common+0xb0>
 8007f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	4638      	mov	r0, r7
 8007f30:	47c0      	blx	r8
 8007f32:	3001      	adds	r0, #1
 8007f34:	d01e      	beq.n	8007f74 <_printf_common+0xa4>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	68e5      	ldr	r5, [r4, #12]
 8007f3a:	6832      	ldr	r2, [r6, #0]
 8007f3c:	f003 0306 	and.w	r3, r3, #6
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	bf08      	it	eq
 8007f44:	1aad      	subeq	r5, r5, r2
 8007f46:	68a3      	ldr	r3, [r4, #8]
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	bf0c      	ite	eq
 8007f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f50:	2500      	movne	r5, #0
 8007f52:	4293      	cmp	r3, r2
 8007f54:	bfc4      	itt	gt
 8007f56:	1a9b      	subgt	r3, r3, r2
 8007f58:	18ed      	addgt	r5, r5, r3
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	341a      	adds	r4, #26
 8007f5e:	42b5      	cmp	r5, r6
 8007f60:	d11a      	bne.n	8007f98 <_printf_common+0xc8>
 8007f62:	2000      	movs	r0, #0
 8007f64:	e008      	b.n	8007f78 <_printf_common+0xa8>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4652      	mov	r2, sl
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	47c0      	blx	r8
 8007f70:	3001      	adds	r0, #1
 8007f72:	d103      	bne.n	8007f7c <_printf_common+0xac>
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	e7c6      	b.n	8007f0e <_printf_common+0x3e>
 8007f80:	18e1      	adds	r1, r4, r3
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	2030      	movs	r0, #48	; 0x30
 8007f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f8a:	4422      	add	r2, r4
 8007f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f94:	3302      	adds	r3, #2
 8007f96:	e7c7      	b.n	8007f28 <_printf_common+0x58>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	47c0      	blx	r8
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d0e6      	beq.n	8007f74 <_printf_common+0xa4>
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7d9      	b.n	8007f5e <_printf_common+0x8e>
	...

08007fac <_printf_i>:
 8007fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	7e0f      	ldrb	r7, [r1, #24]
 8007fb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fb4:	2f78      	cmp	r7, #120	; 0x78
 8007fb6:	4691      	mov	r9, r2
 8007fb8:	4680      	mov	r8, r0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fc2:	d807      	bhi.n	8007fd4 <_printf_i+0x28>
 8007fc4:	2f62      	cmp	r7, #98	; 0x62
 8007fc6:	d80a      	bhi.n	8007fde <_printf_i+0x32>
 8007fc8:	2f00      	cmp	r7, #0
 8007fca:	f000 80d8 	beq.w	800817e <_printf_i+0x1d2>
 8007fce:	2f58      	cmp	r7, #88	; 0x58
 8007fd0:	f000 80a3 	beq.w	800811a <_printf_i+0x16e>
 8007fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fdc:	e03a      	b.n	8008054 <_printf_i+0xa8>
 8007fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fe2:	2b15      	cmp	r3, #21
 8007fe4:	d8f6      	bhi.n	8007fd4 <_printf_i+0x28>
 8007fe6:	a101      	add	r1, pc, #4	; (adr r1, 8007fec <_printf_i+0x40>)
 8007fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fec:	08008045 	.word	0x08008045
 8007ff0:	08008059 	.word	0x08008059
 8007ff4:	08007fd5 	.word	0x08007fd5
 8007ff8:	08007fd5 	.word	0x08007fd5
 8007ffc:	08007fd5 	.word	0x08007fd5
 8008000:	08007fd5 	.word	0x08007fd5
 8008004:	08008059 	.word	0x08008059
 8008008:	08007fd5 	.word	0x08007fd5
 800800c:	08007fd5 	.word	0x08007fd5
 8008010:	08007fd5 	.word	0x08007fd5
 8008014:	08007fd5 	.word	0x08007fd5
 8008018:	08008165 	.word	0x08008165
 800801c:	08008089 	.word	0x08008089
 8008020:	08008147 	.word	0x08008147
 8008024:	08007fd5 	.word	0x08007fd5
 8008028:	08007fd5 	.word	0x08007fd5
 800802c:	08008187 	.word	0x08008187
 8008030:	08007fd5 	.word	0x08007fd5
 8008034:	08008089 	.word	0x08008089
 8008038:	08007fd5 	.word	0x08007fd5
 800803c:	08007fd5 	.word	0x08007fd5
 8008040:	0800814f 	.word	0x0800814f
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	1d1a      	adds	r2, r3, #4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	602a      	str	r2, [r5, #0]
 800804c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008054:	2301      	movs	r3, #1
 8008056:	e0a3      	b.n	80081a0 <_printf_i+0x1f4>
 8008058:	6820      	ldr	r0, [r4, #0]
 800805a:	6829      	ldr	r1, [r5, #0]
 800805c:	0606      	lsls	r6, r0, #24
 800805e:	f101 0304 	add.w	r3, r1, #4
 8008062:	d50a      	bpl.n	800807a <_printf_i+0xce>
 8008064:	680e      	ldr	r6, [r1, #0]
 8008066:	602b      	str	r3, [r5, #0]
 8008068:	2e00      	cmp	r6, #0
 800806a:	da03      	bge.n	8008074 <_printf_i+0xc8>
 800806c:	232d      	movs	r3, #45	; 0x2d
 800806e:	4276      	negs	r6, r6
 8008070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008074:	485e      	ldr	r0, [pc, #376]	; (80081f0 <_printf_i+0x244>)
 8008076:	230a      	movs	r3, #10
 8008078:	e019      	b.n	80080ae <_printf_i+0x102>
 800807a:	680e      	ldr	r6, [r1, #0]
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008082:	bf18      	it	ne
 8008084:	b236      	sxthne	r6, r6
 8008086:	e7ef      	b.n	8008068 <_printf_i+0xbc>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	6820      	ldr	r0, [r4, #0]
 800808c:	1d19      	adds	r1, r3, #4
 800808e:	6029      	str	r1, [r5, #0]
 8008090:	0601      	lsls	r1, r0, #24
 8008092:	d501      	bpl.n	8008098 <_printf_i+0xec>
 8008094:	681e      	ldr	r6, [r3, #0]
 8008096:	e002      	b.n	800809e <_printf_i+0xf2>
 8008098:	0646      	lsls	r6, r0, #25
 800809a:	d5fb      	bpl.n	8008094 <_printf_i+0xe8>
 800809c:	881e      	ldrh	r6, [r3, #0]
 800809e:	4854      	ldr	r0, [pc, #336]	; (80081f0 <_printf_i+0x244>)
 80080a0:	2f6f      	cmp	r7, #111	; 0x6f
 80080a2:	bf0c      	ite	eq
 80080a4:	2308      	moveq	r3, #8
 80080a6:	230a      	movne	r3, #10
 80080a8:	2100      	movs	r1, #0
 80080aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080ae:	6865      	ldr	r5, [r4, #4]
 80080b0:	60a5      	str	r5, [r4, #8]
 80080b2:	2d00      	cmp	r5, #0
 80080b4:	bfa2      	ittt	ge
 80080b6:	6821      	ldrge	r1, [r4, #0]
 80080b8:	f021 0104 	bicge.w	r1, r1, #4
 80080bc:	6021      	strge	r1, [r4, #0]
 80080be:	b90e      	cbnz	r6, 80080c4 <_printf_i+0x118>
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	d04d      	beq.n	8008160 <_printf_i+0x1b4>
 80080c4:	4615      	mov	r5, r2
 80080c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ca:	fb03 6711 	mls	r7, r3, r1, r6
 80080ce:	5dc7      	ldrb	r7, [r0, r7]
 80080d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080d4:	4637      	mov	r7, r6
 80080d6:	42bb      	cmp	r3, r7
 80080d8:	460e      	mov	r6, r1
 80080da:	d9f4      	bls.n	80080c6 <_printf_i+0x11a>
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d10b      	bne.n	80080f8 <_printf_i+0x14c>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	07de      	lsls	r6, r3, #31
 80080e4:	d508      	bpl.n	80080f8 <_printf_i+0x14c>
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	6861      	ldr	r1, [r4, #4]
 80080ea:	4299      	cmp	r1, r3
 80080ec:	bfde      	ittt	le
 80080ee:	2330      	movle	r3, #48	; 0x30
 80080f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080f8:	1b52      	subs	r2, r2, r5
 80080fa:	6122      	str	r2, [r4, #16]
 80080fc:	f8cd a000 	str.w	sl, [sp]
 8008100:	464b      	mov	r3, r9
 8008102:	aa03      	add	r2, sp, #12
 8008104:	4621      	mov	r1, r4
 8008106:	4640      	mov	r0, r8
 8008108:	f7ff fee2 	bl	8007ed0 <_printf_common>
 800810c:	3001      	adds	r0, #1
 800810e:	d14c      	bne.n	80081aa <_printf_i+0x1fe>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	b004      	add	sp, #16
 8008116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811a:	4835      	ldr	r0, [pc, #212]	; (80081f0 <_printf_i+0x244>)
 800811c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008120:	6829      	ldr	r1, [r5, #0]
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	f851 6b04 	ldr.w	r6, [r1], #4
 8008128:	6029      	str	r1, [r5, #0]
 800812a:	061d      	lsls	r5, r3, #24
 800812c:	d514      	bpl.n	8008158 <_printf_i+0x1ac>
 800812e:	07df      	lsls	r7, r3, #31
 8008130:	bf44      	itt	mi
 8008132:	f043 0320 	orrmi.w	r3, r3, #32
 8008136:	6023      	strmi	r3, [r4, #0]
 8008138:	b91e      	cbnz	r6, 8008142 <_printf_i+0x196>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	f023 0320 	bic.w	r3, r3, #32
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	2310      	movs	r3, #16
 8008144:	e7b0      	b.n	80080a8 <_printf_i+0xfc>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	f043 0320 	orr.w	r3, r3, #32
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	2378      	movs	r3, #120	; 0x78
 8008150:	4828      	ldr	r0, [pc, #160]	; (80081f4 <_printf_i+0x248>)
 8008152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008156:	e7e3      	b.n	8008120 <_printf_i+0x174>
 8008158:	0659      	lsls	r1, r3, #25
 800815a:	bf48      	it	mi
 800815c:	b2b6      	uxthmi	r6, r6
 800815e:	e7e6      	b.n	800812e <_printf_i+0x182>
 8008160:	4615      	mov	r5, r2
 8008162:	e7bb      	b.n	80080dc <_printf_i+0x130>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	6826      	ldr	r6, [r4, #0]
 8008168:	6961      	ldr	r1, [r4, #20]
 800816a:	1d18      	adds	r0, r3, #4
 800816c:	6028      	str	r0, [r5, #0]
 800816e:	0635      	lsls	r5, r6, #24
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	d501      	bpl.n	8008178 <_printf_i+0x1cc>
 8008174:	6019      	str	r1, [r3, #0]
 8008176:	e002      	b.n	800817e <_printf_i+0x1d2>
 8008178:	0670      	lsls	r0, r6, #25
 800817a:	d5fb      	bpl.n	8008174 <_printf_i+0x1c8>
 800817c:	8019      	strh	r1, [r3, #0]
 800817e:	2300      	movs	r3, #0
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	4615      	mov	r5, r2
 8008184:	e7ba      	b.n	80080fc <_printf_i+0x150>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	1d1a      	adds	r2, r3, #4
 800818a:	602a      	str	r2, [r5, #0]
 800818c:	681d      	ldr	r5, [r3, #0]
 800818e:	6862      	ldr	r2, [r4, #4]
 8008190:	2100      	movs	r1, #0
 8008192:	4628      	mov	r0, r5
 8008194:	f7f8 f84c 	bl	8000230 <memchr>
 8008198:	b108      	cbz	r0, 800819e <_printf_i+0x1f2>
 800819a:	1b40      	subs	r0, r0, r5
 800819c:	6060      	str	r0, [r4, #4]
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	6123      	str	r3, [r4, #16]
 80081a2:	2300      	movs	r3, #0
 80081a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a8:	e7a8      	b.n	80080fc <_printf_i+0x150>
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	462a      	mov	r2, r5
 80081ae:	4649      	mov	r1, r9
 80081b0:	4640      	mov	r0, r8
 80081b2:	47d0      	blx	sl
 80081b4:	3001      	adds	r0, #1
 80081b6:	d0ab      	beq.n	8008110 <_printf_i+0x164>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	079b      	lsls	r3, r3, #30
 80081bc:	d413      	bmi.n	80081e6 <_printf_i+0x23a>
 80081be:	68e0      	ldr	r0, [r4, #12]
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	4298      	cmp	r0, r3
 80081c4:	bfb8      	it	lt
 80081c6:	4618      	movlt	r0, r3
 80081c8:	e7a4      	b.n	8008114 <_printf_i+0x168>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4632      	mov	r2, r6
 80081ce:	4649      	mov	r1, r9
 80081d0:	4640      	mov	r0, r8
 80081d2:	47d0      	blx	sl
 80081d4:	3001      	adds	r0, #1
 80081d6:	d09b      	beq.n	8008110 <_printf_i+0x164>
 80081d8:	3501      	adds	r5, #1
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	9903      	ldr	r1, [sp, #12]
 80081de:	1a5b      	subs	r3, r3, r1
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	dcf2      	bgt.n	80081ca <_printf_i+0x21e>
 80081e4:	e7eb      	b.n	80081be <_printf_i+0x212>
 80081e6:	2500      	movs	r5, #0
 80081e8:	f104 0619 	add.w	r6, r4, #25
 80081ec:	e7f5      	b.n	80081da <_printf_i+0x22e>
 80081ee:	bf00      	nop
 80081f0:	0800c2ca 	.word	0x0800c2ca
 80081f4:	0800c2db 	.word	0x0800c2db

080081f8 <_scanf_float>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	b087      	sub	sp, #28
 80081fe:	4617      	mov	r7, r2
 8008200:	9303      	str	r3, [sp, #12]
 8008202:	688b      	ldr	r3, [r1, #8]
 8008204:	1e5a      	subs	r2, r3, #1
 8008206:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800820a:	bf83      	ittte	hi
 800820c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008210:	195b      	addhi	r3, r3, r5
 8008212:	9302      	strhi	r3, [sp, #8]
 8008214:	2300      	movls	r3, #0
 8008216:	bf86      	itte	hi
 8008218:	f240 135d 	movwhi	r3, #349	; 0x15d
 800821c:	608b      	strhi	r3, [r1, #8]
 800821e:	9302      	strls	r3, [sp, #8]
 8008220:	680b      	ldr	r3, [r1, #0]
 8008222:	468b      	mov	fp, r1
 8008224:	2500      	movs	r5, #0
 8008226:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800822a:	f84b 3b1c 	str.w	r3, [fp], #28
 800822e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008232:	4680      	mov	r8, r0
 8008234:	460c      	mov	r4, r1
 8008236:	465e      	mov	r6, fp
 8008238:	46aa      	mov	sl, r5
 800823a:	46a9      	mov	r9, r5
 800823c:	9501      	str	r5, [sp, #4]
 800823e:	68a2      	ldr	r2, [r4, #8]
 8008240:	b152      	cbz	r2, 8008258 <_scanf_float+0x60>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b4e      	cmp	r3, #78	; 0x4e
 8008248:	d864      	bhi.n	8008314 <_scanf_float+0x11c>
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d83c      	bhi.n	80082c8 <_scanf_float+0xd0>
 800824e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008252:	b2c8      	uxtb	r0, r1
 8008254:	280e      	cmp	r0, #14
 8008256:	d93a      	bls.n	80082ce <_scanf_float+0xd6>
 8008258:	f1b9 0f00 	cmp.w	r9, #0
 800825c:	d003      	beq.n	8008266 <_scanf_float+0x6e>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800826a:	f1ba 0f01 	cmp.w	sl, #1
 800826e:	f200 8113 	bhi.w	8008498 <_scanf_float+0x2a0>
 8008272:	455e      	cmp	r6, fp
 8008274:	f200 8105 	bhi.w	8008482 <_scanf_float+0x28a>
 8008278:	2501      	movs	r5, #1
 800827a:	4628      	mov	r0, r5
 800827c:	b007      	add	sp, #28
 800827e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008282:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008286:	2a0d      	cmp	r2, #13
 8008288:	d8e6      	bhi.n	8008258 <_scanf_float+0x60>
 800828a:	a101      	add	r1, pc, #4	; (adr r1, 8008290 <_scanf_float+0x98>)
 800828c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008290:	080083cf 	.word	0x080083cf
 8008294:	08008259 	.word	0x08008259
 8008298:	08008259 	.word	0x08008259
 800829c:	08008259 	.word	0x08008259
 80082a0:	0800842f 	.word	0x0800842f
 80082a4:	08008407 	.word	0x08008407
 80082a8:	08008259 	.word	0x08008259
 80082ac:	08008259 	.word	0x08008259
 80082b0:	080083dd 	.word	0x080083dd
 80082b4:	08008259 	.word	0x08008259
 80082b8:	08008259 	.word	0x08008259
 80082bc:	08008259 	.word	0x08008259
 80082c0:	08008259 	.word	0x08008259
 80082c4:	08008395 	.word	0x08008395
 80082c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80082cc:	e7db      	b.n	8008286 <_scanf_float+0x8e>
 80082ce:	290e      	cmp	r1, #14
 80082d0:	d8c2      	bhi.n	8008258 <_scanf_float+0x60>
 80082d2:	a001      	add	r0, pc, #4	; (adr r0, 80082d8 <_scanf_float+0xe0>)
 80082d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082d8:	08008387 	.word	0x08008387
 80082dc:	08008259 	.word	0x08008259
 80082e0:	08008387 	.word	0x08008387
 80082e4:	0800841b 	.word	0x0800841b
 80082e8:	08008259 	.word	0x08008259
 80082ec:	08008335 	.word	0x08008335
 80082f0:	08008371 	.word	0x08008371
 80082f4:	08008371 	.word	0x08008371
 80082f8:	08008371 	.word	0x08008371
 80082fc:	08008371 	.word	0x08008371
 8008300:	08008371 	.word	0x08008371
 8008304:	08008371 	.word	0x08008371
 8008308:	08008371 	.word	0x08008371
 800830c:	08008371 	.word	0x08008371
 8008310:	08008371 	.word	0x08008371
 8008314:	2b6e      	cmp	r3, #110	; 0x6e
 8008316:	d809      	bhi.n	800832c <_scanf_float+0x134>
 8008318:	2b60      	cmp	r3, #96	; 0x60
 800831a:	d8b2      	bhi.n	8008282 <_scanf_float+0x8a>
 800831c:	2b54      	cmp	r3, #84	; 0x54
 800831e:	d077      	beq.n	8008410 <_scanf_float+0x218>
 8008320:	2b59      	cmp	r3, #89	; 0x59
 8008322:	d199      	bne.n	8008258 <_scanf_float+0x60>
 8008324:	2d07      	cmp	r5, #7
 8008326:	d197      	bne.n	8008258 <_scanf_float+0x60>
 8008328:	2508      	movs	r5, #8
 800832a:	e029      	b.n	8008380 <_scanf_float+0x188>
 800832c:	2b74      	cmp	r3, #116	; 0x74
 800832e:	d06f      	beq.n	8008410 <_scanf_float+0x218>
 8008330:	2b79      	cmp	r3, #121	; 0x79
 8008332:	e7f6      	b.n	8008322 <_scanf_float+0x12a>
 8008334:	6821      	ldr	r1, [r4, #0]
 8008336:	05c8      	lsls	r0, r1, #23
 8008338:	d51a      	bpl.n	8008370 <_scanf_float+0x178>
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008340:	6021      	str	r1, [r4, #0]
 8008342:	f109 0901 	add.w	r9, r9, #1
 8008346:	b11b      	cbz	r3, 8008350 <_scanf_float+0x158>
 8008348:	3b01      	subs	r3, #1
 800834a:	3201      	adds	r2, #1
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	60a2      	str	r2, [r4, #8]
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	3b01      	subs	r3, #1
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	3301      	adds	r3, #1
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3b01      	subs	r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	607b      	str	r3, [r7, #4]
 8008364:	f340 8084 	ble.w	8008470 <_scanf_float+0x278>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	3301      	adds	r3, #1
 800836c:	603b      	str	r3, [r7, #0]
 800836e:	e766      	b.n	800823e <_scanf_float+0x46>
 8008370:	eb1a 0f05 	cmn.w	sl, r5
 8008374:	f47f af70 	bne.w	8008258 <_scanf_float+0x60>
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	f806 3b01 	strb.w	r3, [r6], #1
 8008384:	e7e4      	b.n	8008350 <_scanf_float+0x158>
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	0610      	lsls	r0, r2, #24
 800838a:	f57f af65 	bpl.w	8008258 <_scanf_float+0x60>
 800838e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008392:	e7f4      	b.n	800837e <_scanf_float+0x186>
 8008394:	f1ba 0f00 	cmp.w	sl, #0
 8008398:	d10e      	bne.n	80083b8 <_scanf_float+0x1c0>
 800839a:	f1b9 0f00 	cmp.w	r9, #0
 800839e:	d10e      	bne.n	80083be <_scanf_float+0x1c6>
 80083a0:	6822      	ldr	r2, [r4, #0]
 80083a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80083a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80083aa:	d108      	bne.n	80083be <_scanf_float+0x1c6>
 80083ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083b0:	6022      	str	r2, [r4, #0]
 80083b2:	f04f 0a01 	mov.w	sl, #1
 80083b6:	e7e3      	b.n	8008380 <_scanf_float+0x188>
 80083b8:	f1ba 0f02 	cmp.w	sl, #2
 80083bc:	d055      	beq.n	800846a <_scanf_float+0x272>
 80083be:	2d01      	cmp	r5, #1
 80083c0:	d002      	beq.n	80083c8 <_scanf_float+0x1d0>
 80083c2:	2d04      	cmp	r5, #4
 80083c4:	f47f af48 	bne.w	8008258 <_scanf_float+0x60>
 80083c8:	3501      	adds	r5, #1
 80083ca:	b2ed      	uxtb	r5, r5
 80083cc:	e7d8      	b.n	8008380 <_scanf_float+0x188>
 80083ce:	f1ba 0f01 	cmp.w	sl, #1
 80083d2:	f47f af41 	bne.w	8008258 <_scanf_float+0x60>
 80083d6:	f04f 0a02 	mov.w	sl, #2
 80083da:	e7d1      	b.n	8008380 <_scanf_float+0x188>
 80083dc:	b97d      	cbnz	r5, 80083fe <_scanf_float+0x206>
 80083de:	f1b9 0f00 	cmp.w	r9, #0
 80083e2:	f47f af3c 	bne.w	800825e <_scanf_float+0x66>
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80083ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80083f0:	f47f af39 	bne.w	8008266 <_scanf_float+0x6e>
 80083f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083f8:	6022      	str	r2, [r4, #0]
 80083fa:	2501      	movs	r5, #1
 80083fc:	e7c0      	b.n	8008380 <_scanf_float+0x188>
 80083fe:	2d03      	cmp	r5, #3
 8008400:	d0e2      	beq.n	80083c8 <_scanf_float+0x1d0>
 8008402:	2d05      	cmp	r5, #5
 8008404:	e7de      	b.n	80083c4 <_scanf_float+0x1cc>
 8008406:	2d02      	cmp	r5, #2
 8008408:	f47f af26 	bne.w	8008258 <_scanf_float+0x60>
 800840c:	2503      	movs	r5, #3
 800840e:	e7b7      	b.n	8008380 <_scanf_float+0x188>
 8008410:	2d06      	cmp	r5, #6
 8008412:	f47f af21 	bne.w	8008258 <_scanf_float+0x60>
 8008416:	2507      	movs	r5, #7
 8008418:	e7b2      	b.n	8008380 <_scanf_float+0x188>
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	0591      	lsls	r1, r2, #22
 800841e:	f57f af1b 	bpl.w	8008258 <_scanf_float+0x60>
 8008422:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008426:	6022      	str	r2, [r4, #0]
 8008428:	f8cd 9004 	str.w	r9, [sp, #4]
 800842c:	e7a8      	b.n	8008380 <_scanf_float+0x188>
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008434:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008438:	d006      	beq.n	8008448 <_scanf_float+0x250>
 800843a:	0550      	lsls	r0, r2, #21
 800843c:	f57f af0c 	bpl.w	8008258 <_scanf_float+0x60>
 8008440:	f1b9 0f00 	cmp.w	r9, #0
 8008444:	f43f af0f 	beq.w	8008266 <_scanf_float+0x6e>
 8008448:	0591      	lsls	r1, r2, #22
 800844a:	bf58      	it	pl
 800844c:	9901      	ldrpl	r1, [sp, #4]
 800844e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008452:	bf58      	it	pl
 8008454:	eba9 0101 	subpl.w	r1, r9, r1
 8008458:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800845c:	bf58      	it	pl
 800845e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008462:	6022      	str	r2, [r4, #0]
 8008464:	f04f 0900 	mov.w	r9, #0
 8008468:	e78a      	b.n	8008380 <_scanf_float+0x188>
 800846a:	f04f 0a03 	mov.w	sl, #3
 800846e:	e787      	b.n	8008380 <_scanf_float+0x188>
 8008470:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008474:	4639      	mov	r1, r7
 8008476:	4640      	mov	r0, r8
 8008478:	4798      	blx	r3
 800847a:	2800      	cmp	r0, #0
 800847c:	f43f aedf 	beq.w	800823e <_scanf_float+0x46>
 8008480:	e6ea      	b.n	8008258 <_scanf_float+0x60>
 8008482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800848a:	463a      	mov	r2, r7
 800848c:	4640      	mov	r0, r8
 800848e:	4798      	blx	r3
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	3b01      	subs	r3, #1
 8008494:	6123      	str	r3, [r4, #16]
 8008496:	e6ec      	b.n	8008272 <_scanf_float+0x7a>
 8008498:	1e6b      	subs	r3, r5, #1
 800849a:	2b06      	cmp	r3, #6
 800849c:	d825      	bhi.n	80084ea <_scanf_float+0x2f2>
 800849e:	2d02      	cmp	r5, #2
 80084a0:	d836      	bhi.n	8008510 <_scanf_float+0x318>
 80084a2:	455e      	cmp	r6, fp
 80084a4:	f67f aee8 	bls.w	8008278 <_scanf_float+0x80>
 80084a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084b0:	463a      	mov	r2, r7
 80084b2:	4640      	mov	r0, r8
 80084b4:	4798      	blx	r3
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	6123      	str	r3, [r4, #16]
 80084bc:	e7f1      	b.n	80084a2 <_scanf_float+0x2aa>
 80084be:	9802      	ldr	r0, [sp, #8]
 80084c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80084c8:	9002      	str	r0, [sp, #8]
 80084ca:	463a      	mov	r2, r7
 80084cc:	4640      	mov	r0, r8
 80084ce:	4798      	blx	r3
 80084d0:	6923      	ldr	r3, [r4, #16]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	6123      	str	r3, [r4, #16]
 80084d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084da:	fa5f fa8a 	uxtb.w	sl, sl
 80084de:	f1ba 0f02 	cmp.w	sl, #2
 80084e2:	d1ec      	bne.n	80084be <_scanf_float+0x2c6>
 80084e4:	3d03      	subs	r5, #3
 80084e6:	b2ed      	uxtb	r5, r5
 80084e8:	1b76      	subs	r6, r6, r5
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	05da      	lsls	r2, r3, #23
 80084ee:	d52f      	bpl.n	8008550 <_scanf_float+0x358>
 80084f0:	055b      	lsls	r3, r3, #21
 80084f2:	d510      	bpl.n	8008516 <_scanf_float+0x31e>
 80084f4:	455e      	cmp	r6, fp
 80084f6:	f67f aebf 	bls.w	8008278 <_scanf_float+0x80>
 80084fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008502:	463a      	mov	r2, r7
 8008504:	4640      	mov	r0, r8
 8008506:	4798      	blx	r3
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	3b01      	subs	r3, #1
 800850c:	6123      	str	r3, [r4, #16]
 800850e:	e7f1      	b.n	80084f4 <_scanf_float+0x2fc>
 8008510:	46aa      	mov	sl, r5
 8008512:	9602      	str	r6, [sp, #8]
 8008514:	e7df      	b.n	80084d6 <_scanf_float+0x2de>
 8008516:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	2965      	cmp	r1, #101	; 0x65
 800851e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008522:	f106 35ff 	add.w	r5, r6, #4294967295
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	d00c      	beq.n	8008544 <_scanf_float+0x34c>
 800852a:	2945      	cmp	r1, #69	; 0x45
 800852c:	d00a      	beq.n	8008544 <_scanf_float+0x34c>
 800852e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008532:	463a      	mov	r2, r7
 8008534:	4640      	mov	r0, r8
 8008536:	4798      	blx	r3
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800853e:	3b01      	subs	r3, #1
 8008540:	1eb5      	subs	r5, r6, #2
 8008542:	6123      	str	r3, [r4, #16]
 8008544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008548:	463a      	mov	r2, r7
 800854a:	4640      	mov	r0, r8
 800854c:	4798      	blx	r3
 800854e:	462e      	mov	r6, r5
 8008550:	6825      	ldr	r5, [r4, #0]
 8008552:	f015 0510 	ands.w	r5, r5, #16
 8008556:	d159      	bne.n	800860c <_scanf_float+0x414>
 8008558:	7035      	strb	r5, [r6, #0]
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008564:	d11b      	bne.n	800859e <_scanf_float+0x3a6>
 8008566:	9b01      	ldr	r3, [sp, #4]
 8008568:	454b      	cmp	r3, r9
 800856a:	eba3 0209 	sub.w	r2, r3, r9
 800856e:	d123      	bne.n	80085b8 <_scanf_float+0x3c0>
 8008570:	2200      	movs	r2, #0
 8008572:	4659      	mov	r1, fp
 8008574:	4640      	mov	r0, r8
 8008576:	f000 fe99 	bl	80092ac <_strtod_r>
 800857a:	6822      	ldr	r2, [r4, #0]
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	f012 0f02 	tst.w	r2, #2
 8008582:	ec57 6b10 	vmov	r6, r7, d0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	d021      	beq.n	80085ce <_scanf_float+0x3d6>
 800858a:	9903      	ldr	r1, [sp, #12]
 800858c:	1d1a      	adds	r2, r3, #4
 800858e:	600a      	str	r2, [r1, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	e9c3 6700 	strd	r6, r7, [r3]
 8008596:	68e3      	ldr	r3, [r4, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	60e3      	str	r3, [r4, #12]
 800859c:	e66d      	b.n	800827a <_scanf_float+0x82>
 800859e:	9b04      	ldr	r3, [sp, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0e5      	beq.n	8008570 <_scanf_float+0x378>
 80085a4:	9905      	ldr	r1, [sp, #20]
 80085a6:	230a      	movs	r3, #10
 80085a8:	462a      	mov	r2, r5
 80085aa:	3101      	adds	r1, #1
 80085ac:	4640      	mov	r0, r8
 80085ae:	f000 ff05 	bl	80093bc <_strtol_r>
 80085b2:	9b04      	ldr	r3, [sp, #16]
 80085b4:	9e05      	ldr	r6, [sp, #20]
 80085b6:	1ac2      	subs	r2, r0, r3
 80085b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80085bc:	429e      	cmp	r6, r3
 80085be:	bf28      	it	cs
 80085c0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80085c4:	4912      	ldr	r1, [pc, #72]	; (8008610 <_scanf_float+0x418>)
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 f82c 	bl	8008624 <siprintf>
 80085cc:	e7d0      	b.n	8008570 <_scanf_float+0x378>
 80085ce:	9903      	ldr	r1, [sp, #12]
 80085d0:	f012 0f04 	tst.w	r2, #4
 80085d4:	f103 0204 	add.w	r2, r3, #4
 80085d8:	600a      	str	r2, [r1, #0]
 80085da:	d1d9      	bne.n	8008590 <_scanf_float+0x398>
 80085dc:	f8d3 8000 	ldr.w	r8, [r3]
 80085e0:	ee10 2a10 	vmov	r2, s0
 80085e4:	ee10 0a10 	vmov	r0, s0
 80085e8:	463b      	mov	r3, r7
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f8 fac6 	bl	8000b7c <__aeabi_dcmpun>
 80085f0:	b128      	cbz	r0, 80085fe <_scanf_float+0x406>
 80085f2:	4808      	ldr	r0, [pc, #32]	; (8008614 <_scanf_float+0x41c>)
 80085f4:	f000 f810 	bl	8008618 <nanf>
 80085f8:	ed88 0a00 	vstr	s0, [r8]
 80085fc:	e7cb      	b.n	8008596 <_scanf_float+0x39e>
 80085fe:	4630      	mov	r0, r6
 8008600:	4639      	mov	r1, r7
 8008602:	f7f8 fb19 	bl	8000c38 <__aeabi_d2f>
 8008606:	f8c8 0000 	str.w	r0, [r8]
 800860a:	e7c4      	b.n	8008596 <_scanf_float+0x39e>
 800860c:	2500      	movs	r5, #0
 800860e:	e634      	b.n	800827a <_scanf_float+0x82>
 8008610:	0800c2ec 	.word	0x0800c2ec
 8008614:	0800c6f8 	.word	0x0800c6f8

08008618 <nanf>:
 8008618:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008620 <nanf+0x8>
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	7fc00000 	.word	0x7fc00000

08008624 <siprintf>:
 8008624:	b40e      	push	{r1, r2, r3}
 8008626:	b500      	push	{lr}
 8008628:	b09c      	sub	sp, #112	; 0x70
 800862a:	ab1d      	add	r3, sp, #116	; 0x74
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	9006      	str	r0, [sp, #24]
 8008630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008634:	4809      	ldr	r0, [pc, #36]	; (800865c <siprintf+0x38>)
 8008636:	9107      	str	r1, [sp, #28]
 8008638:	9104      	str	r1, [sp, #16]
 800863a:	4909      	ldr	r1, [pc, #36]	; (8008660 <siprintf+0x3c>)
 800863c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008640:	9105      	str	r1, [sp, #20]
 8008642:	6800      	ldr	r0, [r0, #0]
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	a902      	add	r1, sp, #8
 8008648:	f002 fee4 	bl	800b414 <_svfiprintf_r>
 800864c:	9b02      	ldr	r3, [sp, #8]
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
 8008652:	b01c      	add	sp, #112	; 0x70
 8008654:	f85d eb04 	ldr.w	lr, [sp], #4
 8008658:	b003      	add	sp, #12
 800865a:	4770      	bx	lr
 800865c:	2000000c 	.word	0x2000000c
 8008660:	ffff0208 	.word	0xffff0208

08008664 <sulp>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	4604      	mov	r4, r0
 8008668:	460d      	mov	r5, r1
 800866a:	ec45 4b10 	vmov	d0, r4, r5
 800866e:	4616      	mov	r6, r2
 8008670:	f002 fc2e 	bl	800aed0 <__ulp>
 8008674:	ec51 0b10 	vmov	r0, r1, d0
 8008678:	b17e      	cbz	r6, 800869a <sulp+0x36>
 800867a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800867e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008682:	2b00      	cmp	r3, #0
 8008684:	dd09      	ble.n	800869a <sulp+0x36>
 8008686:	051b      	lsls	r3, r3, #20
 8008688:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800868c:	2400      	movs	r4, #0
 800868e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008692:	4622      	mov	r2, r4
 8008694:	462b      	mov	r3, r5
 8008696:	f7f7 ffd7 	bl	8000648 <__aeabi_dmul>
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	0000      	movs	r0, r0
	...

080086a0 <_strtod_l>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	ed2d 8b02 	vpush	{d8}
 80086a8:	b09d      	sub	sp, #116	; 0x74
 80086aa:	461f      	mov	r7, r3
 80086ac:	2300      	movs	r3, #0
 80086ae:	9318      	str	r3, [sp, #96]	; 0x60
 80086b0:	4ba2      	ldr	r3, [pc, #648]	; (800893c <_strtod_l+0x29c>)
 80086b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	9305      	str	r3, [sp, #20]
 80086b8:	4604      	mov	r4, r0
 80086ba:	4618      	mov	r0, r3
 80086bc:	4688      	mov	r8, r1
 80086be:	f7f7 fdaf 	bl	8000220 <strlen>
 80086c2:	f04f 0a00 	mov.w	sl, #0
 80086c6:	4605      	mov	r5, r0
 80086c8:	f04f 0b00 	mov.w	fp, #0
 80086cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80086d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086d2:	781a      	ldrb	r2, [r3, #0]
 80086d4:	2a2b      	cmp	r2, #43	; 0x2b
 80086d6:	d04e      	beq.n	8008776 <_strtod_l+0xd6>
 80086d8:	d83b      	bhi.n	8008752 <_strtod_l+0xb2>
 80086da:	2a0d      	cmp	r2, #13
 80086dc:	d834      	bhi.n	8008748 <_strtod_l+0xa8>
 80086de:	2a08      	cmp	r2, #8
 80086e0:	d834      	bhi.n	800874c <_strtod_l+0xac>
 80086e2:	2a00      	cmp	r2, #0
 80086e4:	d03e      	beq.n	8008764 <_strtod_l+0xc4>
 80086e6:	2300      	movs	r3, #0
 80086e8:	930a      	str	r3, [sp, #40]	; 0x28
 80086ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80086ec:	7833      	ldrb	r3, [r6, #0]
 80086ee:	2b30      	cmp	r3, #48	; 0x30
 80086f0:	f040 80b0 	bne.w	8008854 <_strtod_l+0x1b4>
 80086f4:	7873      	ldrb	r3, [r6, #1]
 80086f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086fa:	2b58      	cmp	r3, #88	; 0x58
 80086fc:	d168      	bne.n	80087d0 <_strtod_l+0x130>
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	ab18      	add	r3, sp, #96	; 0x60
 8008704:	9702      	str	r7, [sp, #8]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	4a8d      	ldr	r2, [pc, #564]	; (8008940 <_strtod_l+0x2a0>)
 800870a:	ab19      	add	r3, sp, #100	; 0x64
 800870c:	a917      	add	r1, sp, #92	; 0x5c
 800870e:	4620      	mov	r0, r4
 8008710:	f001 fd38 	bl	800a184 <__gethex>
 8008714:	f010 0707 	ands.w	r7, r0, #7
 8008718:	4605      	mov	r5, r0
 800871a:	d005      	beq.n	8008728 <_strtod_l+0x88>
 800871c:	2f06      	cmp	r7, #6
 800871e:	d12c      	bne.n	800877a <_strtod_l+0xda>
 8008720:	3601      	adds	r6, #1
 8008722:	2300      	movs	r3, #0
 8008724:	9617      	str	r6, [sp, #92]	; 0x5c
 8008726:	930a      	str	r3, [sp, #40]	; 0x28
 8008728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800872a:	2b00      	cmp	r3, #0
 800872c:	f040 8590 	bne.w	8009250 <_strtod_l+0xbb0>
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	b1eb      	cbz	r3, 8008770 <_strtod_l+0xd0>
 8008734:	4652      	mov	r2, sl
 8008736:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800873a:	ec43 2b10 	vmov	d0, r2, r3
 800873e:	b01d      	add	sp, #116	; 0x74
 8008740:	ecbd 8b02 	vpop	{d8}
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	2a20      	cmp	r2, #32
 800874a:	d1cc      	bne.n	80086e6 <_strtod_l+0x46>
 800874c:	3301      	adds	r3, #1
 800874e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008750:	e7be      	b.n	80086d0 <_strtod_l+0x30>
 8008752:	2a2d      	cmp	r2, #45	; 0x2d
 8008754:	d1c7      	bne.n	80086e6 <_strtod_l+0x46>
 8008756:	2201      	movs	r2, #1
 8008758:	920a      	str	r2, [sp, #40]	; 0x28
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	9217      	str	r2, [sp, #92]	; 0x5c
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1c2      	bne.n	80086ea <_strtod_l+0x4a>
 8008764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008766:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800876a:	2b00      	cmp	r3, #0
 800876c:	f040 856e 	bne.w	800924c <_strtod_l+0xbac>
 8008770:	4652      	mov	r2, sl
 8008772:	465b      	mov	r3, fp
 8008774:	e7e1      	b.n	800873a <_strtod_l+0x9a>
 8008776:	2200      	movs	r2, #0
 8008778:	e7ee      	b.n	8008758 <_strtod_l+0xb8>
 800877a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800877c:	b13a      	cbz	r2, 800878e <_strtod_l+0xee>
 800877e:	2135      	movs	r1, #53	; 0x35
 8008780:	a81a      	add	r0, sp, #104	; 0x68
 8008782:	f002 fcb0 	bl	800b0e6 <__copybits>
 8008786:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008788:	4620      	mov	r0, r4
 800878a:	f002 f86f 	bl	800a86c <_Bfree>
 800878e:	3f01      	subs	r7, #1
 8008790:	2f04      	cmp	r7, #4
 8008792:	d806      	bhi.n	80087a2 <_strtod_l+0x102>
 8008794:	e8df f007 	tbb	[pc, r7]
 8008798:	1714030a 	.word	0x1714030a
 800879c:	0a          	.byte	0x0a
 800879d:	00          	.byte	0x00
 800879e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80087a2:	0728      	lsls	r0, r5, #28
 80087a4:	d5c0      	bpl.n	8008728 <_strtod_l+0x88>
 80087a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80087aa:	e7bd      	b.n	8008728 <_strtod_l+0x88>
 80087ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80087b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80087b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80087b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80087ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80087be:	e7f0      	b.n	80087a2 <_strtod_l+0x102>
 80087c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008944 <_strtod_l+0x2a4>
 80087c4:	e7ed      	b.n	80087a2 <_strtod_l+0x102>
 80087c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80087ca:	f04f 3aff 	mov.w	sl, #4294967295
 80087ce:	e7e8      	b.n	80087a2 <_strtod_l+0x102>
 80087d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80087d6:	785b      	ldrb	r3, [r3, #1]
 80087d8:	2b30      	cmp	r3, #48	; 0x30
 80087da:	d0f9      	beq.n	80087d0 <_strtod_l+0x130>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d0a3      	beq.n	8008728 <_strtod_l+0x88>
 80087e0:	2301      	movs	r3, #1
 80087e2:	f04f 0900 	mov.w	r9, #0
 80087e6:	9304      	str	r3, [sp, #16]
 80087e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087ea:	9308      	str	r3, [sp, #32]
 80087ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80087f0:	464f      	mov	r7, r9
 80087f2:	220a      	movs	r2, #10
 80087f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80087f6:	7806      	ldrb	r6, [r0, #0]
 80087f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80087fc:	b2d9      	uxtb	r1, r3
 80087fe:	2909      	cmp	r1, #9
 8008800:	d92a      	bls.n	8008858 <_strtod_l+0x1b8>
 8008802:	9905      	ldr	r1, [sp, #20]
 8008804:	462a      	mov	r2, r5
 8008806:	f002 ff1f 	bl	800b648 <strncmp>
 800880a:	b398      	cbz	r0, 8008874 <_strtod_l+0x1d4>
 800880c:	2000      	movs	r0, #0
 800880e:	4632      	mov	r2, r6
 8008810:	463d      	mov	r5, r7
 8008812:	9005      	str	r0, [sp, #20]
 8008814:	4603      	mov	r3, r0
 8008816:	2a65      	cmp	r2, #101	; 0x65
 8008818:	d001      	beq.n	800881e <_strtod_l+0x17e>
 800881a:	2a45      	cmp	r2, #69	; 0x45
 800881c:	d118      	bne.n	8008850 <_strtod_l+0x1b0>
 800881e:	b91d      	cbnz	r5, 8008828 <_strtod_l+0x188>
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	4302      	orrs	r2, r0
 8008824:	d09e      	beq.n	8008764 <_strtod_l+0xc4>
 8008826:	2500      	movs	r5, #0
 8008828:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800882c:	f108 0201 	add.w	r2, r8, #1
 8008830:	9217      	str	r2, [sp, #92]	; 0x5c
 8008832:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008836:	2a2b      	cmp	r2, #43	; 0x2b
 8008838:	d075      	beq.n	8008926 <_strtod_l+0x286>
 800883a:	2a2d      	cmp	r2, #45	; 0x2d
 800883c:	d07b      	beq.n	8008936 <_strtod_l+0x296>
 800883e:	f04f 0c00 	mov.w	ip, #0
 8008842:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008846:	2909      	cmp	r1, #9
 8008848:	f240 8082 	bls.w	8008950 <_strtod_l+0x2b0>
 800884c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008850:	2600      	movs	r6, #0
 8008852:	e09d      	b.n	8008990 <_strtod_l+0x2f0>
 8008854:	2300      	movs	r3, #0
 8008856:	e7c4      	b.n	80087e2 <_strtod_l+0x142>
 8008858:	2f08      	cmp	r7, #8
 800885a:	bfd8      	it	le
 800885c:	9907      	ldrle	r1, [sp, #28]
 800885e:	f100 0001 	add.w	r0, r0, #1
 8008862:	bfda      	itte	le
 8008864:	fb02 3301 	mlale	r3, r2, r1, r3
 8008868:	9307      	strle	r3, [sp, #28]
 800886a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800886e:	3701      	adds	r7, #1
 8008870:	9017      	str	r0, [sp, #92]	; 0x5c
 8008872:	e7bf      	b.n	80087f4 <_strtod_l+0x154>
 8008874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008876:	195a      	adds	r2, r3, r5
 8008878:	9217      	str	r2, [sp, #92]	; 0x5c
 800887a:	5d5a      	ldrb	r2, [r3, r5]
 800887c:	2f00      	cmp	r7, #0
 800887e:	d037      	beq.n	80088f0 <_strtod_l+0x250>
 8008880:	9005      	str	r0, [sp, #20]
 8008882:	463d      	mov	r5, r7
 8008884:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008888:	2b09      	cmp	r3, #9
 800888a:	d912      	bls.n	80088b2 <_strtod_l+0x212>
 800888c:	2301      	movs	r3, #1
 800888e:	e7c2      	b.n	8008816 <_strtod_l+0x176>
 8008890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	9217      	str	r2, [sp, #92]	; 0x5c
 8008896:	785a      	ldrb	r2, [r3, #1]
 8008898:	3001      	adds	r0, #1
 800889a:	2a30      	cmp	r2, #48	; 0x30
 800889c:	d0f8      	beq.n	8008890 <_strtod_l+0x1f0>
 800889e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	f200 84d9 	bhi.w	800925a <_strtod_l+0xbba>
 80088a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088aa:	9005      	str	r0, [sp, #20]
 80088ac:	2000      	movs	r0, #0
 80088ae:	9308      	str	r3, [sp, #32]
 80088b0:	4605      	mov	r5, r0
 80088b2:	3a30      	subs	r2, #48	; 0x30
 80088b4:	f100 0301 	add.w	r3, r0, #1
 80088b8:	d014      	beq.n	80088e4 <_strtod_l+0x244>
 80088ba:	9905      	ldr	r1, [sp, #20]
 80088bc:	4419      	add	r1, r3
 80088be:	9105      	str	r1, [sp, #20]
 80088c0:	462b      	mov	r3, r5
 80088c2:	eb00 0e05 	add.w	lr, r0, r5
 80088c6:	210a      	movs	r1, #10
 80088c8:	4573      	cmp	r3, lr
 80088ca:	d113      	bne.n	80088f4 <_strtod_l+0x254>
 80088cc:	182b      	adds	r3, r5, r0
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	f105 0501 	add.w	r5, r5, #1
 80088d4:	4405      	add	r5, r0
 80088d6:	dc1c      	bgt.n	8008912 <_strtod_l+0x272>
 80088d8:	9907      	ldr	r1, [sp, #28]
 80088da:	230a      	movs	r3, #10
 80088dc:	fb03 2301 	mla	r3, r3, r1, r2
 80088e0:	9307      	str	r3, [sp, #28]
 80088e2:	2300      	movs	r3, #0
 80088e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088e6:	1c51      	adds	r1, r2, #1
 80088e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80088ea:	7852      	ldrb	r2, [r2, #1]
 80088ec:	4618      	mov	r0, r3
 80088ee:	e7c9      	b.n	8008884 <_strtod_l+0x1e4>
 80088f0:	4638      	mov	r0, r7
 80088f2:	e7d2      	b.n	800889a <_strtod_l+0x1fa>
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	dc04      	bgt.n	8008902 <_strtod_l+0x262>
 80088f8:	9e07      	ldr	r6, [sp, #28]
 80088fa:	434e      	muls	r6, r1
 80088fc:	9607      	str	r6, [sp, #28]
 80088fe:	3301      	adds	r3, #1
 8008900:	e7e2      	b.n	80088c8 <_strtod_l+0x228>
 8008902:	f103 0c01 	add.w	ip, r3, #1
 8008906:	f1bc 0f10 	cmp.w	ip, #16
 800890a:	bfd8      	it	le
 800890c:	fb01 f909 	mulle.w	r9, r1, r9
 8008910:	e7f5      	b.n	80088fe <_strtod_l+0x25e>
 8008912:	2d10      	cmp	r5, #16
 8008914:	bfdc      	itt	le
 8008916:	230a      	movle	r3, #10
 8008918:	fb03 2909 	mlale	r9, r3, r9, r2
 800891c:	e7e1      	b.n	80088e2 <_strtod_l+0x242>
 800891e:	2300      	movs	r3, #0
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	2301      	movs	r3, #1
 8008924:	e77c      	b.n	8008820 <_strtod_l+0x180>
 8008926:	f04f 0c00 	mov.w	ip, #0
 800892a:	f108 0202 	add.w	r2, r8, #2
 800892e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008930:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008934:	e785      	b.n	8008842 <_strtod_l+0x1a2>
 8008936:	f04f 0c01 	mov.w	ip, #1
 800893a:	e7f6      	b.n	800892a <_strtod_l+0x28a>
 800893c:	0800c540 	.word	0x0800c540
 8008940:	0800c2f4 	.word	0x0800c2f4
 8008944:	7ff00000 	.word	0x7ff00000
 8008948:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800894a:	1c51      	adds	r1, r2, #1
 800894c:	9117      	str	r1, [sp, #92]	; 0x5c
 800894e:	7852      	ldrb	r2, [r2, #1]
 8008950:	2a30      	cmp	r2, #48	; 0x30
 8008952:	d0f9      	beq.n	8008948 <_strtod_l+0x2a8>
 8008954:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008958:	2908      	cmp	r1, #8
 800895a:	f63f af79 	bhi.w	8008850 <_strtod_l+0x1b0>
 800895e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008962:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008964:	9206      	str	r2, [sp, #24]
 8008966:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008968:	1c51      	adds	r1, r2, #1
 800896a:	9117      	str	r1, [sp, #92]	; 0x5c
 800896c:	7852      	ldrb	r2, [r2, #1]
 800896e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008972:	2e09      	cmp	r6, #9
 8008974:	d937      	bls.n	80089e6 <_strtod_l+0x346>
 8008976:	9e06      	ldr	r6, [sp, #24]
 8008978:	1b89      	subs	r1, r1, r6
 800897a:	2908      	cmp	r1, #8
 800897c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008980:	dc02      	bgt.n	8008988 <_strtod_l+0x2e8>
 8008982:	4576      	cmp	r6, lr
 8008984:	bfa8      	it	ge
 8008986:	4676      	movge	r6, lr
 8008988:	f1bc 0f00 	cmp.w	ip, #0
 800898c:	d000      	beq.n	8008990 <_strtod_l+0x2f0>
 800898e:	4276      	negs	r6, r6
 8008990:	2d00      	cmp	r5, #0
 8008992:	d14d      	bne.n	8008a30 <_strtod_l+0x390>
 8008994:	9904      	ldr	r1, [sp, #16]
 8008996:	4301      	orrs	r1, r0
 8008998:	f47f aec6 	bne.w	8008728 <_strtod_l+0x88>
 800899c:	2b00      	cmp	r3, #0
 800899e:	f47f aee1 	bne.w	8008764 <_strtod_l+0xc4>
 80089a2:	2a69      	cmp	r2, #105	; 0x69
 80089a4:	d027      	beq.n	80089f6 <_strtod_l+0x356>
 80089a6:	dc24      	bgt.n	80089f2 <_strtod_l+0x352>
 80089a8:	2a49      	cmp	r2, #73	; 0x49
 80089aa:	d024      	beq.n	80089f6 <_strtod_l+0x356>
 80089ac:	2a4e      	cmp	r2, #78	; 0x4e
 80089ae:	f47f aed9 	bne.w	8008764 <_strtod_l+0xc4>
 80089b2:	499f      	ldr	r1, [pc, #636]	; (8008c30 <_strtod_l+0x590>)
 80089b4:	a817      	add	r0, sp, #92	; 0x5c
 80089b6:	f001 fe3d 	bl	800a634 <__match>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f43f aed2 	beq.w	8008764 <_strtod_l+0xc4>
 80089c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b28      	cmp	r3, #40	; 0x28
 80089c6:	d12d      	bne.n	8008a24 <_strtod_l+0x384>
 80089c8:	499a      	ldr	r1, [pc, #616]	; (8008c34 <_strtod_l+0x594>)
 80089ca:	aa1a      	add	r2, sp, #104	; 0x68
 80089cc:	a817      	add	r0, sp, #92	; 0x5c
 80089ce:	f001 fe45 	bl	800a65c <__hexnan>
 80089d2:	2805      	cmp	r0, #5
 80089d4:	d126      	bne.n	8008a24 <_strtod_l+0x384>
 80089d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80089dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80089e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80089e4:	e6a0      	b.n	8008728 <_strtod_l+0x88>
 80089e6:	210a      	movs	r1, #10
 80089e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80089ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80089f0:	e7b9      	b.n	8008966 <_strtod_l+0x2c6>
 80089f2:	2a6e      	cmp	r2, #110	; 0x6e
 80089f4:	e7db      	b.n	80089ae <_strtod_l+0x30e>
 80089f6:	4990      	ldr	r1, [pc, #576]	; (8008c38 <_strtod_l+0x598>)
 80089f8:	a817      	add	r0, sp, #92	; 0x5c
 80089fa:	f001 fe1b 	bl	800a634 <__match>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f43f aeb0 	beq.w	8008764 <_strtod_l+0xc4>
 8008a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a06:	498d      	ldr	r1, [pc, #564]	; (8008c3c <_strtod_l+0x59c>)
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	a817      	add	r0, sp, #92	; 0x5c
 8008a0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a0e:	f001 fe11 	bl	800a634 <__match>
 8008a12:	b910      	cbnz	r0, 8008a1a <_strtod_l+0x37a>
 8008a14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a16:	3301      	adds	r3, #1
 8008a18:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008c4c <_strtod_l+0x5ac>
 8008a1e:	f04f 0a00 	mov.w	sl, #0
 8008a22:	e681      	b.n	8008728 <_strtod_l+0x88>
 8008a24:	4886      	ldr	r0, [pc, #536]	; (8008c40 <_strtod_l+0x5a0>)
 8008a26:	f002 fdf7 	bl	800b618 <nan>
 8008a2a:	ec5b ab10 	vmov	sl, fp, d0
 8008a2e:	e67b      	b.n	8008728 <_strtod_l+0x88>
 8008a30:	9b05      	ldr	r3, [sp, #20]
 8008a32:	9807      	ldr	r0, [sp, #28]
 8008a34:	1af3      	subs	r3, r6, r3
 8008a36:	2f00      	cmp	r7, #0
 8008a38:	bf08      	it	eq
 8008a3a:	462f      	moveq	r7, r5
 8008a3c:	2d10      	cmp	r5, #16
 8008a3e:	9306      	str	r3, [sp, #24]
 8008a40:	46a8      	mov	r8, r5
 8008a42:	bfa8      	it	ge
 8008a44:	f04f 0810 	movge.w	r8, #16
 8008a48:	f7f7 fd84 	bl	8000554 <__aeabi_ui2d>
 8008a4c:	2d09      	cmp	r5, #9
 8008a4e:	4682      	mov	sl, r0
 8008a50:	468b      	mov	fp, r1
 8008a52:	dd13      	ble.n	8008a7c <_strtod_l+0x3dc>
 8008a54:	4b7b      	ldr	r3, [pc, #492]	; (8008c44 <_strtod_l+0x5a4>)
 8008a56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008a5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008a5e:	f7f7 fdf3 	bl	8000648 <__aeabi_dmul>
 8008a62:	4682      	mov	sl, r0
 8008a64:	4648      	mov	r0, r9
 8008a66:	468b      	mov	fp, r1
 8008a68:	f7f7 fd74 	bl	8000554 <__aeabi_ui2d>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4650      	mov	r0, sl
 8008a72:	4659      	mov	r1, fp
 8008a74:	f7f7 fc32 	bl	80002dc <__adddf3>
 8008a78:	4682      	mov	sl, r0
 8008a7a:	468b      	mov	fp, r1
 8008a7c:	2d0f      	cmp	r5, #15
 8008a7e:	dc38      	bgt.n	8008af2 <_strtod_l+0x452>
 8008a80:	9b06      	ldr	r3, [sp, #24]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f43f ae50 	beq.w	8008728 <_strtod_l+0x88>
 8008a88:	dd24      	ble.n	8008ad4 <_strtod_l+0x434>
 8008a8a:	2b16      	cmp	r3, #22
 8008a8c:	dc0b      	bgt.n	8008aa6 <_strtod_l+0x406>
 8008a8e:	496d      	ldr	r1, [pc, #436]	; (8008c44 <_strtod_l+0x5a4>)
 8008a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a98:	4652      	mov	r2, sl
 8008a9a:	465b      	mov	r3, fp
 8008a9c:	f7f7 fdd4 	bl	8000648 <__aeabi_dmul>
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	468b      	mov	fp, r1
 8008aa4:	e640      	b.n	8008728 <_strtod_l+0x88>
 8008aa6:	9a06      	ldr	r2, [sp, #24]
 8008aa8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008aac:	4293      	cmp	r3, r2
 8008aae:	db20      	blt.n	8008af2 <_strtod_l+0x452>
 8008ab0:	4c64      	ldr	r4, [pc, #400]	; (8008c44 <_strtod_l+0x5a4>)
 8008ab2:	f1c5 050f 	rsb	r5, r5, #15
 8008ab6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008aba:	4652      	mov	r2, sl
 8008abc:	465b      	mov	r3, fp
 8008abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ac2:	f7f7 fdc1 	bl	8000648 <__aeabi_dmul>
 8008ac6:	9b06      	ldr	r3, [sp, #24]
 8008ac8:	1b5d      	subs	r5, r3, r5
 8008aca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ace:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ad2:	e7e3      	b.n	8008a9c <_strtod_l+0x3fc>
 8008ad4:	9b06      	ldr	r3, [sp, #24]
 8008ad6:	3316      	adds	r3, #22
 8008ad8:	db0b      	blt.n	8008af2 <_strtod_l+0x452>
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	1b9e      	subs	r6, r3, r6
 8008ade:	4b59      	ldr	r3, [pc, #356]	; (8008c44 <_strtod_l+0x5a4>)
 8008ae0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008ae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ae8:	4650      	mov	r0, sl
 8008aea:	4659      	mov	r1, fp
 8008aec:	f7f7 fed6 	bl	800089c <__aeabi_ddiv>
 8008af0:	e7d6      	b.n	8008aa0 <_strtod_l+0x400>
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	eba5 0808 	sub.w	r8, r5, r8
 8008af8:	4498      	add	r8, r3
 8008afa:	f1b8 0f00 	cmp.w	r8, #0
 8008afe:	dd74      	ble.n	8008bea <_strtod_l+0x54a>
 8008b00:	f018 030f 	ands.w	r3, r8, #15
 8008b04:	d00a      	beq.n	8008b1c <_strtod_l+0x47c>
 8008b06:	494f      	ldr	r1, [pc, #316]	; (8008c44 <_strtod_l+0x5a4>)
 8008b08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b0c:	4652      	mov	r2, sl
 8008b0e:	465b      	mov	r3, fp
 8008b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b14:	f7f7 fd98 	bl	8000648 <__aeabi_dmul>
 8008b18:	4682      	mov	sl, r0
 8008b1a:	468b      	mov	fp, r1
 8008b1c:	f038 080f 	bics.w	r8, r8, #15
 8008b20:	d04f      	beq.n	8008bc2 <_strtod_l+0x522>
 8008b22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008b26:	dd22      	ble.n	8008b6e <_strtod_l+0x4ce>
 8008b28:	2500      	movs	r5, #0
 8008b2a:	462e      	mov	r6, r5
 8008b2c:	9507      	str	r5, [sp, #28]
 8008b2e:	9505      	str	r5, [sp, #20]
 8008b30:	2322      	movs	r3, #34	; 0x22
 8008b32:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008c4c <_strtod_l+0x5ac>
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	f04f 0a00 	mov.w	sl, #0
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f43f adf2 	beq.w	8008728 <_strtod_l+0x88>
 8008b44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b46:	4620      	mov	r0, r4
 8008b48:	f001 fe90 	bl	800a86c <_Bfree>
 8008b4c:	9905      	ldr	r1, [sp, #20]
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f001 fe8c 	bl	800a86c <_Bfree>
 8008b54:	4631      	mov	r1, r6
 8008b56:	4620      	mov	r0, r4
 8008b58:	f001 fe88 	bl	800a86c <_Bfree>
 8008b5c:	9907      	ldr	r1, [sp, #28]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f001 fe84 	bl	800a86c <_Bfree>
 8008b64:	4629      	mov	r1, r5
 8008b66:	4620      	mov	r0, r4
 8008b68:	f001 fe80 	bl	800a86c <_Bfree>
 8008b6c:	e5dc      	b.n	8008728 <_strtod_l+0x88>
 8008b6e:	4b36      	ldr	r3, [pc, #216]	; (8008c48 <_strtod_l+0x5a8>)
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	2300      	movs	r3, #0
 8008b74:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008b78:	4650      	mov	r0, sl
 8008b7a:	4659      	mov	r1, fp
 8008b7c:	4699      	mov	r9, r3
 8008b7e:	f1b8 0f01 	cmp.w	r8, #1
 8008b82:	dc21      	bgt.n	8008bc8 <_strtod_l+0x528>
 8008b84:	b10b      	cbz	r3, 8008b8a <_strtod_l+0x4ea>
 8008b86:	4682      	mov	sl, r0
 8008b88:	468b      	mov	fp, r1
 8008b8a:	4b2f      	ldr	r3, [pc, #188]	; (8008c48 <_strtod_l+0x5a8>)
 8008b8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008b90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008b94:	4652      	mov	r2, sl
 8008b96:	465b      	mov	r3, fp
 8008b98:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008b9c:	f7f7 fd54 	bl	8000648 <__aeabi_dmul>
 8008ba0:	4b2a      	ldr	r3, [pc, #168]	; (8008c4c <_strtod_l+0x5ac>)
 8008ba2:	460a      	mov	r2, r1
 8008ba4:	400b      	ands	r3, r1
 8008ba6:	492a      	ldr	r1, [pc, #168]	; (8008c50 <_strtod_l+0x5b0>)
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	4682      	mov	sl, r0
 8008bac:	d8bc      	bhi.n	8008b28 <_strtod_l+0x488>
 8008bae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008bb2:	428b      	cmp	r3, r1
 8008bb4:	bf86      	itte	hi
 8008bb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008c54 <_strtod_l+0x5b4>
 8008bba:	f04f 3aff 	movhi.w	sl, #4294967295
 8008bbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	e084      	b.n	8008cd2 <_strtod_l+0x632>
 8008bc8:	f018 0f01 	tst.w	r8, #1
 8008bcc:	d005      	beq.n	8008bda <_strtod_l+0x53a>
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fd38 	bl	8000648 <__aeabi_dmul>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	9a04      	ldr	r2, [sp, #16]
 8008bdc:	3208      	adds	r2, #8
 8008bde:	f109 0901 	add.w	r9, r9, #1
 8008be2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008be6:	9204      	str	r2, [sp, #16]
 8008be8:	e7c9      	b.n	8008b7e <_strtod_l+0x4de>
 8008bea:	d0ea      	beq.n	8008bc2 <_strtod_l+0x522>
 8008bec:	f1c8 0800 	rsb	r8, r8, #0
 8008bf0:	f018 020f 	ands.w	r2, r8, #15
 8008bf4:	d00a      	beq.n	8008c0c <_strtod_l+0x56c>
 8008bf6:	4b13      	ldr	r3, [pc, #76]	; (8008c44 <_strtod_l+0x5a4>)
 8008bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bfc:	4650      	mov	r0, sl
 8008bfe:	4659      	mov	r1, fp
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f7f7 fe4a 	bl	800089c <__aeabi_ddiv>
 8008c08:	4682      	mov	sl, r0
 8008c0a:	468b      	mov	fp, r1
 8008c0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008c10:	d0d7      	beq.n	8008bc2 <_strtod_l+0x522>
 8008c12:	f1b8 0f1f 	cmp.w	r8, #31
 8008c16:	dd1f      	ble.n	8008c58 <_strtod_l+0x5b8>
 8008c18:	2500      	movs	r5, #0
 8008c1a:	462e      	mov	r6, r5
 8008c1c:	9507      	str	r5, [sp, #28]
 8008c1e:	9505      	str	r5, [sp, #20]
 8008c20:	2322      	movs	r3, #34	; 0x22
 8008c22:	f04f 0a00 	mov.w	sl, #0
 8008c26:	f04f 0b00 	mov.w	fp, #0
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	e786      	b.n	8008b3c <_strtod_l+0x49c>
 8008c2e:	bf00      	nop
 8008c30:	0800c2c5 	.word	0x0800c2c5
 8008c34:	0800c308 	.word	0x0800c308
 8008c38:	0800c2bd 	.word	0x0800c2bd
 8008c3c:	0800c44c 	.word	0x0800c44c
 8008c40:	0800c6f8 	.word	0x0800c6f8
 8008c44:	0800c5d8 	.word	0x0800c5d8
 8008c48:	0800c5b0 	.word	0x0800c5b0
 8008c4c:	7ff00000 	.word	0x7ff00000
 8008c50:	7ca00000 	.word	0x7ca00000
 8008c54:	7fefffff 	.word	0x7fefffff
 8008c58:	f018 0310 	ands.w	r3, r8, #16
 8008c5c:	bf18      	it	ne
 8008c5e:	236a      	movne	r3, #106	; 0x6a
 8008c60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009010 <_strtod_l+0x970>
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	4650      	mov	r0, sl
 8008c68:	4659      	mov	r1, fp
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f018 0f01 	tst.w	r8, #1
 8008c70:	d004      	beq.n	8008c7c <_strtod_l+0x5dc>
 8008c72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c76:	f7f7 fce7 	bl	8000648 <__aeabi_dmul>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008c80:	f109 0908 	add.w	r9, r9, #8
 8008c84:	d1f2      	bne.n	8008c6c <_strtod_l+0x5cc>
 8008c86:	b10b      	cbz	r3, 8008c8c <_strtod_l+0x5ec>
 8008c88:	4682      	mov	sl, r0
 8008c8a:	468b      	mov	fp, r1
 8008c8c:	9b04      	ldr	r3, [sp, #16]
 8008c8e:	b1c3      	cbz	r3, 8008cc2 <_strtod_l+0x622>
 8008c90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008c94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	4659      	mov	r1, fp
 8008c9c:	dd11      	ble.n	8008cc2 <_strtod_l+0x622>
 8008c9e:	2b1f      	cmp	r3, #31
 8008ca0:	f340 8124 	ble.w	8008eec <_strtod_l+0x84c>
 8008ca4:	2b34      	cmp	r3, #52	; 0x34
 8008ca6:	bfde      	ittt	le
 8008ca8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008cac:	f04f 33ff 	movle.w	r3, #4294967295
 8008cb0:	fa03 f202 	lslle.w	r2, r3, r2
 8008cb4:	f04f 0a00 	mov.w	sl, #0
 8008cb8:	bfcc      	ite	gt
 8008cba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008cbe:	ea02 0b01 	andle.w	fp, r2, r1
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	4659      	mov	r1, fp
 8008cca:	f7f7 ff25 	bl	8000b18 <__aeabi_dcmpeq>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d1a2      	bne.n	8008c18 <_strtod_l+0x578>
 8008cd2:	9b07      	ldr	r3, [sp, #28]
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	9908      	ldr	r1, [sp, #32]
 8008cd8:	462b      	mov	r3, r5
 8008cda:	463a      	mov	r2, r7
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f001 fe2d 	bl	800a93c <__s2b>
 8008ce2:	9007      	str	r0, [sp, #28]
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f43f af1f 	beq.w	8008b28 <_strtod_l+0x488>
 8008cea:	9b05      	ldr	r3, [sp, #20]
 8008cec:	1b9e      	subs	r6, r3, r6
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bfb4      	ite	lt
 8008cf4:	4633      	movlt	r3, r6
 8008cf6:	2300      	movge	r3, #0
 8008cf8:	930c      	str	r3, [sp, #48]	; 0x30
 8008cfa:	9b06      	ldr	r3, [sp, #24]
 8008cfc:	2500      	movs	r5, #0
 8008cfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008d02:	9312      	str	r3, [sp, #72]	; 0x48
 8008d04:	462e      	mov	r6, r5
 8008d06:	9b07      	ldr	r3, [sp, #28]
 8008d08:	4620      	mov	r0, r4
 8008d0a:	6859      	ldr	r1, [r3, #4]
 8008d0c:	f001 fd6e 	bl	800a7ec <_Balloc>
 8008d10:	9005      	str	r0, [sp, #20]
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f43f af0c 	beq.w	8008b30 <_strtod_l+0x490>
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	3202      	adds	r2, #2
 8008d1e:	f103 010c 	add.w	r1, r3, #12
 8008d22:	0092      	lsls	r2, r2, #2
 8008d24:	300c      	adds	r0, #12
 8008d26:	f001 fd53 	bl	800a7d0 <memcpy>
 8008d2a:	ec4b ab10 	vmov	d0, sl, fp
 8008d2e:	aa1a      	add	r2, sp, #104	; 0x68
 8008d30:	a919      	add	r1, sp, #100	; 0x64
 8008d32:	4620      	mov	r0, r4
 8008d34:	f002 f948 	bl	800afc8 <__d2b>
 8008d38:	ec4b ab18 	vmov	d8, sl, fp
 8008d3c:	9018      	str	r0, [sp, #96]	; 0x60
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f aef6 	beq.w	8008b30 <_strtod_l+0x490>
 8008d44:	2101      	movs	r1, #1
 8008d46:	4620      	mov	r0, r4
 8008d48:	f001 fe92 	bl	800aa70 <__i2b>
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f43f aeee 	beq.w	8008b30 <_strtod_l+0x490>
 8008d54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d56:	9904      	ldr	r1, [sp, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bfab      	itete	ge
 8008d5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008d5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008d60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008d62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008d66:	bfac      	ite	ge
 8008d68:	eb03 0902 	addge.w	r9, r3, r2
 8008d6c:	1ad7      	sublt	r7, r2, r3
 8008d6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d70:	eba3 0801 	sub.w	r8, r3, r1
 8008d74:	4490      	add	r8, r2
 8008d76:	4ba1      	ldr	r3, [pc, #644]	; (8008ffc <_strtod_l+0x95c>)
 8008d78:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d7c:	4598      	cmp	r8, r3
 8008d7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008d82:	f280 80c7 	bge.w	8008f14 <_strtod_l+0x874>
 8008d86:	eba3 0308 	sub.w	r3, r3, r8
 8008d8a:	2b1f      	cmp	r3, #31
 8008d8c:	eba2 0203 	sub.w	r2, r2, r3
 8008d90:	f04f 0101 	mov.w	r1, #1
 8008d94:	f300 80b1 	bgt.w	8008efa <_strtod_l+0x85a>
 8008d98:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8008d9e:	2300      	movs	r3, #0
 8008da0:	9308      	str	r3, [sp, #32]
 8008da2:	eb09 0802 	add.w	r8, r9, r2
 8008da6:	9b04      	ldr	r3, [sp, #16]
 8008da8:	45c1      	cmp	r9, r8
 8008daa:	4417      	add	r7, r2
 8008dac:	441f      	add	r7, r3
 8008dae:	464b      	mov	r3, r9
 8008db0:	bfa8      	it	ge
 8008db2:	4643      	movge	r3, r8
 8008db4:	42bb      	cmp	r3, r7
 8008db6:	bfa8      	it	ge
 8008db8:	463b      	movge	r3, r7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bfc2      	ittt	gt
 8008dbe:	eba8 0803 	subgt.w	r8, r8, r3
 8008dc2:	1aff      	subgt	r7, r7, r3
 8008dc4:	eba9 0903 	subgt.w	r9, r9, r3
 8008dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dd17      	ble.n	8008dfe <_strtod_l+0x75e>
 8008dce:	4631      	mov	r1, r6
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f001 ff0c 	bl	800abf0 <__pow5mult>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	f43f aea8 	beq.w	8008b30 <_strtod_l+0x490>
 8008de0:	4601      	mov	r1, r0
 8008de2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008de4:	4620      	mov	r0, r4
 8008de6:	f001 fe59 	bl	800aa9c <__multiply>
 8008dea:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dec:	2800      	cmp	r0, #0
 8008dee:	f43f ae9f 	beq.w	8008b30 <_strtod_l+0x490>
 8008df2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008df4:	4620      	mov	r0, r4
 8008df6:	f001 fd39 	bl	800a86c <_Bfree>
 8008dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfc:	9318      	str	r3, [sp, #96]	; 0x60
 8008dfe:	f1b8 0f00 	cmp.w	r8, #0
 8008e02:	f300 808c 	bgt.w	8008f1e <_strtod_l+0x87e>
 8008e06:	9b06      	ldr	r3, [sp, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	dd08      	ble.n	8008e1e <_strtod_l+0x77e>
 8008e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e0e:	9905      	ldr	r1, [sp, #20]
 8008e10:	4620      	mov	r0, r4
 8008e12:	f001 feed 	bl	800abf0 <__pow5mult>
 8008e16:	9005      	str	r0, [sp, #20]
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	f43f ae89 	beq.w	8008b30 <_strtod_l+0x490>
 8008e1e:	2f00      	cmp	r7, #0
 8008e20:	dd08      	ble.n	8008e34 <_strtod_l+0x794>
 8008e22:	9905      	ldr	r1, [sp, #20]
 8008e24:	463a      	mov	r2, r7
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 ff3c 	bl	800aca4 <__lshift>
 8008e2c:	9005      	str	r0, [sp, #20]
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f43f ae7e 	beq.w	8008b30 <_strtod_l+0x490>
 8008e34:	f1b9 0f00 	cmp.w	r9, #0
 8008e38:	dd08      	ble.n	8008e4c <_strtod_l+0x7ac>
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	464a      	mov	r2, r9
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f001 ff30 	bl	800aca4 <__lshift>
 8008e44:	4606      	mov	r6, r0
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f43f ae72 	beq.w	8008b30 <_strtod_l+0x490>
 8008e4c:	9a05      	ldr	r2, [sp, #20]
 8008e4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e50:	4620      	mov	r0, r4
 8008e52:	f001 ffb3 	bl	800adbc <__mdiff>
 8008e56:	4605      	mov	r5, r0
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f43f ae69 	beq.w	8008b30 <_strtod_l+0x490>
 8008e5e:	68c3      	ldr	r3, [r0, #12]
 8008e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e62:	2300      	movs	r3, #0
 8008e64:	60c3      	str	r3, [r0, #12]
 8008e66:	4631      	mov	r1, r6
 8008e68:	f001 ff8c 	bl	800ad84 <__mcmp>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	da60      	bge.n	8008f32 <_strtod_l+0x892>
 8008e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e72:	ea53 030a 	orrs.w	r3, r3, sl
 8008e76:	f040 8082 	bne.w	8008f7e <_strtod_l+0x8de>
 8008e7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d17d      	bne.n	8008f7e <_strtod_l+0x8de>
 8008e82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e86:	0d1b      	lsrs	r3, r3, #20
 8008e88:	051b      	lsls	r3, r3, #20
 8008e8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008e8e:	d976      	bls.n	8008f7e <_strtod_l+0x8de>
 8008e90:	696b      	ldr	r3, [r5, #20]
 8008e92:	b913      	cbnz	r3, 8008e9a <_strtod_l+0x7fa>
 8008e94:	692b      	ldr	r3, [r5, #16]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	dd71      	ble.n	8008f7e <_strtod_l+0x8de>
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f001 ff00 	bl	800aca4 <__lshift>
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	f001 ff6c 	bl	800ad84 <__mcmp>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	dd66      	ble.n	8008f7e <_strtod_l+0x8de>
 8008eb0:	9904      	ldr	r1, [sp, #16]
 8008eb2:	4a53      	ldr	r2, [pc, #332]	; (8009000 <_strtod_l+0x960>)
 8008eb4:	465b      	mov	r3, fp
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	f000 8081 	beq.w	8008fbe <_strtod_l+0x91e>
 8008ebc:	ea02 010b 	and.w	r1, r2, fp
 8008ec0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ec4:	dc7b      	bgt.n	8008fbe <_strtod_l+0x91e>
 8008ec6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008eca:	f77f aea9 	ble.w	8008c20 <_strtod_l+0x580>
 8008ece:	4b4d      	ldr	r3, [pc, #308]	; (8009004 <_strtod_l+0x964>)
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f7f7 fbb7 	bl	8000648 <__aeabi_dmul>
 8008eda:	460b      	mov	r3, r1
 8008edc:	4303      	orrs	r3, r0
 8008ede:	bf08      	it	eq
 8008ee0:	2322      	moveq	r3, #34	; 0x22
 8008ee2:	4682      	mov	sl, r0
 8008ee4:	468b      	mov	fp, r1
 8008ee6:	bf08      	it	eq
 8008ee8:	6023      	streq	r3, [r4, #0]
 8008eea:	e62b      	b.n	8008b44 <_strtod_l+0x4a4>
 8008eec:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	ea03 0a0a 	and.w	sl, r3, sl
 8008ef8:	e6e3      	b.n	8008cc2 <_strtod_l+0x622>
 8008efa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008efe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008f02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008f06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008f0a:	fa01 f308 	lsl.w	r3, r1, r8
 8008f0e:	9308      	str	r3, [sp, #32]
 8008f10:	910d      	str	r1, [sp, #52]	; 0x34
 8008f12:	e746      	b.n	8008da2 <_strtod_l+0x702>
 8008f14:	2300      	movs	r3, #0
 8008f16:	9308      	str	r3, [sp, #32]
 8008f18:	2301      	movs	r3, #1
 8008f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8008f1c:	e741      	b.n	8008da2 <_strtod_l+0x702>
 8008f1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f20:	4642      	mov	r2, r8
 8008f22:	4620      	mov	r0, r4
 8008f24:	f001 febe 	bl	800aca4 <__lshift>
 8008f28:	9018      	str	r0, [sp, #96]	; 0x60
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	f47f af6b 	bne.w	8008e06 <_strtod_l+0x766>
 8008f30:	e5fe      	b.n	8008b30 <_strtod_l+0x490>
 8008f32:	465f      	mov	r7, fp
 8008f34:	d16e      	bne.n	8009014 <_strtod_l+0x974>
 8008f36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f3c:	b342      	cbz	r2, 8008f90 <_strtod_l+0x8f0>
 8008f3e:	4a32      	ldr	r2, [pc, #200]	; (8009008 <_strtod_l+0x968>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d128      	bne.n	8008f96 <_strtod_l+0x8f6>
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	4651      	mov	r1, sl
 8008f48:	b1eb      	cbz	r3, 8008f86 <_strtod_l+0x8e6>
 8008f4a:	4b2d      	ldr	r3, [pc, #180]	; (8009000 <_strtod_l+0x960>)
 8008f4c:	403b      	ands	r3, r7
 8008f4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f52:	f04f 32ff 	mov.w	r2, #4294967295
 8008f56:	d819      	bhi.n	8008f8c <_strtod_l+0x8ec>
 8008f58:	0d1b      	lsrs	r3, r3, #20
 8008f5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f62:	4299      	cmp	r1, r3
 8008f64:	d117      	bne.n	8008f96 <_strtod_l+0x8f6>
 8008f66:	4b29      	ldr	r3, [pc, #164]	; (800900c <_strtod_l+0x96c>)
 8008f68:	429f      	cmp	r7, r3
 8008f6a:	d102      	bne.n	8008f72 <_strtod_l+0x8d2>
 8008f6c:	3101      	adds	r1, #1
 8008f6e:	f43f addf 	beq.w	8008b30 <_strtod_l+0x490>
 8008f72:	4b23      	ldr	r3, [pc, #140]	; (8009000 <_strtod_l+0x960>)
 8008f74:	403b      	ands	r3, r7
 8008f76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008f7a:	f04f 0a00 	mov.w	sl, #0
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1a4      	bne.n	8008ece <_strtod_l+0x82e>
 8008f84:	e5de      	b.n	8008b44 <_strtod_l+0x4a4>
 8008f86:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8a:	e7ea      	b.n	8008f62 <_strtod_l+0x8c2>
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	e7e8      	b.n	8008f62 <_strtod_l+0x8c2>
 8008f90:	ea53 030a 	orrs.w	r3, r3, sl
 8008f94:	d08c      	beq.n	8008eb0 <_strtod_l+0x810>
 8008f96:	9b08      	ldr	r3, [sp, #32]
 8008f98:	b1db      	cbz	r3, 8008fd2 <_strtod_l+0x932>
 8008f9a:	423b      	tst	r3, r7
 8008f9c:	d0ef      	beq.n	8008f7e <_strtod_l+0x8de>
 8008f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa0:	9a04      	ldr	r2, [sp, #16]
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	4659      	mov	r1, fp
 8008fa6:	b1c3      	cbz	r3, 8008fda <_strtod_l+0x93a>
 8008fa8:	f7ff fb5c 	bl	8008664 <sulp>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	ec51 0b18 	vmov	r0, r1, d8
 8008fb4:	f7f7 f992 	bl	80002dc <__adddf3>
 8008fb8:	4682      	mov	sl, r0
 8008fba:	468b      	mov	fp, r1
 8008fbc:	e7df      	b.n	8008f7e <_strtod_l+0x8de>
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008fc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008fc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008fcc:	f04f 3aff 	mov.w	sl, #4294967295
 8008fd0:	e7d5      	b.n	8008f7e <_strtod_l+0x8de>
 8008fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd4:	ea13 0f0a 	tst.w	r3, sl
 8008fd8:	e7e0      	b.n	8008f9c <_strtod_l+0x8fc>
 8008fda:	f7ff fb43 	bl	8008664 <sulp>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	ec51 0b18 	vmov	r0, r1, d8
 8008fe6:	f7f7 f977 	bl	80002d8 <__aeabi_dsub>
 8008fea:	2200      	movs	r2, #0
 8008fec:	2300      	movs	r3, #0
 8008fee:	4682      	mov	sl, r0
 8008ff0:	468b      	mov	fp, r1
 8008ff2:	f7f7 fd91 	bl	8000b18 <__aeabi_dcmpeq>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d0c1      	beq.n	8008f7e <_strtod_l+0x8de>
 8008ffa:	e611      	b.n	8008c20 <_strtod_l+0x580>
 8008ffc:	fffffc02 	.word	0xfffffc02
 8009000:	7ff00000 	.word	0x7ff00000
 8009004:	39500000 	.word	0x39500000
 8009008:	000fffff 	.word	0x000fffff
 800900c:	7fefffff 	.word	0x7fefffff
 8009010:	0800c320 	.word	0x0800c320
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	f002 f832 	bl	800b080 <__ratio>
 800901c:	ec59 8b10 	vmov	r8, r9, d0
 8009020:	ee10 0a10 	vmov	r0, s0
 8009024:	2200      	movs	r2, #0
 8009026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800902a:	4649      	mov	r1, r9
 800902c:	f7f7 fd88 	bl	8000b40 <__aeabi_dcmple>
 8009030:	2800      	cmp	r0, #0
 8009032:	d07a      	beq.n	800912a <_strtod_l+0xa8a>
 8009034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d04a      	beq.n	80090d0 <_strtod_l+0xa30>
 800903a:	4b95      	ldr	r3, [pc, #596]	; (8009290 <_strtod_l+0xbf0>)
 800903c:	2200      	movs	r2, #0
 800903e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009042:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009290 <_strtod_l+0xbf0>
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	4b92      	ldr	r3, [pc, #584]	; (8009294 <_strtod_l+0xbf4>)
 800904c:	403b      	ands	r3, r7
 800904e:	930d      	str	r3, [sp, #52]	; 0x34
 8009050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009052:	4b91      	ldr	r3, [pc, #580]	; (8009298 <_strtod_l+0xbf8>)
 8009054:	429a      	cmp	r2, r3
 8009056:	f040 80b0 	bne.w	80091ba <_strtod_l+0xb1a>
 800905a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800905e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009062:	ec4b ab10 	vmov	d0, sl, fp
 8009066:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800906a:	f001 ff31 	bl	800aed0 <__ulp>
 800906e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009072:	ec53 2b10 	vmov	r2, r3, d0
 8009076:	f7f7 fae7 	bl	8000648 <__aeabi_dmul>
 800907a:	4652      	mov	r2, sl
 800907c:	465b      	mov	r3, fp
 800907e:	f7f7 f92d 	bl	80002dc <__adddf3>
 8009082:	460b      	mov	r3, r1
 8009084:	4983      	ldr	r1, [pc, #524]	; (8009294 <_strtod_l+0xbf4>)
 8009086:	4a85      	ldr	r2, [pc, #532]	; (800929c <_strtod_l+0xbfc>)
 8009088:	4019      	ands	r1, r3
 800908a:	4291      	cmp	r1, r2
 800908c:	4682      	mov	sl, r0
 800908e:	d960      	bls.n	8009152 <_strtod_l+0xab2>
 8009090:	ee18 3a90 	vmov	r3, s17
 8009094:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009098:	4293      	cmp	r3, r2
 800909a:	d104      	bne.n	80090a6 <_strtod_l+0xa06>
 800909c:	ee18 3a10 	vmov	r3, s16
 80090a0:	3301      	adds	r3, #1
 80090a2:	f43f ad45 	beq.w	8008b30 <_strtod_l+0x490>
 80090a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80092a8 <_strtod_l+0xc08>
 80090aa:	f04f 3aff 	mov.w	sl, #4294967295
 80090ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090b0:	4620      	mov	r0, r4
 80090b2:	f001 fbdb 	bl	800a86c <_Bfree>
 80090b6:	9905      	ldr	r1, [sp, #20]
 80090b8:	4620      	mov	r0, r4
 80090ba:	f001 fbd7 	bl	800a86c <_Bfree>
 80090be:	4631      	mov	r1, r6
 80090c0:	4620      	mov	r0, r4
 80090c2:	f001 fbd3 	bl	800a86c <_Bfree>
 80090c6:	4629      	mov	r1, r5
 80090c8:	4620      	mov	r0, r4
 80090ca:	f001 fbcf 	bl	800a86c <_Bfree>
 80090ce:	e61a      	b.n	8008d06 <_strtod_l+0x666>
 80090d0:	f1ba 0f00 	cmp.w	sl, #0
 80090d4:	d11b      	bne.n	800910e <_strtod_l+0xa6e>
 80090d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090da:	b9f3      	cbnz	r3, 800911a <_strtod_l+0xa7a>
 80090dc:	4b6c      	ldr	r3, [pc, #432]	; (8009290 <_strtod_l+0xbf0>)
 80090de:	2200      	movs	r2, #0
 80090e0:	4640      	mov	r0, r8
 80090e2:	4649      	mov	r1, r9
 80090e4:	f7f7 fd22 	bl	8000b2c <__aeabi_dcmplt>
 80090e8:	b9d0      	cbnz	r0, 8009120 <_strtod_l+0xa80>
 80090ea:	4640      	mov	r0, r8
 80090ec:	4649      	mov	r1, r9
 80090ee:	4b6c      	ldr	r3, [pc, #432]	; (80092a0 <_strtod_l+0xc00>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	f7f7 faa9 	bl	8000648 <__aeabi_dmul>
 80090f6:	4680      	mov	r8, r0
 80090f8:	4689      	mov	r9, r1
 80090fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80090fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009102:	9315      	str	r3, [sp, #84]	; 0x54
 8009104:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009108:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800910c:	e79d      	b.n	800904a <_strtod_l+0x9aa>
 800910e:	f1ba 0f01 	cmp.w	sl, #1
 8009112:	d102      	bne.n	800911a <_strtod_l+0xa7a>
 8009114:	2f00      	cmp	r7, #0
 8009116:	f43f ad83 	beq.w	8008c20 <_strtod_l+0x580>
 800911a:	4b62      	ldr	r3, [pc, #392]	; (80092a4 <_strtod_l+0xc04>)
 800911c:	2200      	movs	r2, #0
 800911e:	e78e      	b.n	800903e <_strtod_l+0x99e>
 8009120:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80092a0 <_strtod_l+0xc00>
 8009124:	f04f 0800 	mov.w	r8, #0
 8009128:	e7e7      	b.n	80090fa <_strtod_l+0xa5a>
 800912a:	4b5d      	ldr	r3, [pc, #372]	; (80092a0 <_strtod_l+0xc00>)
 800912c:	4640      	mov	r0, r8
 800912e:	4649      	mov	r1, r9
 8009130:	2200      	movs	r2, #0
 8009132:	f7f7 fa89 	bl	8000648 <__aeabi_dmul>
 8009136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009138:	4680      	mov	r8, r0
 800913a:	4689      	mov	r9, r1
 800913c:	b933      	cbnz	r3, 800914c <_strtod_l+0xaac>
 800913e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009142:	900e      	str	r0, [sp, #56]	; 0x38
 8009144:	930f      	str	r3, [sp, #60]	; 0x3c
 8009146:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800914a:	e7dd      	b.n	8009108 <_strtod_l+0xa68>
 800914c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009150:	e7f9      	b.n	8009146 <_strtod_l+0xaa6>
 8009152:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1a8      	bne.n	80090ae <_strtod_l+0xa0e>
 800915c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009162:	0d1b      	lsrs	r3, r3, #20
 8009164:	051b      	lsls	r3, r3, #20
 8009166:	429a      	cmp	r2, r3
 8009168:	d1a1      	bne.n	80090ae <_strtod_l+0xa0e>
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 fdcb 	bl	8000d08 <__aeabi_d2lz>
 8009172:	f7f7 fa3b 	bl	80005ec <__aeabi_l2d>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f7f7 f8ab 	bl	80002d8 <__aeabi_dsub>
 8009182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009188:	ea43 030a 	orr.w	r3, r3, sl
 800918c:	4313      	orrs	r3, r2
 800918e:	4680      	mov	r8, r0
 8009190:	4689      	mov	r9, r1
 8009192:	d055      	beq.n	8009240 <_strtod_l+0xba0>
 8009194:	a336      	add	r3, pc, #216	; (adr r3, 8009270 <_strtod_l+0xbd0>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f7f7 fcc7 	bl	8000b2c <__aeabi_dcmplt>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f47f acd0 	bne.w	8008b44 <_strtod_l+0x4a4>
 80091a4:	a334      	add	r3, pc, #208	; (adr r3, 8009278 <_strtod_l+0xbd8>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	4640      	mov	r0, r8
 80091ac:	4649      	mov	r1, r9
 80091ae:	f7f7 fcdb 	bl	8000b68 <__aeabi_dcmpgt>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f43f af7b 	beq.w	80090ae <_strtod_l+0xa0e>
 80091b8:	e4c4      	b.n	8008b44 <_strtod_l+0x4a4>
 80091ba:	9b04      	ldr	r3, [sp, #16]
 80091bc:	b333      	cbz	r3, 800920c <_strtod_l+0xb6c>
 80091be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80091c4:	d822      	bhi.n	800920c <_strtod_l+0xb6c>
 80091c6:	a32e      	add	r3, pc, #184	; (adr r3, 8009280 <_strtod_l+0xbe0>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 fcb6 	bl	8000b40 <__aeabi_dcmple>
 80091d4:	b1a0      	cbz	r0, 8009200 <_strtod_l+0xb60>
 80091d6:	4649      	mov	r1, r9
 80091d8:	4640      	mov	r0, r8
 80091da:	f7f7 fd0d 	bl	8000bf8 <__aeabi_d2uiz>
 80091de:	2801      	cmp	r0, #1
 80091e0:	bf38      	it	cc
 80091e2:	2001      	movcc	r0, #1
 80091e4:	f7f7 f9b6 	bl	8000554 <__aeabi_ui2d>
 80091e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ea:	4680      	mov	r8, r0
 80091ec:	4689      	mov	r9, r1
 80091ee:	bb23      	cbnz	r3, 800923a <_strtod_l+0xb9a>
 80091f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091f4:	9010      	str	r0, [sp, #64]	; 0x40
 80091f6:	9311      	str	r3, [sp, #68]	; 0x44
 80091f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009204:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	9309      	str	r3, [sp, #36]	; 0x24
 800920c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009210:	eeb0 0a48 	vmov.f32	s0, s16
 8009214:	eef0 0a68 	vmov.f32	s1, s17
 8009218:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800921c:	f001 fe58 	bl	800aed0 <__ulp>
 8009220:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009224:	ec53 2b10 	vmov	r2, r3, d0
 8009228:	f7f7 fa0e 	bl	8000648 <__aeabi_dmul>
 800922c:	ec53 2b18 	vmov	r2, r3, d8
 8009230:	f7f7 f854 	bl	80002dc <__adddf3>
 8009234:	4682      	mov	sl, r0
 8009236:	468b      	mov	fp, r1
 8009238:	e78d      	b.n	8009156 <_strtod_l+0xab6>
 800923a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800923e:	e7db      	b.n	80091f8 <_strtod_l+0xb58>
 8009240:	a311      	add	r3, pc, #68	; (adr r3, 8009288 <_strtod_l+0xbe8>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7f7 fc71 	bl	8000b2c <__aeabi_dcmplt>
 800924a:	e7b2      	b.n	80091b2 <_strtod_l+0xb12>
 800924c:	2300      	movs	r3, #0
 800924e:	930a      	str	r3, [sp, #40]	; 0x28
 8009250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	f7ff ba6b 	b.w	8008730 <_strtod_l+0x90>
 800925a:	2a65      	cmp	r2, #101	; 0x65
 800925c:	f43f ab5f 	beq.w	800891e <_strtod_l+0x27e>
 8009260:	2a45      	cmp	r2, #69	; 0x45
 8009262:	f43f ab5c 	beq.w	800891e <_strtod_l+0x27e>
 8009266:	2301      	movs	r3, #1
 8009268:	f7ff bb94 	b.w	8008994 <_strtod_l+0x2f4>
 800926c:	f3af 8000 	nop.w
 8009270:	94a03595 	.word	0x94a03595
 8009274:	3fdfffff 	.word	0x3fdfffff
 8009278:	35afe535 	.word	0x35afe535
 800927c:	3fe00000 	.word	0x3fe00000
 8009280:	ffc00000 	.word	0xffc00000
 8009284:	41dfffff 	.word	0x41dfffff
 8009288:	94a03595 	.word	0x94a03595
 800928c:	3fcfffff 	.word	0x3fcfffff
 8009290:	3ff00000 	.word	0x3ff00000
 8009294:	7ff00000 	.word	0x7ff00000
 8009298:	7fe00000 	.word	0x7fe00000
 800929c:	7c9fffff 	.word	0x7c9fffff
 80092a0:	3fe00000 	.word	0x3fe00000
 80092a4:	bff00000 	.word	0xbff00000
 80092a8:	7fefffff 	.word	0x7fefffff

080092ac <_strtod_r>:
 80092ac:	4b01      	ldr	r3, [pc, #4]	; (80092b4 <_strtod_r+0x8>)
 80092ae:	f7ff b9f7 	b.w	80086a0 <_strtod_l>
 80092b2:	bf00      	nop
 80092b4:	20000074 	.word	0x20000074

080092b8 <_strtol_l.constprop.0>:
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092be:	d001      	beq.n	80092c4 <_strtol_l.constprop.0+0xc>
 80092c0:	2b24      	cmp	r3, #36	; 0x24
 80092c2:	d906      	bls.n	80092d2 <_strtol_l.constprop.0+0x1a>
 80092c4:	f7fe fafc 	bl	80078c0 <__errno>
 80092c8:	2316      	movs	r3, #22
 80092ca:	6003      	str	r3, [r0, #0]
 80092cc:	2000      	movs	r0, #0
 80092ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80093b8 <_strtol_l.constprop.0+0x100>
 80092d6:	460d      	mov	r5, r1
 80092d8:	462e      	mov	r6, r5
 80092da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80092e2:	f017 0708 	ands.w	r7, r7, #8
 80092e6:	d1f7      	bne.n	80092d8 <_strtol_l.constprop.0+0x20>
 80092e8:	2c2d      	cmp	r4, #45	; 0x2d
 80092ea:	d132      	bne.n	8009352 <_strtol_l.constprop.0+0x9a>
 80092ec:	782c      	ldrb	r4, [r5, #0]
 80092ee:	2701      	movs	r7, #1
 80092f0:	1cb5      	adds	r5, r6, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d05b      	beq.n	80093ae <_strtol_l.constprop.0+0xf6>
 80092f6:	2b10      	cmp	r3, #16
 80092f8:	d109      	bne.n	800930e <_strtol_l.constprop.0+0x56>
 80092fa:	2c30      	cmp	r4, #48	; 0x30
 80092fc:	d107      	bne.n	800930e <_strtol_l.constprop.0+0x56>
 80092fe:	782c      	ldrb	r4, [r5, #0]
 8009300:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009304:	2c58      	cmp	r4, #88	; 0x58
 8009306:	d14d      	bne.n	80093a4 <_strtol_l.constprop.0+0xec>
 8009308:	786c      	ldrb	r4, [r5, #1]
 800930a:	2310      	movs	r3, #16
 800930c:	3502      	adds	r5, #2
 800930e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009312:	f108 38ff 	add.w	r8, r8, #4294967295
 8009316:	f04f 0c00 	mov.w	ip, #0
 800931a:	fbb8 f9f3 	udiv	r9, r8, r3
 800931e:	4666      	mov	r6, ip
 8009320:	fb03 8a19 	mls	sl, r3, r9, r8
 8009324:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009328:	f1be 0f09 	cmp.w	lr, #9
 800932c:	d816      	bhi.n	800935c <_strtol_l.constprop.0+0xa4>
 800932e:	4674      	mov	r4, lr
 8009330:	42a3      	cmp	r3, r4
 8009332:	dd24      	ble.n	800937e <_strtol_l.constprop.0+0xc6>
 8009334:	f1bc 0f00 	cmp.w	ip, #0
 8009338:	db1e      	blt.n	8009378 <_strtol_l.constprop.0+0xc0>
 800933a:	45b1      	cmp	r9, r6
 800933c:	d31c      	bcc.n	8009378 <_strtol_l.constprop.0+0xc0>
 800933e:	d101      	bne.n	8009344 <_strtol_l.constprop.0+0x8c>
 8009340:	45a2      	cmp	sl, r4
 8009342:	db19      	blt.n	8009378 <_strtol_l.constprop.0+0xc0>
 8009344:	fb06 4603 	mla	r6, r6, r3, r4
 8009348:	f04f 0c01 	mov.w	ip, #1
 800934c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009350:	e7e8      	b.n	8009324 <_strtol_l.constprop.0+0x6c>
 8009352:	2c2b      	cmp	r4, #43	; 0x2b
 8009354:	bf04      	itt	eq
 8009356:	782c      	ldrbeq	r4, [r5, #0]
 8009358:	1cb5      	addeq	r5, r6, #2
 800935a:	e7ca      	b.n	80092f2 <_strtol_l.constprop.0+0x3a>
 800935c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009360:	f1be 0f19 	cmp.w	lr, #25
 8009364:	d801      	bhi.n	800936a <_strtol_l.constprop.0+0xb2>
 8009366:	3c37      	subs	r4, #55	; 0x37
 8009368:	e7e2      	b.n	8009330 <_strtol_l.constprop.0+0x78>
 800936a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800936e:	f1be 0f19 	cmp.w	lr, #25
 8009372:	d804      	bhi.n	800937e <_strtol_l.constprop.0+0xc6>
 8009374:	3c57      	subs	r4, #87	; 0x57
 8009376:	e7db      	b.n	8009330 <_strtol_l.constprop.0+0x78>
 8009378:	f04f 3cff 	mov.w	ip, #4294967295
 800937c:	e7e6      	b.n	800934c <_strtol_l.constprop.0+0x94>
 800937e:	f1bc 0f00 	cmp.w	ip, #0
 8009382:	da05      	bge.n	8009390 <_strtol_l.constprop.0+0xd8>
 8009384:	2322      	movs	r3, #34	; 0x22
 8009386:	6003      	str	r3, [r0, #0]
 8009388:	4646      	mov	r6, r8
 800938a:	b942      	cbnz	r2, 800939e <_strtol_l.constprop.0+0xe6>
 800938c:	4630      	mov	r0, r6
 800938e:	e79e      	b.n	80092ce <_strtol_l.constprop.0+0x16>
 8009390:	b107      	cbz	r7, 8009394 <_strtol_l.constprop.0+0xdc>
 8009392:	4276      	negs	r6, r6
 8009394:	2a00      	cmp	r2, #0
 8009396:	d0f9      	beq.n	800938c <_strtol_l.constprop.0+0xd4>
 8009398:	f1bc 0f00 	cmp.w	ip, #0
 800939c:	d000      	beq.n	80093a0 <_strtol_l.constprop.0+0xe8>
 800939e:	1e69      	subs	r1, r5, #1
 80093a0:	6011      	str	r1, [r2, #0]
 80093a2:	e7f3      	b.n	800938c <_strtol_l.constprop.0+0xd4>
 80093a4:	2430      	movs	r4, #48	; 0x30
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1b1      	bne.n	800930e <_strtol_l.constprop.0+0x56>
 80093aa:	2308      	movs	r3, #8
 80093ac:	e7af      	b.n	800930e <_strtol_l.constprop.0+0x56>
 80093ae:	2c30      	cmp	r4, #48	; 0x30
 80093b0:	d0a5      	beq.n	80092fe <_strtol_l.constprop.0+0x46>
 80093b2:	230a      	movs	r3, #10
 80093b4:	e7ab      	b.n	800930e <_strtol_l.constprop.0+0x56>
 80093b6:	bf00      	nop
 80093b8:	0800c349 	.word	0x0800c349

080093bc <_strtol_r>:
 80093bc:	f7ff bf7c 	b.w	80092b8 <_strtol_l.constprop.0>

080093c0 <quorem>:
 80093c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	6903      	ldr	r3, [r0, #16]
 80093c6:	690c      	ldr	r4, [r1, #16]
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	4607      	mov	r7, r0
 80093cc:	f2c0 8081 	blt.w	80094d2 <quorem+0x112>
 80093d0:	3c01      	subs	r4, #1
 80093d2:	f101 0814 	add.w	r8, r1, #20
 80093d6:	f100 0514 	add.w	r5, r0, #20
 80093da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093e8:	3301      	adds	r3, #1
 80093ea:	429a      	cmp	r2, r3
 80093ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80093f8:	d331      	bcc.n	800945e <quorem+0x9e>
 80093fa:	f04f 0e00 	mov.w	lr, #0
 80093fe:	4640      	mov	r0, r8
 8009400:	46ac      	mov	ip, r5
 8009402:	46f2      	mov	sl, lr
 8009404:	f850 2b04 	ldr.w	r2, [r0], #4
 8009408:	b293      	uxth	r3, r2
 800940a:	fb06 e303 	mla	r3, r6, r3, lr
 800940e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009412:	b29b      	uxth	r3, r3
 8009414:	ebaa 0303 	sub.w	r3, sl, r3
 8009418:	f8dc a000 	ldr.w	sl, [ip]
 800941c:	0c12      	lsrs	r2, r2, #16
 800941e:	fa13 f38a 	uxtah	r3, r3, sl
 8009422:	fb06 e202 	mla	r2, r6, r2, lr
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	9b00      	ldr	r3, [sp, #0]
 800942a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800942e:	b292      	uxth	r2, r2
 8009430:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009438:	f8bd 3000 	ldrh.w	r3, [sp]
 800943c:	4581      	cmp	r9, r0
 800943e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009442:	f84c 3b04 	str.w	r3, [ip], #4
 8009446:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800944a:	d2db      	bcs.n	8009404 <quorem+0x44>
 800944c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009450:	b92b      	cbnz	r3, 800945e <quorem+0x9e>
 8009452:	9b01      	ldr	r3, [sp, #4]
 8009454:	3b04      	subs	r3, #4
 8009456:	429d      	cmp	r5, r3
 8009458:	461a      	mov	r2, r3
 800945a:	d32e      	bcc.n	80094ba <quorem+0xfa>
 800945c:	613c      	str	r4, [r7, #16]
 800945e:	4638      	mov	r0, r7
 8009460:	f001 fc90 	bl	800ad84 <__mcmp>
 8009464:	2800      	cmp	r0, #0
 8009466:	db24      	blt.n	80094b2 <quorem+0xf2>
 8009468:	3601      	adds	r6, #1
 800946a:	4628      	mov	r0, r5
 800946c:	f04f 0c00 	mov.w	ip, #0
 8009470:	f858 2b04 	ldr.w	r2, [r8], #4
 8009474:	f8d0 e000 	ldr.w	lr, [r0]
 8009478:	b293      	uxth	r3, r2
 800947a:	ebac 0303 	sub.w	r3, ip, r3
 800947e:	0c12      	lsrs	r2, r2, #16
 8009480:	fa13 f38e 	uxtah	r3, r3, lr
 8009484:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800948c:	b29b      	uxth	r3, r3
 800948e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009492:	45c1      	cmp	r9, r8
 8009494:	f840 3b04 	str.w	r3, [r0], #4
 8009498:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800949c:	d2e8      	bcs.n	8009470 <quorem+0xb0>
 800949e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094a6:	b922      	cbnz	r2, 80094b2 <quorem+0xf2>
 80094a8:	3b04      	subs	r3, #4
 80094aa:	429d      	cmp	r5, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	d30a      	bcc.n	80094c6 <quorem+0x106>
 80094b0:	613c      	str	r4, [r7, #16]
 80094b2:	4630      	mov	r0, r6
 80094b4:	b003      	add	sp, #12
 80094b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ba:	6812      	ldr	r2, [r2, #0]
 80094bc:	3b04      	subs	r3, #4
 80094be:	2a00      	cmp	r2, #0
 80094c0:	d1cc      	bne.n	800945c <quorem+0x9c>
 80094c2:	3c01      	subs	r4, #1
 80094c4:	e7c7      	b.n	8009456 <quorem+0x96>
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	3b04      	subs	r3, #4
 80094ca:	2a00      	cmp	r2, #0
 80094cc:	d1f0      	bne.n	80094b0 <quorem+0xf0>
 80094ce:	3c01      	subs	r4, #1
 80094d0:	e7eb      	b.n	80094aa <quorem+0xea>
 80094d2:	2000      	movs	r0, #0
 80094d4:	e7ee      	b.n	80094b4 <quorem+0xf4>
	...

080094d8 <_dtoa_r>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	ed2d 8b04 	vpush	{d8-d9}
 80094e0:	ec57 6b10 	vmov	r6, r7, d0
 80094e4:	b093      	sub	sp, #76	; 0x4c
 80094e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094ec:	9106      	str	r1, [sp, #24]
 80094ee:	ee10 aa10 	vmov	sl, s0
 80094f2:	4604      	mov	r4, r0
 80094f4:	9209      	str	r2, [sp, #36]	; 0x24
 80094f6:	930c      	str	r3, [sp, #48]	; 0x30
 80094f8:	46bb      	mov	fp, r7
 80094fa:	b975      	cbnz	r5, 800951a <_dtoa_r+0x42>
 80094fc:	2010      	movs	r0, #16
 80094fe:	f001 f94d 	bl	800a79c <malloc>
 8009502:	4602      	mov	r2, r0
 8009504:	6260      	str	r0, [r4, #36]	; 0x24
 8009506:	b920      	cbnz	r0, 8009512 <_dtoa_r+0x3a>
 8009508:	4ba7      	ldr	r3, [pc, #668]	; (80097a8 <_dtoa_r+0x2d0>)
 800950a:	21ea      	movs	r1, #234	; 0xea
 800950c:	48a7      	ldr	r0, [pc, #668]	; (80097ac <_dtoa_r+0x2d4>)
 800950e:	f002 f8bd 	bl	800b68c <__assert_func>
 8009512:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009516:	6005      	str	r5, [r0, #0]
 8009518:	60c5      	str	r5, [r0, #12]
 800951a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800951c:	6819      	ldr	r1, [r3, #0]
 800951e:	b151      	cbz	r1, 8009536 <_dtoa_r+0x5e>
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	604a      	str	r2, [r1, #4]
 8009524:	2301      	movs	r3, #1
 8009526:	4093      	lsls	r3, r2
 8009528:	608b      	str	r3, [r1, #8]
 800952a:	4620      	mov	r0, r4
 800952c:	f001 f99e 	bl	800a86c <_Bfree>
 8009530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	1e3b      	subs	r3, r7, #0
 8009538:	bfaa      	itet	ge
 800953a:	2300      	movge	r3, #0
 800953c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009540:	f8c8 3000 	strge.w	r3, [r8]
 8009544:	4b9a      	ldr	r3, [pc, #616]	; (80097b0 <_dtoa_r+0x2d8>)
 8009546:	bfbc      	itt	lt
 8009548:	2201      	movlt	r2, #1
 800954a:	f8c8 2000 	strlt.w	r2, [r8]
 800954e:	ea33 030b 	bics.w	r3, r3, fp
 8009552:	d11b      	bne.n	800958c <_dtoa_r+0xb4>
 8009554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009556:	f242 730f 	movw	r3, #9999	; 0x270f
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009560:	4333      	orrs	r3, r6
 8009562:	f000 8592 	beq.w	800a08a <_dtoa_r+0xbb2>
 8009566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009568:	b963      	cbnz	r3, 8009584 <_dtoa_r+0xac>
 800956a:	4b92      	ldr	r3, [pc, #584]	; (80097b4 <_dtoa_r+0x2dc>)
 800956c:	e022      	b.n	80095b4 <_dtoa_r+0xdc>
 800956e:	4b92      	ldr	r3, [pc, #584]	; (80097b8 <_dtoa_r+0x2e0>)
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	3308      	adds	r3, #8
 8009574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	9801      	ldr	r0, [sp, #4]
 800957a:	b013      	add	sp, #76	; 0x4c
 800957c:	ecbd 8b04 	vpop	{d8-d9}
 8009580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009584:	4b8b      	ldr	r3, [pc, #556]	; (80097b4 <_dtoa_r+0x2dc>)
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	3303      	adds	r3, #3
 800958a:	e7f3      	b.n	8009574 <_dtoa_r+0x9c>
 800958c:	2200      	movs	r2, #0
 800958e:	2300      	movs	r3, #0
 8009590:	4650      	mov	r0, sl
 8009592:	4659      	mov	r1, fp
 8009594:	f7f7 fac0 	bl	8000b18 <__aeabi_dcmpeq>
 8009598:	ec4b ab19 	vmov	d9, sl, fp
 800959c:	4680      	mov	r8, r0
 800959e:	b158      	cbz	r0, 80095b8 <_dtoa_r+0xe0>
 80095a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095a2:	2301      	movs	r3, #1
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 856b 	beq.w	800a084 <_dtoa_r+0xbac>
 80095ae:	4883      	ldr	r0, [pc, #524]	; (80097bc <_dtoa_r+0x2e4>)
 80095b0:	6018      	str	r0, [r3, #0]
 80095b2:	1e43      	subs	r3, r0, #1
 80095b4:	9301      	str	r3, [sp, #4]
 80095b6:	e7df      	b.n	8009578 <_dtoa_r+0xa0>
 80095b8:	ec4b ab10 	vmov	d0, sl, fp
 80095bc:	aa10      	add	r2, sp, #64	; 0x40
 80095be:	a911      	add	r1, sp, #68	; 0x44
 80095c0:	4620      	mov	r0, r4
 80095c2:	f001 fd01 	bl	800afc8 <__d2b>
 80095c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80095ca:	ee08 0a10 	vmov	s16, r0
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	f000 8084 	beq.w	80096dc <_dtoa_r+0x204>
 80095d4:	ee19 3a90 	vmov	r3, s19
 80095d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80095e0:	4656      	mov	r6, sl
 80095e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80095e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80095ee:	4b74      	ldr	r3, [pc, #464]	; (80097c0 <_dtoa_r+0x2e8>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	4630      	mov	r0, r6
 80095f4:	4639      	mov	r1, r7
 80095f6:	f7f6 fe6f 	bl	80002d8 <__aeabi_dsub>
 80095fa:	a365      	add	r3, pc, #404	; (adr r3, 8009790 <_dtoa_r+0x2b8>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f7 f822 	bl	8000648 <__aeabi_dmul>
 8009604:	a364      	add	r3, pc, #400	; (adr r3, 8009798 <_dtoa_r+0x2c0>)
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f7f6 fe67 	bl	80002dc <__adddf3>
 800960e:	4606      	mov	r6, r0
 8009610:	4628      	mov	r0, r5
 8009612:	460f      	mov	r7, r1
 8009614:	f7f6 ffae 	bl	8000574 <__aeabi_i2d>
 8009618:	a361      	add	r3, pc, #388	; (adr r3, 80097a0 <_dtoa_r+0x2c8>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f7 f813 	bl	8000648 <__aeabi_dmul>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f6 fe57 	bl	80002dc <__adddf3>
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	f7f7 fab9 	bl	8000ba8 <__aeabi_d2iz>
 8009636:	2200      	movs	r2, #0
 8009638:	9000      	str	r0, [sp, #0]
 800963a:	2300      	movs	r3, #0
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f7f7 fa74 	bl	8000b2c <__aeabi_dcmplt>
 8009644:	b150      	cbz	r0, 800965c <_dtoa_r+0x184>
 8009646:	9800      	ldr	r0, [sp, #0]
 8009648:	f7f6 ff94 	bl	8000574 <__aeabi_i2d>
 800964c:	4632      	mov	r2, r6
 800964e:	463b      	mov	r3, r7
 8009650:	f7f7 fa62 	bl	8000b18 <__aeabi_dcmpeq>
 8009654:	b910      	cbnz	r0, 800965c <_dtoa_r+0x184>
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	3b01      	subs	r3, #1
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	9b00      	ldr	r3, [sp, #0]
 800965e:	2b16      	cmp	r3, #22
 8009660:	d85a      	bhi.n	8009718 <_dtoa_r+0x240>
 8009662:	9a00      	ldr	r2, [sp, #0]
 8009664:	4b57      	ldr	r3, [pc, #348]	; (80097c4 <_dtoa_r+0x2ec>)
 8009666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	ec51 0b19 	vmov	r0, r1, d9
 8009672:	f7f7 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 8009676:	2800      	cmp	r0, #0
 8009678:	d050      	beq.n	800971c <_dtoa_r+0x244>
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	3b01      	subs	r3, #1
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	2300      	movs	r3, #0
 8009682:	930b      	str	r3, [sp, #44]	; 0x2c
 8009684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009686:	1b5d      	subs	r5, r3, r5
 8009688:	1e6b      	subs	r3, r5, #1
 800968a:	9305      	str	r3, [sp, #20]
 800968c:	bf45      	ittet	mi
 800968e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009692:	9304      	strmi	r3, [sp, #16]
 8009694:	2300      	movpl	r3, #0
 8009696:	2300      	movmi	r3, #0
 8009698:	bf4c      	ite	mi
 800969a:	9305      	strmi	r3, [sp, #20]
 800969c:	9304      	strpl	r3, [sp, #16]
 800969e:	9b00      	ldr	r3, [sp, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	db3d      	blt.n	8009720 <_dtoa_r+0x248>
 80096a4:	9b05      	ldr	r3, [sp, #20]
 80096a6:	9a00      	ldr	r2, [sp, #0]
 80096a8:	920a      	str	r2, [sp, #40]	; 0x28
 80096aa:	4413      	add	r3, r2
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	2300      	movs	r3, #0
 80096b0:	9307      	str	r3, [sp, #28]
 80096b2:	9b06      	ldr	r3, [sp, #24]
 80096b4:	2b09      	cmp	r3, #9
 80096b6:	f200 8089 	bhi.w	80097cc <_dtoa_r+0x2f4>
 80096ba:	2b05      	cmp	r3, #5
 80096bc:	bfc4      	itt	gt
 80096be:	3b04      	subgt	r3, #4
 80096c0:	9306      	strgt	r3, [sp, #24]
 80096c2:	9b06      	ldr	r3, [sp, #24]
 80096c4:	f1a3 0302 	sub.w	r3, r3, #2
 80096c8:	bfcc      	ite	gt
 80096ca:	2500      	movgt	r5, #0
 80096cc:	2501      	movle	r5, #1
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	f200 8087 	bhi.w	80097e2 <_dtoa_r+0x30a>
 80096d4:	e8df f003 	tbb	[pc, r3]
 80096d8:	59383a2d 	.word	0x59383a2d
 80096dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80096e0:	441d      	add	r5, r3
 80096e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	bfc1      	itttt	gt
 80096ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80096f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80096f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80096fa:	bfda      	itte	le
 80096fc:	f1c3 0320 	rsble	r3, r3, #32
 8009700:	fa06 f003 	lslle.w	r0, r6, r3
 8009704:	4318      	orrgt	r0, r3
 8009706:	f7f6 ff25 	bl	8000554 <__aeabi_ui2d>
 800970a:	2301      	movs	r3, #1
 800970c:	4606      	mov	r6, r0
 800970e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009712:	3d01      	subs	r5, #1
 8009714:	930e      	str	r3, [sp, #56]	; 0x38
 8009716:	e76a      	b.n	80095ee <_dtoa_r+0x116>
 8009718:	2301      	movs	r3, #1
 800971a:	e7b2      	b.n	8009682 <_dtoa_r+0x1aa>
 800971c:	900b      	str	r0, [sp, #44]	; 0x2c
 800971e:	e7b1      	b.n	8009684 <_dtoa_r+0x1ac>
 8009720:	9b04      	ldr	r3, [sp, #16]
 8009722:	9a00      	ldr	r2, [sp, #0]
 8009724:	1a9b      	subs	r3, r3, r2
 8009726:	9304      	str	r3, [sp, #16]
 8009728:	4253      	negs	r3, r2
 800972a:	9307      	str	r3, [sp, #28]
 800972c:	2300      	movs	r3, #0
 800972e:	930a      	str	r3, [sp, #40]	; 0x28
 8009730:	e7bf      	b.n	80096b2 <_dtoa_r+0x1da>
 8009732:	2300      	movs	r3, #0
 8009734:	9308      	str	r3, [sp, #32]
 8009736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009738:	2b00      	cmp	r3, #0
 800973a:	dc55      	bgt.n	80097e8 <_dtoa_r+0x310>
 800973c:	2301      	movs	r3, #1
 800973e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009742:	461a      	mov	r2, r3
 8009744:	9209      	str	r2, [sp, #36]	; 0x24
 8009746:	e00c      	b.n	8009762 <_dtoa_r+0x28a>
 8009748:	2301      	movs	r3, #1
 800974a:	e7f3      	b.n	8009734 <_dtoa_r+0x25c>
 800974c:	2300      	movs	r3, #0
 800974e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	9b00      	ldr	r3, [sp, #0]
 8009754:	4413      	add	r3, r2
 8009756:	9302      	str	r3, [sp, #8]
 8009758:	3301      	adds	r3, #1
 800975a:	2b01      	cmp	r3, #1
 800975c:	9303      	str	r3, [sp, #12]
 800975e:	bfb8      	it	lt
 8009760:	2301      	movlt	r3, #1
 8009762:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009764:	2200      	movs	r2, #0
 8009766:	6042      	str	r2, [r0, #4]
 8009768:	2204      	movs	r2, #4
 800976a:	f102 0614 	add.w	r6, r2, #20
 800976e:	429e      	cmp	r6, r3
 8009770:	6841      	ldr	r1, [r0, #4]
 8009772:	d93d      	bls.n	80097f0 <_dtoa_r+0x318>
 8009774:	4620      	mov	r0, r4
 8009776:	f001 f839 	bl	800a7ec <_Balloc>
 800977a:	9001      	str	r0, [sp, #4]
 800977c:	2800      	cmp	r0, #0
 800977e:	d13b      	bne.n	80097f8 <_dtoa_r+0x320>
 8009780:	4b11      	ldr	r3, [pc, #68]	; (80097c8 <_dtoa_r+0x2f0>)
 8009782:	4602      	mov	r2, r0
 8009784:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009788:	e6c0      	b.n	800950c <_dtoa_r+0x34>
 800978a:	2301      	movs	r3, #1
 800978c:	e7df      	b.n	800974e <_dtoa_r+0x276>
 800978e:	bf00      	nop
 8009790:	636f4361 	.word	0x636f4361
 8009794:	3fd287a7 	.word	0x3fd287a7
 8009798:	8b60c8b3 	.word	0x8b60c8b3
 800979c:	3fc68a28 	.word	0x3fc68a28
 80097a0:	509f79fb 	.word	0x509f79fb
 80097a4:	3fd34413 	.word	0x3fd34413
 80097a8:	0800c456 	.word	0x0800c456
 80097ac:	0800c46d 	.word	0x0800c46d
 80097b0:	7ff00000 	.word	0x7ff00000
 80097b4:	0800c452 	.word	0x0800c452
 80097b8:	0800c449 	.word	0x0800c449
 80097bc:	0800c2c9 	.word	0x0800c2c9
 80097c0:	3ff80000 	.word	0x3ff80000
 80097c4:	0800c5d8 	.word	0x0800c5d8
 80097c8:	0800c4c8 	.word	0x0800c4c8
 80097cc:	2501      	movs	r5, #1
 80097ce:	2300      	movs	r3, #0
 80097d0:	9306      	str	r3, [sp, #24]
 80097d2:	9508      	str	r5, [sp, #32]
 80097d4:	f04f 33ff 	mov.w	r3, #4294967295
 80097d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097dc:	2200      	movs	r2, #0
 80097de:	2312      	movs	r3, #18
 80097e0:	e7b0      	b.n	8009744 <_dtoa_r+0x26c>
 80097e2:	2301      	movs	r3, #1
 80097e4:	9308      	str	r3, [sp, #32]
 80097e6:	e7f5      	b.n	80097d4 <_dtoa_r+0x2fc>
 80097e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097ee:	e7b8      	b.n	8009762 <_dtoa_r+0x28a>
 80097f0:	3101      	adds	r1, #1
 80097f2:	6041      	str	r1, [r0, #4]
 80097f4:	0052      	lsls	r2, r2, #1
 80097f6:	e7b8      	b.n	800976a <_dtoa_r+0x292>
 80097f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097fa:	9a01      	ldr	r2, [sp, #4]
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	9b03      	ldr	r3, [sp, #12]
 8009800:	2b0e      	cmp	r3, #14
 8009802:	f200 809d 	bhi.w	8009940 <_dtoa_r+0x468>
 8009806:	2d00      	cmp	r5, #0
 8009808:	f000 809a 	beq.w	8009940 <_dtoa_r+0x468>
 800980c:	9b00      	ldr	r3, [sp, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	dd32      	ble.n	8009878 <_dtoa_r+0x3a0>
 8009812:	4ab7      	ldr	r2, [pc, #732]	; (8009af0 <_dtoa_r+0x618>)
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800981c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009820:	9b00      	ldr	r3, [sp, #0]
 8009822:	05d8      	lsls	r0, r3, #23
 8009824:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009828:	d516      	bpl.n	8009858 <_dtoa_r+0x380>
 800982a:	4bb2      	ldr	r3, [pc, #712]	; (8009af4 <_dtoa_r+0x61c>)
 800982c:	ec51 0b19 	vmov	r0, r1, d9
 8009830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009834:	f7f7 f832 	bl	800089c <__aeabi_ddiv>
 8009838:	f007 070f 	and.w	r7, r7, #15
 800983c:	4682      	mov	sl, r0
 800983e:	468b      	mov	fp, r1
 8009840:	2503      	movs	r5, #3
 8009842:	4eac      	ldr	r6, [pc, #688]	; (8009af4 <_dtoa_r+0x61c>)
 8009844:	b957      	cbnz	r7, 800985c <_dtoa_r+0x384>
 8009846:	4642      	mov	r2, r8
 8009848:	464b      	mov	r3, r9
 800984a:	4650      	mov	r0, sl
 800984c:	4659      	mov	r1, fp
 800984e:	f7f7 f825 	bl	800089c <__aeabi_ddiv>
 8009852:	4682      	mov	sl, r0
 8009854:	468b      	mov	fp, r1
 8009856:	e028      	b.n	80098aa <_dtoa_r+0x3d2>
 8009858:	2502      	movs	r5, #2
 800985a:	e7f2      	b.n	8009842 <_dtoa_r+0x36a>
 800985c:	07f9      	lsls	r1, r7, #31
 800985e:	d508      	bpl.n	8009872 <_dtoa_r+0x39a>
 8009860:	4640      	mov	r0, r8
 8009862:	4649      	mov	r1, r9
 8009864:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009868:	f7f6 feee 	bl	8000648 <__aeabi_dmul>
 800986c:	3501      	adds	r5, #1
 800986e:	4680      	mov	r8, r0
 8009870:	4689      	mov	r9, r1
 8009872:	107f      	asrs	r7, r7, #1
 8009874:	3608      	adds	r6, #8
 8009876:	e7e5      	b.n	8009844 <_dtoa_r+0x36c>
 8009878:	f000 809b 	beq.w	80099b2 <_dtoa_r+0x4da>
 800987c:	9b00      	ldr	r3, [sp, #0]
 800987e:	4f9d      	ldr	r7, [pc, #628]	; (8009af4 <_dtoa_r+0x61c>)
 8009880:	425e      	negs	r6, r3
 8009882:	4b9b      	ldr	r3, [pc, #620]	; (8009af0 <_dtoa_r+0x618>)
 8009884:	f006 020f 	and.w	r2, r6, #15
 8009888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	ec51 0b19 	vmov	r0, r1, d9
 8009894:	f7f6 fed8 	bl	8000648 <__aeabi_dmul>
 8009898:	1136      	asrs	r6, r6, #4
 800989a:	4682      	mov	sl, r0
 800989c:	468b      	mov	fp, r1
 800989e:	2300      	movs	r3, #0
 80098a0:	2502      	movs	r5, #2
 80098a2:	2e00      	cmp	r6, #0
 80098a4:	d17a      	bne.n	800999c <_dtoa_r+0x4c4>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1d3      	bne.n	8009852 <_dtoa_r+0x37a>
 80098aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8082 	beq.w	80099b6 <_dtoa_r+0x4de>
 80098b2:	4b91      	ldr	r3, [pc, #580]	; (8009af8 <_dtoa_r+0x620>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	4650      	mov	r0, sl
 80098b8:	4659      	mov	r1, fp
 80098ba:	f7f7 f937 	bl	8000b2c <__aeabi_dcmplt>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d079      	beq.n	80099b6 <_dtoa_r+0x4de>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d076      	beq.n	80099b6 <_dtoa_r+0x4de>
 80098c8:	9b02      	ldr	r3, [sp, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dd36      	ble.n	800993c <_dtoa_r+0x464>
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	4650      	mov	r0, sl
 80098d2:	4659      	mov	r1, fp
 80098d4:	1e5f      	subs	r7, r3, #1
 80098d6:	2200      	movs	r2, #0
 80098d8:	4b88      	ldr	r3, [pc, #544]	; (8009afc <_dtoa_r+0x624>)
 80098da:	f7f6 feb5 	bl	8000648 <__aeabi_dmul>
 80098de:	9e02      	ldr	r6, [sp, #8]
 80098e0:	4682      	mov	sl, r0
 80098e2:	468b      	mov	fp, r1
 80098e4:	3501      	adds	r5, #1
 80098e6:	4628      	mov	r0, r5
 80098e8:	f7f6 fe44 	bl	8000574 <__aeabi_i2d>
 80098ec:	4652      	mov	r2, sl
 80098ee:	465b      	mov	r3, fp
 80098f0:	f7f6 feaa 	bl	8000648 <__aeabi_dmul>
 80098f4:	4b82      	ldr	r3, [pc, #520]	; (8009b00 <_dtoa_r+0x628>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	f7f6 fcf0 	bl	80002dc <__adddf3>
 80098fc:	46d0      	mov	r8, sl
 80098fe:	46d9      	mov	r9, fp
 8009900:	4682      	mov	sl, r0
 8009902:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009906:	2e00      	cmp	r6, #0
 8009908:	d158      	bne.n	80099bc <_dtoa_r+0x4e4>
 800990a:	4b7e      	ldr	r3, [pc, #504]	; (8009b04 <_dtoa_r+0x62c>)
 800990c:	2200      	movs	r2, #0
 800990e:	4640      	mov	r0, r8
 8009910:	4649      	mov	r1, r9
 8009912:	f7f6 fce1 	bl	80002d8 <__aeabi_dsub>
 8009916:	4652      	mov	r2, sl
 8009918:	465b      	mov	r3, fp
 800991a:	4680      	mov	r8, r0
 800991c:	4689      	mov	r9, r1
 800991e:	f7f7 f923 	bl	8000b68 <__aeabi_dcmpgt>
 8009922:	2800      	cmp	r0, #0
 8009924:	f040 8295 	bne.w	8009e52 <_dtoa_r+0x97a>
 8009928:	4652      	mov	r2, sl
 800992a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800992e:	4640      	mov	r0, r8
 8009930:	4649      	mov	r1, r9
 8009932:	f7f7 f8fb 	bl	8000b2c <__aeabi_dcmplt>
 8009936:	2800      	cmp	r0, #0
 8009938:	f040 8289 	bne.w	8009e4e <_dtoa_r+0x976>
 800993c:	ec5b ab19 	vmov	sl, fp, d9
 8009940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009942:	2b00      	cmp	r3, #0
 8009944:	f2c0 8148 	blt.w	8009bd8 <_dtoa_r+0x700>
 8009948:	9a00      	ldr	r2, [sp, #0]
 800994a:	2a0e      	cmp	r2, #14
 800994c:	f300 8144 	bgt.w	8009bd8 <_dtoa_r+0x700>
 8009950:	4b67      	ldr	r3, [pc, #412]	; (8009af0 <_dtoa_r+0x618>)
 8009952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009956:	e9d3 8900 	ldrd	r8, r9, [r3]
 800995a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995c:	2b00      	cmp	r3, #0
 800995e:	f280 80d5 	bge.w	8009b0c <_dtoa_r+0x634>
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f300 80d1 	bgt.w	8009b0c <_dtoa_r+0x634>
 800996a:	f040 826f 	bne.w	8009e4c <_dtoa_r+0x974>
 800996e:	4b65      	ldr	r3, [pc, #404]	; (8009b04 <_dtoa_r+0x62c>)
 8009970:	2200      	movs	r2, #0
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	f7f6 fe67 	bl	8000648 <__aeabi_dmul>
 800997a:	4652      	mov	r2, sl
 800997c:	465b      	mov	r3, fp
 800997e:	f7f7 f8e9 	bl	8000b54 <__aeabi_dcmpge>
 8009982:	9e03      	ldr	r6, [sp, #12]
 8009984:	4637      	mov	r7, r6
 8009986:	2800      	cmp	r0, #0
 8009988:	f040 8245 	bne.w	8009e16 <_dtoa_r+0x93e>
 800998c:	9d01      	ldr	r5, [sp, #4]
 800998e:	2331      	movs	r3, #49	; 0x31
 8009990:	f805 3b01 	strb.w	r3, [r5], #1
 8009994:	9b00      	ldr	r3, [sp, #0]
 8009996:	3301      	adds	r3, #1
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	e240      	b.n	8009e1e <_dtoa_r+0x946>
 800999c:	07f2      	lsls	r2, r6, #31
 800999e:	d505      	bpl.n	80099ac <_dtoa_r+0x4d4>
 80099a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099a4:	f7f6 fe50 	bl	8000648 <__aeabi_dmul>
 80099a8:	3501      	adds	r5, #1
 80099aa:	2301      	movs	r3, #1
 80099ac:	1076      	asrs	r6, r6, #1
 80099ae:	3708      	adds	r7, #8
 80099b0:	e777      	b.n	80098a2 <_dtoa_r+0x3ca>
 80099b2:	2502      	movs	r5, #2
 80099b4:	e779      	b.n	80098aa <_dtoa_r+0x3d2>
 80099b6:	9f00      	ldr	r7, [sp, #0]
 80099b8:	9e03      	ldr	r6, [sp, #12]
 80099ba:	e794      	b.n	80098e6 <_dtoa_r+0x40e>
 80099bc:	9901      	ldr	r1, [sp, #4]
 80099be:	4b4c      	ldr	r3, [pc, #304]	; (8009af0 <_dtoa_r+0x618>)
 80099c0:	4431      	add	r1, r6
 80099c2:	910d      	str	r1, [sp, #52]	; 0x34
 80099c4:	9908      	ldr	r1, [sp, #32]
 80099c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099ce:	2900      	cmp	r1, #0
 80099d0:	d043      	beq.n	8009a5a <_dtoa_r+0x582>
 80099d2:	494d      	ldr	r1, [pc, #308]	; (8009b08 <_dtoa_r+0x630>)
 80099d4:	2000      	movs	r0, #0
 80099d6:	f7f6 ff61 	bl	800089c <__aeabi_ddiv>
 80099da:	4652      	mov	r2, sl
 80099dc:	465b      	mov	r3, fp
 80099de:	f7f6 fc7b 	bl	80002d8 <__aeabi_dsub>
 80099e2:	9d01      	ldr	r5, [sp, #4]
 80099e4:	4682      	mov	sl, r0
 80099e6:	468b      	mov	fp, r1
 80099e8:	4649      	mov	r1, r9
 80099ea:	4640      	mov	r0, r8
 80099ec:	f7f7 f8dc 	bl	8000ba8 <__aeabi_d2iz>
 80099f0:	4606      	mov	r6, r0
 80099f2:	f7f6 fdbf 	bl	8000574 <__aeabi_i2d>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4640      	mov	r0, r8
 80099fc:	4649      	mov	r1, r9
 80099fe:	f7f6 fc6b 	bl	80002d8 <__aeabi_dsub>
 8009a02:	3630      	adds	r6, #48	; 0x30
 8009a04:	f805 6b01 	strb.w	r6, [r5], #1
 8009a08:	4652      	mov	r2, sl
 8009a0a:	465b      	mov	r3, fp
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	4689      	mov	r9, r1
 8009a10:	f7f7 f88c 	bl	8000b2c <__aeabi_dcmplt>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d163      	bne.n	8009ae0 <_dtoa_r+0x608>
 8009a18:	4642      	mov	r2, r8
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	4936      	ldr	r1, [pc, #216]	; (8009af8 <_dtoa_r+0x620>)
 8009a1e:	2000      	movs	r0, #0
 8009a20:	f7f6 fc5a 	bl	80002d8 <__aeabi_dsub>
 8009a24:	4652      	mov	r2, sl
 8009a26:	465b      	mov	r3, fp
 8009a28:	f7f7 f880 	bl	8000b2c <__aeabi_dcmplt>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	f040 80b5 	bne.w	8009b9c <_dtoa_r+0x6c4>
 8009a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a34:	429d      	cmp	r5, r3
 8009a36:	d081      	beq.n	800993c <_dtoa_r+0x464>
 8009a38:	4b30      	ldr	r3, [pc, #192]	; (8009afc <_dtoa_r+0x624>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4650      	mov	r0, sl
 8009a3e:	4659      	mov	r1, fp
 8009a40:	f7f6 fe02 	bl	8000648 <__aeabi_dmul>
 8009a44:	4b2d      	ldr	r3, [pc, #180]	; (8009afc <_dtoa_r+0x624>)
 8009a46:	4682      	mov	sl, r0
 8009a48:	468b      	mov	fp, r1
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f7f6 fdfa 	bl	8000648 <__aeabi_dmul>
 8009a54:	4680      	mov	r8, r0
 8009a56:	4689      	mov	r9, r1
 8009a58:	e7c6      	b.n	80099e8 <_dtoa_r+0x510>
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	4659      	mov	r1, fp
 8009a5e:	f7f6 fdf3 	bl	8000648 <__aeabi_dmul>
 8009a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a64:	9d01      	ldr	r5, [sp, #4]
 8009a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a68:	4682      	mov	sl, r0
 8009a6a:	468b      	mov	fp, r1
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4640      	mov	r0, r8
 8009a70:	f7f7 f89a 	bl	8000ba8 <__aeabi_d2iz>
 8009a74:	4606      	mov	r6, r0
 8009a76:	f7f6 fd7d 	bl	8000574 <__aeabi_i2d>
 8009a7a:	3630      	adds	r6, #48	; 0x30
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4640      	mov	r0, r8
 8009a82:	4649      	mov	r1, r9
 8009a84:	f7f6 fc28 	bl	80002d8 <__aeabi_dsub>
 8009a88:	f805 6b01 	strb.w	r6, [r5], #1
 8009a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a8e:	429d      	cmp	r5, r3
 8009a90:	4680      	mov	r8, r0
 8009a92:	4689      	mov	r9, r1
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	d124      	bne.n	8009ae4 <_dtoa_r+0x60c>
 8009a9a:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <_dtoa_r+0x630>)
 8009a9c:	4650      	mov	r0, sl
 8009a9e:	4659      	mov	r1, fp
 8009aa0:	f7f6 fc1c 	bl	80002dc <__adddf3>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	4649      	mov	r1, r9
 8009aac:	f7f7 f85c 	bl	8000b68 <__aeabi_dcmpgt>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d173      	bne.n	8009b9c <_dtoa_r+0x6c4>
 8009ab4:	4652      	mov	r2, sl
 8009ab6:	465b      	mov	r3, fp
 8009ab8:	4913      	ldr	r1, [pc, #76]	; (8009b08 <_dtoa_r+0x630>)
 8009aba:	2000      	movs	r0, #0
 8009abc:	f7f6 fc0c 	bl	80002d8 <__aeabi_dsub>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	f7f7 f830 	bl	8000b2c <__aeabi_dcmplt>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f43f af35 	beq.w	800993c <_dtoa_r+0x464>
 8009ad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ad4:	1e6b      	subs	r3, r5, #1
 8009ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ad8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009adc:	2b30      	cmp	r3, #48	; 0x30
 8009ade:	d0f8      	beq.n	8009ad2 <_dtoa_r+0x5fa>
 8009ae0:	9700      	str	r7, [sp, #0]
 8009ae2:	e049      	b.n	8009b78 <_dtoa_r+0x6a0>
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <_dtoa_r+0x624>)
 8009ae6:	f7f6 fdaf 	bl	8000648 <__aeabi_dmul>
 8009aea:	4680      	mov	r8, r0
 8009aec:	4689      	mov	r9, r1
 8009aee:	e7bd      	b.n	8009a6c <_dtoa_r+0x594>
 8009af0:	0800c5d8 	.word	0x0800c5d8
 8009af4:	0800c5b0 	.word	0x0800c5b0
 8009af8:	3ff00000 	.word	0x3ff00000
 8009afc:	40240000 	.word	0x40240000
 8009b00:	401c0000 	.word	0x401c0000
 8009b04:	40140000 	.word	0x40140000
 8009b08:	3fe00000 	.word	0x3fe00000
 8009b0c:	9d01      	ldr	r5, [sp, #4]
 8009b0e:	4656      	mov	r6, sl
 8009b10:	465f      	mov	r7, fp
 8009b12:	4642      	mov	r2, r8
 8009b14:	464b      	mov	r3, r9
 8009b16:	4630      	mov	r0, r6
 8009b18:	4639      	mov	r1, r7
 8009b1a:	f7f6 febf 	bl	800089c <__aeabi_ddiv>
 8009b1e:	f7f7 f843 	bl	8000ba8 <__aeabi_d2iz>
 8009b22:	4682      	mov	sl, r0
 8009b24:	f7f6 fd26 	bl	8000574 <__aeabi_i2d>
 8009b28:	4642      	mov	r2, r8
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	f7f6 fd8c 	bl	8000648 <__aeabi_dmul>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009b3c:	f7f6 fbcc 	bl	80002d8 <__aeabi_dsub>
 8009b40:	f805 6b01 	strb.w	r6, [r5], #1
 8009b44:	9e01      	ldr	r6, [sp, #4]
 8009b46:	9f03      	ldr	r7, [sp, #12]
 8009b48:	1bae      	subs	r6, r5, r6
 8009b4a:	42b7      	cmp	r7, r6
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	d135      	bne.n	8009bbe <_dtoa_r+0x6e6>
 8009b52:	f7f6 fbc3 	bl	80002dc <__adddf3>
 8009b56:	4642      	mov	r2, r8
 8009b58:	464b      	mov	r3, r9
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	f7f7 f803 	bl	8000b68 <__aeabi_dcmpgt>
 8009b62:	b9d0      	cbnz	r0, 8009b9a <_dtoa_r+0x6c2>
 8009b64:	4642      	mov	r2, r8
 8009b66:	464b      	mov	r3, r9
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 ffd4 	bl	8000b18 <__aeabi_dcmpeq>
 8009b70:	b110      	cbz	r0, 8009b78 <_dtoa_r+0x6a0>
 8009b72:	f01a 0f01 	tst.w	sl, #1
 8009b76:	d110      	bne.n	8009b9a <_dtoa_r+0x6c2>
 8009b78:	4620      	mov	r0, r4
 8009b7a:	ee18 1a10 	vmov	r1, s16
 8009b7e:	f000 fe75 	bl	800a86c <_Bfree>
 8009b82:	2300      	movs	r3, #0
 8009b84:	9800      	ldr	r0, [sp, #0]
 8009b86:	702b      	strb	r3, [r5, #0]
 8009b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	6018      	str	r0, [r3, #0]
 8009b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f43f acf1 	beq.w	8009578 <_dtoa_r+0xa0>
 8009b96:	601d      	str	r5, [r3, #0]
 8009b98:	e4ee      	b.n	8009578 <_dtoa_r+0xa0>
 8009b9a:	9f00      	ldr	r7, [sp, #0]
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	461d      	mov	r5, r3
 8009ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ba4:	2a39      	cmp	r2, #57	; 0x39
 8009ba6:	d106      	bne.n	8009bb6 <_dtoa_r+0x6de>
 8009ba8:	9a01      	ldr	r2, [sp, #4]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d1f7      	bne.n	8009b9e <_dtoa_r+0x6c6>
 8009bae:	9901      	ldr	r1, [sp, #4]
 8009bb0:	2230      	movs	r2, #48	; 0x30
 8009bb2:	3701      	adds	r7, #1
 8009bb4:	700a      	strb	r2, [r1, #0]
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	3201      	adds	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
 8009bbc:	e790      	b.n	8009ae0 <_dtoa_r+0x608>
 8009bbe:	4ba6      	ldr	r3, [pc, #664]	; (8009e58 <_dtoa_r+0x980>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f7f6 fd41 	bl	8000648 <__aeabi_dmul>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460f      	mov	r7, r1
 8009bce:	f7f6 ffa3 	bl	8000b18 <__aeabi_dcmpeq>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d09d      	beq.n	8009b12 <_dtoa_r+0x63a>
 8009bd6:	e7cf      	b.n	8009b78 <_dtoa_r+0x6a0>
 8009bd8:	9a08      	ldr	r2, [sp, #32]
 8009bda:	2a00      	cmp	r2, #0
 8009bdc:	f000 80d7 	beq.w	8009d8e <_dtoa_r+0x8b6>
 8009be0:	9a06      	ldr	r2, [sp, #24]
 8009be2:	2a01      	cmp	r2, #1
 8009be4:	f300 80ba 	bgt.w	8009d5c <_dtoa_r+0x884>
 8009be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bea:	2a00      	cmp	r2, #0
 8009bec:	f000 80b2 	beq.w	8009d54 <_dtoa_r+0x87c>
 8009bf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009bf4:	9e07      	ldr	r6, [sp, #28]
 8009bf6:	9d04      	ldr	r5, [sp, #16]
 8009bf8:	9a04      	ldr	r2, [sp, #16]
 8009bfa:	441a      	add	r2, r3
 8009bfc:	9204      	str	r2, [sp, #16]
 8009bfe:	9a05      	ldr	r2, [sp, #20]
 8009c00:	2101      	movs	r1, #1
 8009c02:	441a      	add	r2, r3
 8009c04:	4620      	mov	r0, r4
 8009c06:	9205      	str	r2, [sp, #20]
 8009c08:	f000 ff32 	bl	800aa70 <__i2b>
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	dd0c      	ble.n	8009c2c <_dtoa_r+0x754>
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dd09      	ble.n	8009c2c <_dtoa_r+0x754>
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	9a04      	ldr	r2, [sp, #16]
 8009c1c:	bfa8      	it	ge
 8009c1e:	462b      	movge	r3, r5
 8009c20:	1ad2      	subs	r2, r2, r3
 8009c22:	9204      	str	r2, [sp, #16]
 8009c24:	9a05      	ldr	r2, [sp, #20]
 8009c26:	1aed      	subs	r5, r5, r3
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	b31b      	cbz	r3, 8009c78 <_dtoa_r+0x7a0>
 8009c30:	9b08      	ldr	r3, [sp, #32]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 80af 	beq.w	8009d96 <_dtoa_r+0x8be>
 8009c38:	2e00      	cmp	r6, #0
 8009c3a:	dd13      	ble.n	8009c64 <_dtoa_r+0x78c>
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	4632      	mov	r2, r6
 8009c40:	4620      	mov	r0, r4
 8009c42:	f000 ffd5 	bl	800abf0 <__pow5mult>
 8009c46:	ee18 2a10 	vmov	r2, s16
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f000 ff24 	bl	800aa9c <__multiply>
 8009c54:	ee18 1a10 	vmov	r1, s16
 8009c58:	4680      	mov	r8, r0
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 fe06 	bl	800a86c <_Bfree>
 8009c60:	ee08 8a10 	vmov	s16, r8
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	1b9a      	subs	r2, r3, r6
 8009c68:	d006      	beq.n	8009c78 <_dtoa_r+0x7a0>
 8009c6a:	ee18 1a10 	vmov	r1, s16
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f000 ffbe 	bl	800abf0 <__pow5mult>
 8009c74:	ee08 0a10 	vmov	s16, r0
 8009c78:	2101      	movs	r1, #1
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f000 fef8 	bl	800aa70 <__i2b>
 8009c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	4606      	mov	r6, r0
 8009c86:	f340 8088 	ble.w	8009d9a <_dtoa_r+0x8c2>
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 ffae 	bl	800abf0 <__pow5mult>
 8009c94:	9b06      	ldr	r3, [sp, #24]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	4606      	mov	r6, r0
 8009c9a:	f340 8081 	ble.w	8009da0 <_dtoa_r+0x8c8>
 8009c9e:	f04f 0800 	mov.w	r8, #0
 8009ca2:	6933      	ldr	r3, [r6, #16]
 8009ca4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ca8:	6918      	ldr	r0, [r3, #16]
 8009caa:	f000 fe91 	bl	800a9d0 <__hi0bits>
 8009cae:	f1c0 0020 	rsb	r0, r0, #32
 8009cb2:	9b05      	ldr	r3, [sp, #20]
 8009cb4:	4418      	add	r0, r3
 8009cb6:	f010 001f 	ands.w	r0, r0, #31
 8009cba:	f000 8092 	beq.w	8009de2 <_dtoa_r+0x90a>
 8009cbe:	f1c0 0320 	rsb	r3, r0, #32
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	f340 808a 	ble.w	8009ddc <_dtoa_r+0x904>
 8009cc8:	f1c0 001c 	rsb	r0, r0, #28
 8009ccc:	9b04      	ldr	r3, [sp, #16]
 8009cce:	4403      	add	r3, r0
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	9b05      	ldr	r3, [sp, #20]
 8009cd4:	4403      	add	r3, r0
 8009cd6:	4405      	add	r5, r0
 8009cd8:	9305      	str	r3, [sp, #20]
 8009cda:	9b04      	ldr	r3, [sp, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	dd07      	ble.n	8009cf0 <_dtoa_r+0x818>
 8009ce0:	ee18 1a10 	vmov	r1, s16
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 ffdc 	bl	800aca4 <__lshift>
 8009cec:	ee08 0a10 	vmov	s16, r0
 8009cf0:	9b05      	ldr	r3, [sp, #20]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	dd05      	ble.n	8009d02 <_dtoa_r+0x82a>
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f000 ffd2 	bl	800aca4 <__lshift>
 8009d00:	4606      	mov	r6, r0
 8009d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d06e      	beq.n	8009de6 <_dtoa_r+0x90e>
 8009d08:	ee18 0a10 	vmov	r0, s16
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	f001 f839 	bl	800ad84 <__mcmp>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	da67      	bge.n	8009de6 <_dtoa_r+0x90e>
 8009d16:	9b00      	ldr	r3, [sp, #0]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	ee18 1a10 	vmov	r1, s16
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	220a      	movs	r2, #10
 8009d22:	2300      	movs	r3, #0
 8009d24:	4620      	mov	r0, r4
 8009d26:	f000 fdc3 	bl	800a8b0 <__multadd>
 8009d2a:	9b08      	ldr	r3, [sp, #32]
 8009d2c:	ee08 0a10 	vmov	s16, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 81b1 	beq.w	800a098 <_dtoa_r+0xbc0>
 8009d36:	2300      	movs	r3, #0
 8009d38:	4639      	mov	r1, r7
 8009d3a:	220a      	movs	r2, #10
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 fdb7 	bl	800a8b0 <__multadd>
 8009d42:	9b02      	ldr	r3, [sp, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	4607      	mov	r7, r0
 8009d48:	f300 808e 	bgt.w	8009e68 <_dtoa_r+0x990>
 8009d4c:	9b06      	ldr	r3, [sp, #24]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	dc51      	bgt.n	8009df6 <_dtoa_r+0x91e>
 8009d52:	e089      	b.n	8009e68 <_dtoa_r+0x990>
 8009d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d5a:	e74b      	b.n	8009bf4 <_dtoa_r+0x71c>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	1e5e      	subs	r6, r3, #1
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	42b3      	cmp	r3, r6
 8009d64:	bfbf      	itttt	lt
 8009d66:	9b07      	ldrlt	r3, [sp, #28]
 8009d68:	9607      	strlt	r6, [sp, #28]
 8009d6a:	1af2      	sublt	r2, r6, r3
 8009d6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d6e:	bfb6      	itet	lt
 8009d70:	189b      	addlt	r3, r3, r2
 8009d72:	1b9e      	subge	r6, r3, r6
 8009d74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	bfb8      	it	lt
 8009d7a:	2600      	movlt	r6, #0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bfb7      	itett	lt
 8009d80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009d84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009d88:	1a9d      	sublt	r5, r3, r2
 8009d8a:	2300      	movlt	r3, #0
 8009d8c:	e734      	b.n	8009bf8 <_dtoa_r+0x720>
 8009d8e:	9e07      	ldr	r6, [sp, #28]
 8009d90:	9d04      	ldr	r5, [sp, #16]
 8009d92:	9f08      	ldr	r7, [sp, #32]
 8009d94:	e73b      	b.n	8009c0e <_dtoa_r+0x736>
 8009d96:	9a07      	ldr	r2, [sp, #28]
 8009d98:	e767      	b.n	8009c6a <_dtoa_r+0x792>
 8009d9a:	9b06      	ldr	r3, [sp, #24]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	dc18      	bgt.n	8009dd2 <_dtoa_r+0x8fa>
 8009da0:	f1ba 0f00 	cmp.w	sl, #0
 8009da4:	d115      	bne.n	8009dd2 <_dtoa_r+0x8fa>
 8009da6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009daa:	b993      	cbnz	r3, 8009dd2 <_dtoa_r+0x8fa>
 8009dac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009db0:	0d1b      	lsrs	r3, r3, #20
 8009db2:	051b      	lsls	r3, r3, #20
 8009db4:	b183      	cbz	r3, 8009dd8 <_dtoa_r+0x900>
 8009db6:	9b04      	ldr	r3, [sp, #16]
 8009db8:	3301      	adds	r3, #1
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	9b05      	ldr	r3, [sp, #20]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	9305      	str	r3, [sp, #20]
 8009dc2:	f04f 0801 	mov.w	r8, #1
 8009dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f47f af6a 	bne.w	8009ca2 <_dtoa_r+0x7ca>
 8009dce:	2001      	movs	r0, #1
 8009dd0:	e76f      	b.n	8009cb2 <_dtoa_r+0x7da>
 8009dd2:	f04f 0800 	mov.w	r8, #0
 8009dd6:	e7f6      	b.n	8009dc6 <_dtoa_r+0x8ee>
 8009dd8:	4698      	mov	r8, r3
 8009dda:	e7f4      	b.n	8009dc6 <_dtoa_r+0x8ee>
 8009ddc:	f43f af7d 	beq.w	8009cda <_dtoa_r+0x802>
 8009de0:	4618      	mov	r0, r3
 8009de2:	301c      	adds	r0, #28
 8009de4:	e772      	b.n	8009ccc <_dtoa_r+0x7f4>
 8009de6:	9b03      	ldr	r3, [sp, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dc37      	bgt.n	8009e5c <_dtoa_r+0x984>
 8009dec:	9b06      	ldr	r3, [sp, #24]
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	dd34      	ble.n	8009e5c <_dtoa_r+0x984>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	9302      	str	r3, [sp, #8]
 8009df6:	9b02      	ldr	r3, [sp, #8]
 8009df8:	b96b      	cbnz	r3, 8009e16 <_dtoa_r+0x93e>
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	2205      	movs	r2, #5
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 fd56 	bl	800a8b0 <__multadd>
 8009e04:	4601      	mov	r1, r0
 8009e06:	4606      	mov	r6, r0
 8009e08:	ee18 0a10 	vmov	r0, s16
 8009e0c:	f000 ffba 	bl	800ad84 <__mcmp>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	f73f adbb 	bgt.w	800998c <_dtoa_r+0x4b4>
 8009e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e18:	9d01      	ldr	r5, [sp, #4]
 8009e1a:	43db      	mvns	r3, r3
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	f04f 0800 	mov.w	r8, #0
 8009e22:	4631      	mov	r1, r6
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 fd21 	bl	800a86c <_Bfree>
 8009e2a:	2f00      	cmp	r7, #0
 8009e2c:	f43f aea4 	beq.w	8009b78 <_dtoa_r+0x6a0>
 8009e30:	f1b8 0f00 	cmp.w	r8, #0
 8009e34:	d005      	beq.n	8009e42 <_dtoa_r+0x96a>
 8009e36:	45b8      	cmp	r8, r7
 8009e38:	d003      	beq.n	8009e42 <_dtoa_r+0x96a>
 8009e3a:	4641      	mov	r1, r8
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 fd15 	bl	800a86c <_Bfree>
 8009e42:	4639      	mov	r1, r7
 8009e44:	4620      	mov	r0, r4
 8009e46:	f000 fd11 	bl	800a86c <_Bfree>
 8009e4a:	e695      	b.n	8009b78 <_dtoa_r+0x6a0>
 8009e4c:	2600      	movs	r6, #0
 8009e4e:	4637      	mov	r7, r6
 8009e50:	e7e1      	b.n	8009e16 <_dtoa_r+0x93e>
 8009e52:	9700      	str	r7, [sp, #0]
 8009e54:	4637      	mov	r7, r6
 8009e56:	e599      	b.n	800998c <_dtoa_r+0x4b4>
 8009e58:	40240000 	.word	0x40240000
 8009e5c:	9b08      	ldr	r3, [sp, #32]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80ca 	beq.w	8009ff8 <_dtoa_r+0xb20>
 8009e64:	9b03      	ldr	r3, [sp, #12]
 8009e66:	9302      	str	r3, [sp, #8]
 8009e68:	2d00      	cmp	r5, #0
 8009e6a:	dd05      	ble.n	8009e78 <_dtoa_r+0x9a0>
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	462a      	mov	r2, r5
 8009e70:	4620      	mov	r0, r4
 8009e72:	f000 ff17 	bl	800aca4 <__lshift>
 8009e76:	4607      	mov	r7, r0
 8009e78:	f1b8 0f00 	cmp.w	r8, #0
 8009e7c:	d05b      	beq.n	8009f36 <_dtoa_r+0xa5e>
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 fcb3 	bl	800a7ec <_Balloc>
 8009e86:	4605      	mov	r5, r0
 8009e88:	b928      	cbnz	r0, 8009e96 <_dtoa_r+0x9be>
 8009e8a:	4b87      	ldr	r3, [pc, #540]	; (800a0a8 <_dtoa_r+0xbd0>)
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e92:	f7ff bb3b 	b.w	800950c <_dtoa_r+0x34>
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	3202      	adds	r2, #2
 8009e9a:	0092      	lsls	r2, r2, #2
 8009e9c:	f107 010c 	add.w	r1, r7, #12
 8009ea0:	300c      	adds	r0, #12
 8009ea2:	f000 fc95 	bl	800a7d0 <memcpy>
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f000 fefa 	bl	800aca4 <__lshift>
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	f103 0901 	add.w	r9, r3, #1
 8009eb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009eba:	4413      	add	r3, r2
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	f00a 0301 	and.w	r3, sl, #1
 8009ec2:	46b8      	mov	r8, r7
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	4631      	mov	r1, r6
 8009eca:	ee18 0a10 	vmov	r0, s16
 8009ece:	f7ff fa77 	bl	80093c0 <quorem>
 8009ed2:	4641      	mov	r1, r8
 8009ed4:	9002      	str	r0, [sp, #8]
 8009ed6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009eda:	ee18 0a10 	vmov	r0, s16
 8009ede:	f000 ff51 	bl	800ad84 <__mcmp>
 8009ee2:	463a      	mov	r2, r7
 8009ee4:	9003      	str	r0, [sp, #12]
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 ff67 	bl	800adbc <__mdiff>
 8009eee:	68c2      	ldr	r2, [r0, #12]
 8009ef0:	f109 3bff 	add.w	fp, r9, #4294967295
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	bb02      	cbnz	r2, 8009f3a <_dtoa_r+0xa62>
 8009ef8:	4601      	mov	r1, r0
 8009efa:	ee18 0a10 	vmov	r0, s16
 8009efe:	f000 ff41 	bl	800ad84 <__mcmp>
 8009f02:	4602      	mov	r2, r0
 8009f04:	4629      	mov	r1, r5
 8009f06:	4620      	mov	r0, r4
 8009f08:	9207      	str	r2, [sp, #28]
 8009f0a:	f000 fcaf 	bl	800a86c <_Bfree>
 8009f0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009f12:	ea43 0102 	orr.w	r1, r3, r2
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	430b      	orrs	r3, r1
 8009f1a:	464d      	mov	r5, r9
 8009f1c:	d10f      	bne.n	8009f3e <_dtoa_r+0xa66>
 8009f1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f22:	d02a      	beq.n	8009f7a <_dtoa_r+0xaa2>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dd02      	ble.n	8009f30 <_dtoa_r+0xa58>
 8009f2a:	9b02      	ldr	r3, [sp, #8]
 8009f2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009f30:	f88b a000 	strb.w	sl, [fp]
 8009f34:	e775      	b.n	8009e22 <_dtoa_r+0x94a>
 8009f36:	4638      	mov	r0, r7
 8009f38:	e7ba      	b.n	8009eb0 <_dtoa_r+0x9d8>
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	e7e2      	b.n	8009f04 <_dtoa_r+0xa2c>
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	db04      	blt.n	8009f4e <_dtoa_r+0xa76>
 8009f44:	9906      	ldr	r1, [sp, #24]
 8009f46:	430b      	orrs	r3, r1
 8009f48:	9904      	ldr	r1, [sp, #16]
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	d122      	bne.n	8009f94 <_dtoa_r+0xabc>
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	ddee      	ble.n	8009f30 <_dtoa_r+0xa58>
 8009f52:	ee18 1a10 	vmov	r1, s16
 8009f56:	2201      	movs	r2, #1
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 fea3 	bl	800aca4 <__lshift>
 8009f5e:	4631      	mov	r1, r6
 8009f60:	ee08 0a10 	vmov	s16, r0
 8009f64:	f000 ff0e 	bl	800ad84 <__mcmp>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	dc03      	bgt.n	8009f74 <_dtoa_r+0xa9c>
 8009f6c:	d1e0      	bne.n	8009f30 <_dtoa_r+0xa58>
 8009f6e:	f01a 0f01 	tst.w	sl, #1
 8009f72:	d0dd      	beq.n	8009f30 <_dtoa_r+0xa58>
 8009f74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f78:	d1d7      	bne.n	8009f2a <_dtoa_r+0xa52>
 8009f7a:	2339      	movs	r3, #57	; 0x39
 8009f7c:	f88b 3000 	strb.w	r3, [fp]
 8009f80:	462b      	mov	r3, r5
 8009f82:	461d      	mov	r5, r3
 8009f84:	3b01      	subs	r3, #1
 8009f86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f8a:	2a39      	cmp	r2, #57	; 0x39
 8009f8c:	d071      	beq.n	800a072 <_dtoa_r+0xb9a>
 8009f8e:	3201      	adds	r2, #1
 8009f90:	701a      	strb	r2, [r3, #0]
 8009f92:	e746      	b.n	8009e22 <_dtoa_r+0x94a>
 8009f94:	2a00      	cmp	r2, #0
 8009f96:	dd07      	ble.n	8009fa8 <_dtoa_r+0xad0>
 8009f98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f9c:	d0ed      	beq.n	8009f7a <_dtoa_r+0xaa2>
 8009f9e:	f10a 0301 	add.w	r3, sl, #1
 8009fa2:	f88b 3000 	strb.w	r3, [fp]
 8009fa6:	e73c      	b.n	8009e22 <_dtoa_r+0x94a>
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009fae:	4599      	cmp	r9, r3
 8009fb0:	d047      	beq.n	800a042 <_dtoa_r+0xb6a>
 8009fb2:	ee18 1a10 	vmov	r1, s16
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	220a      	movs	r2, #10
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f000 fc78 	bl	800a8b0 <__multadd>
 8009fc0:	45b8      	cmp	r8, r7
 8009fc2:	ee08 0a10 	vmov	s16, r0
 8009fc6:	f04f 0300 	mov.w	r3, #0
 8009fca:	f04f 020a 	mov.w	r2, #10
 8009fce:	4641      	mov	r1, r8
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	d106      	bne.n	8009fe2 <_dtoa_r+0xb0a>
 8009fd4:	f000 fc6c 	bl	800a8b0 <__multadd>
 8009fd8:	4680      	mov	r8, r0
 8009fda:	4607      	mov	r7, r0
 8009fdc:	f109 0901 	add.w	r9, r9, #1
 8009fe0:	e772      	b.n	8009ec8 <_dtoa_r+0x9f0>
 8009fe2:	f000 fc65 	bl	800a8b0 <__multadd>
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	4680      	mov	r8, r0
 8009fea:	2300      	movs	r3, #0
 8009fec:	220a      	movs	r2, #10
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fc5e 	bl	800a8b0 <__multadd>
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	e7f1      	b.n	8009fdc <_dtoa_r+0xb04>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	9302      	str	r3, [sp, #8]
 8009ffc:	9d01      	ldr	r5, [sp, #4]
 8009ffe:	ee18 0a10 	vmov	r0, s16
 800a002:	4631      	mov	r1, r6
 800a004:	f7ff f9dc 	bl	80093c0 <quorem>
 800a008:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a00c:	9b01      	ldr	r3, [sp, #4]
 800a00e:	f805 ab01 	strb.w	sl, [r5], #1
 800a012:	1aea      	subs	r2, r5, r3
 800a014:	9b02      	ldr	r3, [sp, #8]
 800a016:	4293      	cmp	r3, r2
 800a018:	dd09      	ble.n	800a02e <_dtoa_r+0xb56>
 800a01a:	ee18 1a10 	vmov	r1, s16
 800a01e:	2300      	movs	r3, #0
 800a020:	220a      	movs	r2, #10
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fc44 	bl	800a8b0 <__multadd>
 800a028:	ee08 0a10 	vmov	s16, r0
 800a02c:	e7e7      	b.n	8009ffe <_dtoa_r+0xb26>
 800a02e:	9b02      	ldr	r3, [sp, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	bfc8      	it	gt
 800a034:	461d      	movgt	r5, r3
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	bfd8      	it	le
 800a03a:	2501      	movle	r5, #1
 800a03c:	441d      	add	r5, r3
 800a03e:	f04f 0800 	mov.w	r8, #0
 800a042:	ee18 1a10 	vmov	r1, s16
 800a046:	2201      	movs	r2, #1
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fe2b 	bl	800aca4 <__lshift>
 800a04e:	4631      	mov	r1, r6
 800a050:	ee08 0a10 	vmov	s16, r0
 800a054:	f000 fe96 	bl	800ad84 <__mcmp>
 800a058:	2800      	cmp	r0, #0
 800a05a:	dc91      	bgt.n	8009f80 <_dtoa_r+0xaa8>
 800a05c:	d102      	bne.n	800a064 <_dtoa_r+0xb8c>
 800a05e:	f01a 0f01 	tst.w	sl, #1
 800a062:	d18d      	bne.n	8009f80 <_dtoa_r+0xaa8>
 800a064:	462b      	mov	r3, r5
 800a066:	461d      	mov	r5, r3
 800a068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a06c:	2a30      	cmp	r2, #48	; 0x30
 800a06e:	d0fa      	beq.n	800a066 <_dtoa_r+0xb8e>
 800a070:	e6d7      	b.n	8009e22 <_dtoa_r+0x94a>
 800a072:	9a01      	ldr	r2, [sp, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d184      	bne.n	8009f82 <_dtoa_r+0xaaa>
 800a078:	9b00      	ldr	r3, [sp, #0]
 800a07a:	3301      	adds	r3, #1
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	2331      	movs	r3, #49	; 0x31
 800a080:	7013      	strb	r3, [r2, #0]
 800a082:	e6ce      	b.n	8009e22 <_dtoa_r+0x94a>
 800a084:	4b09      	ldr	r3, [pc, #36]	; (800a0ac <_dtoa_r+0xbd4>)
 800a086:	f7ff ba95 	b.w	80095b4 <_dtoa_r+0xdc>
 800a08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f47f aa6e 	bne.w	800956e <_dtoa_r+0x96>
 800a092:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <_dtoa_r+0xbd8>)
 800a094:	f7ff ba8e 	b.w	80095b4 <_dtoa_r+0xdc>
 800a098:	9b02      	ldr	r3, [sp, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dcae      	bgt.n	8009ffc <_dtoa_r+0xb24>
 800a09e:	9b06      	ldr	r3, [sp, #24]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	f73f aea8 	bgt.w	8009df6 <_dtoa_r+0x91e>
 800a0a6:	e7a9      	b.n	8009ffc <_dtoa_r+0xb24>
 800a0a8:	0800c4c8 	.word	0x0800c4c8
 800a0ac:	0800c2c8 	.word	0x0800c2c8
 800a0b0:	0800c449 	.word	0x0800c449

0800a0b4 <rshift>:
 800a0b4:	6903      	ldr	r3, [r0, #16]
 800a0b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0c2:	f100 0414 	add.w	r4, r0, #20
 800a0c6:	dd45      	ble.n	800a154 <rshift+0xa0>
 800a0c8:	f011 011f 	ands.w	r1, r1, #31
 800a0cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0d4:	d10c      	bne.n	800a0f0 <rshift+0x3c>
 800a0d6:	f100 0710 	add.w	r7, r0, #16
 800a0da:	4629      	mov	r1, r5
 800a0dc:	42b1      	cmp	r1, r6
 800a0de:	d334      	bcc.n	800a14a <rshift+0x96>
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	1eea      	subs	r2, r5, #3
 800a0e6:	4296      	cmp	r6, r2
 800a0e8:	bf38      	it	cc
 800a0ea:	2300      	movcc	r3, #0
 800a0ec:	4423      	add	r3, r4
 800a0ee:	e015      	b.n	800a11c <rshift+0x68>
 800a0f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0f4:	f1c1 0820 	rsb	r8, r1, #32
 800a0f8:	40cf      	lsrs	r7, r1
 800a0fa:	f105 0e04 	add.w	lr, r5, #4
 800a0fe:	46a1      	mov	r9, r4
 800a100:	4576      	cmp	r6, lr
 800a102:	46f4      	mov	ip, lr
 800a104:	d815      	bhi.n	800a132 <rshift+0x7e>
 800a106:	1a9a      	subs	r2, r3, r2
 800a108:	0092      	lsls	r2, r2, #2
 800a10a:	3a04      	subs	r2, #4
 800a10c:	3501      	adds	r5, #1
 800a10e:	42ae      	cmp	r6, r5
 800a110:	bf38      	it	cc
 800a112:	2200      	movcc	r2, #0
 800a114:	18a3      	adds	r3, r4, r2
 800a116:	50a7      	str	r7, [r4, r2]
 800a118:	b107      	cbz	r7, 800a11c <rshift+0x68>
 800a11a:	3304      	adds	r3, #4
 800a11c:	1b1a      	subs	r2, r3, r4
 800a11e:	42a3      	cmp	r3, r4
 800a120:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a124:	bf08      	it	eq
 800a126:	2300      	moveq	r3, #0
 800a128:	6102      	str	r2, [r0, #16]
 800a12a:	bf08      	it	eq
 800a12c:	6143      	streq	r3, [r0, #20]
 800a12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a132:	f8dc c000 	ldr.w	ip, [ip]
 800a136:	fa0c fc08 	lsl.w	ip, ip, r8
 800a13a:	ea4c 0707 	orr.w	r7, ip, r7
 800a13e:	f849 7b04 	str.w	r7, [r9], #4
 800a142:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a146:	40cf      	lsrs	r7, r1
 800a148:	e7da      	b.n	800a100 <rshift+0x4c>
 800a14a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a14e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a152:	e7c3      	b.n	800a0dc <rshift+0x28>
 800a154:	4623      	mov	r3, r4
 800a156:	e7e1      	b.n	800a11c <rshift+0x68>

0800a158 <__hexdig_fun>:
 800a158:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d802      	bhi.n	800a166 <__hexdig_fun+0xe>
 800a160:	3820      	subs	r0, #32
 800a162:	b2c0      	uxtb	r0, r0
 800a164:	4770      	bx	lr
 800a166:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a16a:	2b05      	cmp	r3, #5
 800a16c:	d801      	bhi.n	800a172 <__hexdig_fun+0x1a>
 800a16e:	3847      	subs	r0, #71	; 0x47
 800a170:	e7f7      	b.n	800a162 <__hexdig_fun+0xa>
 800a172:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a176:	2b05      	cmp	r3, #5
 800a178:	d801      	bhi.n	800a17e <__hexdig_fun+0x26>
 800a17a:	3827      	subs	r0, #39	; 0x27
 800a17c:	e7f1      	b.n	800a162 <__hexdig_fun+0xa>
 800a17e:	2000      	movs	r0, #0
 800a180:	4770      	bx	lr
	...

0800a184 <__gethex>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	ed2d 8b02 	vpush	{d8}
 800a18c:	b089      	sub	sp, #36	; 0x24
 800a18e:	ee08 0a10 	vmov	s16, r0
 800a192:	9304      	str	r3, [sp, #16]
 800a194:	4bb4      	ldr	r3, [pc, #720]	; (800a468 <__gethex+0x2e4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	4618      	mov	r0, r3
 800a19c:	468b      	mov	fp, r1
 800a19e:	4690      	mov	r8, r2
 800a1a0:	f7f6 f83e 	bl	8000220 <strlen>
 800a1a4:	9b01      	ldr	r3, [sp, #4]
 800a1a6:	f8db 2000 	ldr.w	r2, [fp]
 800a1aa:	4403      	add	r3, r0
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	1c93      	adds	r3, r2, #2
 800a1b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a1ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a1be:	32fe      	adds	r2, #254	; 0xfe
 800a1c0:	18d1      	adds	r1, r2, r3
 800a1c2:	461f      	mov	r7, r3
 800a1c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1c8:	9100      	str	r1, [sp, #0]
 800a1ca:	2830      	cmp	r0, #48	; 0x30
 800a1cc:	d0f8      	beq.n	800a1c0 <__gethex+0x3c>
 800a1ce:	f7ff ffc3 	bl	800a158 <__hexdig_fun>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d13a      	bne.n	800a24e <__gethex+0xca>
 800a1d8:	9901      	ldr	r1, [sp, #4]
 800a1da:	4652      	mov	r2, sl
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f001 fa33 	bl	800b648 <strncmp>
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d168      	bne.n	800a2ba <__gethex+0x136>
 800a1e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a1ec:	eb07 060a 	add.w	r6, r7, sl
 800a1f0:	f7ff ffb2 	bl	800a158 <__hexdig_fun>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d062      	beq.n	800a2be <__gethex+0x13a>
 800a1f8:	4633      	mov	r3, r6
 800a1fa:	7818      	ldrb	r0, [r3, #0]
 800a1fc:	2830      	cmp	r0, #48	; 0x30
 800a1fe:	461f      	mov	r7, r3
 800a200:	f103 0301 	add.w	r3, r3, #1
 800a204:	d0f9      	beq.n	800a1fa <__gethex+0x76>
 800a206:	f7ff ffa7 	bl	800a158 <__hexdig_fun>
 800a20a:	2301      	movs	r3, #1
 800a20c:	fab0 f480 	clz	r4, r0
 800a210:	0964      	lsrs	r4, r4, #5
 800a212:	4635      	mov	r5, r6
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	463a      	mov	r2, r7
 800a218:	4616      	mov	r6, r2
 800a21a:	3201      	adds	r2, #1
 800a21c:	7830      	ldrb	r0, [r6, #0]
 800a21e:	f7ff ff9b 	bl	800a158 <__hexdig_fun>
 800a222:	2800      	cmp	r0, #0
 800a224:	d1f8      	bne.n	800a218 <__gethex+0x94>
 800a226:	9901      	ldr	r1, [sp, #4]
 800a228:	4652      	mov	r2, sl
 800a22a:	4630      	mov	r0, r6
 800a22c:	f001 fa0c 	bl	800b648 <strncmp>
 800a230:	b980      	cbnz	r0, 800a254 <__gethex+0xd0>
 800a232:	b94d      	cbnz	r5, 800a248 <__gethex+0xc4>
 800a234:	eb06 050a 	add.w	r5, r6, sl
 800a238:	462a      	mov	r2, r5
 800a23a:	4616      	mov	r6, r2
 800a23c:	3201      	adds	r2, #1
 800a23e:	7830      	ldrb	r0, [r6, #0]
 800a240:	f7ff ff8a 	bl	800a158 <__hexdig_fun>
 800a244:	2800      	cmp	r0, #0
 800a246:	d1f8      	bne.n	800a23a <__gethex+0xb6>
 800a248:	1bad      	subs	r5, r5, r6
 800a24a:	00ad      	lsls	r5, r5, #2
 800a24c:	e004      	b.n	800a258 <__gethex+0xd4>
 800a24e:	2400      	movs	r4, #0
 800a250:	4625      	mov	r5, r4
 800a252:	e7e0      	b.n	800a216 <__gethex+0x92>
 800a254:	2d00      	cmp	r5, #0
 800a256:	d1f7      	bne.n	800a248 <__gethex+0xc4>
 800a258:	7833      	ldrb	r3, [r6, #0]
 800a25a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a25e:	2b50      	cmp	r3, #80	; 0x50
 800a260:	d13b      	bne.n	800a2da <__gethex+0x156>
 800a262:	7873      	ldrb	r3, [r6, #1]
 800a264:	2b2b      	cmp	r3, #43	; 0x2b
 800a266:	d02c      	beq.n	800a2c2 <__gethex+0x13e>
 800a268:	2b2d      	cmp	r3, #45	; 0x2d
 800a26a:	d02e      	beq.n	800a2ca <__gethex+0x146>
 800a26c:	1c71      	adds	r1, r6, #1
 800a26e:	f04f 0900 	mov.w	r9, #0
 800a272:	7808      	ldrb	r0, [r1, #0]
 800a274:	f7ff ff70 	bl	800a158 <__hexdig_fun>
 800a278:	1e43      	subs	r3, r0, #1
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	2b18      	cmp	r3, #24
 800a27e:	d82c      	bhi.n	800a2da <__gethex+0x156>
 800a280:	f1a0 0210 	sub.w	r2, r0, #16
 800a284:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a288:	f7ff ff66 	bl	800a158 <__hexdig_fun>
 800a28c:	1e43      	subs	r3, r0, #1
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b18      	cmp	r3, #24
 800a292:	d91d      	bls.n	800a2d0 <__gethex+0x14c>
 800a294:	f1b9 0f00 	cmp.w	r9, #0
 800a298:	d000      	beq.n	800a29c <__gethex+0x118>
 800a29a:	4252      	negs	r2, r2
 800a29c:	4415      	add	r5, r2
 800a29e:	f8cb 1000 	str.w	r1, [fp]
 800a2a2:	b1e4      	cbz	r4, 800a2de <__gethex+0x15a>
 800a2a4:	9b00      	ldr	r3, [sp, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bf14      	ite	ne
 800a2aa:	2700      	movne	r7, #0
 800a2ac:	2706      	moveq	r7, #6
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	b009      	add	sp, #36	; 0x24
 800a2b2:	ecbd 8b02 	vpop	{d8}
 800a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ba:	463e      	mov	r6, r7
 800a2bc:	4625      	mov	r5, r4
 800a2be:	2401      	movs	r4, #1
 800a2c0:	e7ca      	b.n	800a258 <__gethex+0xd4>
 800a2c2:	f04f 0900 	mov.w	r9, #0
 800a2c6:	1cb1      	adds	r1, r6, #2
 800a2c8:	e7d3      	b.n	800a272 <__gethex+0xee>
 800a2ca:	f04f 0901 	mov.w	r9, #1
 800a2ce:	e7fa      	b.n	800a2c6 <__gethex+0x142>
 800a2d0:	230a      	movs	r3, #10
 800a2d2:	fb03 0202 	mla	r2, r3, r2, r0
 800a2d6:	3a10      	subs	r2, #16
 800a2d8:	e7d4      	b.n	800a284 <__gethex+0x100>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	e7df      	b.n	800a29e <__gethex+0x11a>
 800a2de:	1bf3      	subs	r3, r6, r7
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	2b07      	cmp	r3, #7
 800a2e6:	dc0b      	bgt.n	800a300 <__gethex+0x17c>
 800a2e8:	ee18 0a10 	vmov	r0, s16
 800a2ec:	f000 fa7e 	bl	800a7ec <_Balloc>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	b940      	cbnz	r0, 800a306 <__gethex+0x182>
 800a2f4:	4b5d      	ldr	r3, [pc, #372]	; (800a46c <__gethex+0x2e8>)
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	21de      	movs	r1, #222	; 0xde
 800a2fa:	485d      	ldr	r0, [pc, #372]	; (800a470 <__gethex+0x2ec>)
 800a2fc:	f001 f9c6 	bl	800b68c <__assert_func>
 800a300:	3101      	adds	r1, #1
 800a302:	105b      	asrs	r3, r3, #1
 800a304:	e7ee      	b.n	800a2e4 <__gethex+0x160>
 800a306:	f100 0914 	add.w	r9, r0, #20
 800a30a:	f04f 0b00 	mov.w	fp, #0
 800a30e:	f1ca 0301 	rsb	r3, sl, #1
 800a312:	f8cd 9008 	str.w	r9, [sp, #8]
 800a316:	f8cd b000 	str.w	fp, [sp]
 800a31a:	9306      	str	r3, [sp, #24]
 800a31c:	42b7      	cmp	r7, r6
 800a31e:	d340      	bcc.n	800a3a2 <__gethex+0x21e>
 800a320:	9802      	ldr	r0, [sp, #8]
 800a322:	9b00      	ldr	r3, [sp, #0]
 800a324:	f840 3b04 	str.w	r3, [r0], #4
 800a328:	eba0 0009 	sub.w	r0, r0, r9
 800a32c:	1080      	asrs	r0, r0, #2
 800a32e:	0146      	lsls	r6, r0, #5
 800a330:	6120      	str	r0, [r4, #16]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fb4c 	bl	800a9d0 <__hi0bits>
 800a338:	1a30      	subs	r0, r6, r0
 800a33a:	f8d8 6000 	ldr.w	r6, [r8]
 800a33e:	42b0      	cmp	r0, r6
 800a340:	dd63      	ble.n	800a40a <__gethex+0x286>
 800a342:	1b87      	subs	r7, r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	4620      	mov	r0, r4
 800a348:	f000 fef0 	bl	800b12c <__any_on>
 800a34c:	4682      	mov	sl, r0
 800a34e:	b1a8      	cbz	r0, 800a37c <__gethex+0x1f8>
 800a350:	1e7b      	subs	r3, r7, #1
 800a352:	1159      	asrs	r1, r3, #5
 800a354:	f003 021f 	and.w	r2, r3, #31
 800a358:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a35c:	f04f 0a01 	mov.w	sl, #1
 800a360:	fa0a f202 	lsl.w	r2, sl, r2
 800a364:	420a      	tst	r2, r1
 800a366:	d009      	beq.n	800a37c <__gethex+0x1f8>
 800a368:	4553      	cmp	r3, sl
 800a36a:	dd05      	ble.n	800a378 <__gethex+0x1f4>
 800a36c:	1eb9      	subs	r1, r7, #2
 800a36e:	4620      	mov	r0, r4
 800a370:	f000 fedc 	bl	800b12c <__any_on>
 800a374:	2800      	cmp	r0, #0
 800a376:	d145      	bne.n	800a404 <__gethex+0x280>
 800a378:	f04f 0a02 	mov.w	sl, #2
 800a37c:	4639      	mov	r1, r7
 800a37e:	4620      	mov	r0, r4
 800a380:	f7ff fe98 	bl	800a0b4 <rshift>
 800a384:	443d      	add	r5, r7
 800a386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a38a:	42ab      	cmp	r3, r5
 800a38c:	da4c      	bge.n	800a428 <__gethex+0x2a4>
 800a38e:	ee18 0a10 	vmov	r0, s16
 800a392:	4621      	mov	r1, r4
 800a394:	f000 fa6a 	bl	800a86c <_Bfree>
 800a398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a39a:	2300      	movs	r3, #0
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	27a3      	movs	r7, #163	; 0xa3
 800a3a0:	e785      	b.n	800a2ae <__gethex+0x12a>
 800a3a2:	1e73      	subs	r3, r6, #1
 800a3a4:	9a05      	ldr	r2, [sp, #20]
 800a3a6:	9303      	str	r3, [sp, #12]
 800a3a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d019      	beq.n	800a3e4 <__gethex+0x260>
 800a3b0:	f1bb 0f20 	cmp.w	fp, #32
 800a3b4:	d107      	bne.n	800a3c6 <__gethex+0x242>
 800a3b6:	9b02      	ldr	r3, [sp, #8]
 800a3b8:	9a00      	ldr	r2, [sp, #0]
 800a3ba:	f843 2b04 	str.w	r2, [r3], #4
 800a3be:	9302      	str	r3, [sp, #8]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	469b      	mov	fp, r3
 800a3c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a3ca:	f7ff fec5 	bl	800a158 <__hexdig_fun>
 800a3ce:	9b00      	ldr	r3, [sp, #0]
 800a3d0:	f000 000f 	and.w	r0, r0, #15
 800a3d4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a3d8:	4303      	orrs	r3, r0
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	f10b 0b04 	add.w	fp, fp, #4
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	e00d      	b.n	800a400 <__gethex+0x27c>
 800a3e4:	9b03      	ldr	r3, [sp, #12]
 800a3e6:	9a06      	ldr	r2, [sp, #24]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	42bb      	cmp	r3, r7
 800a3ec:	d3e0      	bcc.n	800a3b0 <__gethex+0x22c>
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	9901      	ldr	r1, [sp, #4]
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	4652      	mov	r2, sl
 800a3f6:	f001 f927 	bl	800b648 <strncmp>
 800a3fa:	9b07      	ldr	r3, [sp, #28]
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d1d7      	bne.n	800a3b0 <__gethex+0x22c>
 800a400:	461e      	mov	r6, r3
 800a402:	e78b      	b.n	800a31c <__gethex+0x198>
 800a404:	f04f 0a03 	mov.w	sl, #3
 800a408:	e7b8      	b.n	800a37c <__gethex+0x1f8>
 800a40a:	da0a      	bge.n	800a422 <__gethex+0x29e>
 800a40c:	1a37      	subs	r7, r6, r0
 800a40e:	4621      	mov	r1, r4
 800a410:	ee18 0a10 	vmov	r0, s16
 800a414:	463a      	mov	r2, r7
 800a416:	f000 fc45 	bl	800aca4 <__lshift>
 800a41a:	1bed      	subs	r5, r5, r7
 800a41c:	4604      	mov	r4, r0
 800a41e:	f100 0914 	add.w	r9, r0, #20
 800a422:	f04f 0a00 	mov.w	sl, #0
 800a426:	e7ae      	b.n	800a386 <__gethex+0x202>
 800a428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a42c:	42a8      	cmp	r0, r5
 800a42e:	dd72      	ble.n	800a516 <__gethex+0x392>
 800a430:	1b45      	subs	r5, r0, r5
 800a432:	42ae      	cmp	r6, r5
 800a434:	dc36      	bgt.n	800a4a4 <__gethex+0x320>
 800a436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d02a      	beq.n	800a494 <__gethex+0x310>
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d02c      	beq.n	800a49c <__gethex+0x318>
 800a442:	2b01      	cmp	r3, #1
 800a444:	d11c      	bne.n	800a480 <__gethex+0x2fc>
 800a446:	42ae      	cmp	r6, r5
 800a448:	d11a      	bne.n	800a480 <__gethex+0x2fc>
 800a44a:	2e01      	cmp	r6, #1
 800a44c:	d112      	bne.n	800a474 <__gethex+0x2f0>
 800a44e:	9a04      	ldr	r2, [sp, #16]
 800a450:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	2301      	movs	r3, #1
 800a458:	6123      	str	r3, [r4, #16]
 800a45a:	f8c9 3000 	str.w	r3, [r9]
 800a45e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a460:	2762      	movs	r7, #98	; 0x62
 800a462:	601c      	str	r4, [r3, #0]
 800a464:	e723      	b.n	800a2ae <__gethex+0x12a>
 800a466:	bf00      	nop
 800a468:	0800c540 	.word	0x0800c540
 800a46c:	0800c4c8 	.word	0x0800c4c8
 800a470:	0800c4d9 	.word	0x0800c4d9
 800a474:	1e71      	subs	r1, r6, #1
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fe58 	bl	800b12c <__any_on>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d1e6      	bne.n	800a44e <__gethex+0x2ca>
 800a480:	ee18 0a10 	vmov	r0, s16
 800a484:	4621      	mov	r1, r4
 800a486:	f000 f9f1 	bl	800a86c <_Bfree>
 800a48a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a48c:	2300      	movs	r3, #0
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	2750      	movs	r7, #80	; 0x50
 800a492:	e70c      	b.n	800a2ae <__gethex+0x12a>
 800a494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1f2      	bne.n	800a480 <__gethex+0x2fc>
 800a49a:	e7d8      	b.n	800a44e <__gethex+0x2ca>
 800a49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1d5      	bne.n	800a44e <__gethex+0x2ca>
 800a4a2:	e7ed      	b.n	800a480 <__gethex+0x2fc>
 800a4a4:	1e6f      	subs	r7, r5, #1
 800a4a6:	f1ba 0f00 	cmp.w	sl, #0
 800a4aa:	d131      	bne.n	800a510 <__gethex+0x38c>
 800a4ac:	b127      	cbz	r7, 800a4b8 <__gethex+0x334>
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 fe3b 	bl	800b12c <__any_on>
 800a4b6:	4682      	mov	sl, r0
 800a4b8:	117b      	asrs	r3, r7, #5
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a4c0:	f007 071f 	and.w	r7, r7, #31
 800a4c4:	fa01 f707 	lsl.w	r7, r1, r7
 800a4c8:	421f      	tst	r7, r3
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	bf18      	it	ne
 800a4d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a4d4:	1b76      	subs	r6, r6, r5
 800a4d6:	f7ff fded 	bl	800a0b4 <rshift>
 800a4da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4de:	2702      	movs	r7, #2
 800a4e0:	f1ba 0f00 	cmp.w	sl, #0
 800a4e4:	d048      	beq.n	800a578 <__gethex+0x3f4>
 800a4e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d015      	beq.n	800a51a <__gethex+0x396>
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d017      	beq.n	800a522 <__gethex+0x39e>
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d109      	bne.n	800a50a <__gethex+0x386>
 800a4f6:	f01a 0f02 	tst.w	sl, #2
 800a4fa:	d006      	beq.n	800a50a <__gethex+0x386>
 800a4fc:	f8d9 0000 	ldr.w	r0, [r9]
 800a500:	ea4a 0a00 	orr.w	sl, sl, r0
 800a504:	f01a 0f01 	tst.w	sl, #1
 800a508:	d10e      	bne.n	800a528 <__gethex+0x3a4>
 800a50a:	f047 0710 	orr.w	r7, r7, #16
 800a50e:	e033      	b.n	800a578 <__gethex+0x3f4>
 800a510:	f04f 0a01 	mov.w	sl, #1
 800a514:	e7d0      	b.n	800a4b8 <__gethex+0x334>
 800a516:	2701      	movs	r7, #1
 800a518:	e7e2      	b.n	800a4e0 <__gethex+0x35c>
 800a51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a51c:	f1c3 0301 	rsb	r3, r3, #1
 800a520:	9315      	str	r3, [sp, #84]	; 0x54
 800a522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0f0      	beq.n	800a50a <__gethex+0x386>
 800a528:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a52c:	f104 0314 	add.w	r3, r4, #20
 800a530:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a534:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a538:	f04f 0c00 	mov.w	ip, #0
 800a53c:	4618      	mov	r0, r3
 800a53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a542:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a546:	d01c      	beq.n	800a582 <__gethex+0x3fe>
 800a548:	3201      	adds	r2, #1
 800a54a:	6002      	str	r2, [r0, #0]
 800a54c:	2f02      	cmp	r7, #2
 800a54e:	f104 0314 	add.w	r3, r4, #20
 800a552:	d13f      	bne.n	800a5d4 <__gethex+0x450>
 800a554:	f8d8 2000 	ldr.w	r2, [r8]
 800a558:	3a01      	subs	r2, #1
 800a55a:	42b2      	cmp	r2, r6
 800a55c:	d10a      	bne.n	800a574 <__gethex+0x3f0>
 800a55e:	1171      	asrs	r1, r6, #5
 800a560:	2201      	movs	r2, #1
 800a562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a566:	f006 061f 	and.w	r6, r6, #31
 800a56a:	fa02 f606 	lsl.w	r6, r2, r6
 800a56e:	421e      	tst	r6, r3
 800a570:	bf18      	it	ne
 800a572:	4617      	movne	r7, r2
 800a574:	f047 0720 	orr.w	r7, r7, #32
 800a578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a57a:	601c      	str	r4, [r3, #0]
 800a57c:	9b04      	ldr	r3, [sp, #16]
 800a57e:	601d      	str	r5, [r3, #0]
 800a580:	e695      	b.n	800a2ae <__gethex+0x12a>
 800a582:	4299      	cmp	r1, r3
 800a584:	f843 cc04 	str.w	ip, [r3, #-4]
 800a588:	d8d8      	bhi.n	800a53c <__gethex+0x3b8>
 800a58a:	68a3      	ldr	r3, [r4, #8]
 800a58c:	459b      	cmp	fp, r3
 800a58e:	db19      	blt.n	800a5c4 <__gethex+0x440>
 800a590:	6861      	ldr	r1, [r4, #4]
 800a592:	ee18 0a10 	vmov	r0, s16
 800a596:	3101      	adds	r1, #1
 800a598:	f000 f928 	bl	800a7ec <_Balloc>
 800a59c:	4681      	mov	r9, r0
 800a59e:	b918      	cbnz	r0, 800a5a8 <__gethex+0x424>
 800a5a0:	4b1a      	ldr	r3, [pc, #104]	; (800a60c <__gethex+0x488>)
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	2184      	movs	r1, #132	; 0x84
 800a5a6:	e6a8      	b.n	800a2fa <__gethex+0x176>
 800a5a8:	6922      	ldr	r2, [r4, #16]
 800a5aa:	3202      	adds	r2, #2
 800a5ac:	f104 010c 	add.w	r1, r4, #12
 800a5b0:	0092      	lsls	r2, r2, #2
 800a5b2:	300c      	adds	r0, #12
 800a5b4:	f000 f90c 	bl	800a7d0 <memcpy>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	ee18 0a10 	vmov	r0, s16
 800a5be:	f000 f955 	bl	800a86c <_Bfree>
 800a5c2:	464c      	mov	r4, r9
 800a5c4:	6923      	ldr	r3, [r4, #16]
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5cc:	6122      	str	r2, [r4, #16]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	615a      	str	r2, [r3, #20]
 800a5d2:	e7bb      	b.n	800a54c <__gethex+0x3c8>
 800a5d4:	6922      	ldr	r2, [r4, #16]
 800a5d6:	455a      	cmp	r2, fp
 800a5d8:	dd0b      	ble.n	800a5f2 <__gethex+0x46e>
 800a5da:	2101      	movs	r1, #1
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f7ff fd69 	bl	800a0b4 <rshift>
 800a5e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5e6:	3501      	adds	r5, #1
 800a5e8:	42ab      	cmp	r3, r5
 800a5ea:	f6ff aed0 	blt.w	800a38e <__gethex+0x20a>
 800a5ee:	2701      	movs	r7, #1
 800a5f0:	e7c0      	b.n	800a574 <__gethex+0x3f0>
 800a5f2:	f016 061f 	ands.w	r6, r6, #31
 800a5f6:	d0fa      	beq.n	800a5ee <__gethex+0x46a>
 800a5f8:	4453      	add	r3, sl
 800a5fa:	f1c6 0620 	rsb	r6, r6, #32
 800a5fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a602:	f000 f9e5 	bl	800a9d0 <__hi0bits>
 800a606:	42b0      	cmp	r0, r6
 800a608:	dbe7      	blt.n	800a5da <__gethex+0x456>
 800a60a:	e7f0      	b.n	800a5ee <__gethex+0x46a>
 800a60c:	0800c4c8 	.word	0x0800c4c8

0800a610 <L_shift>:
 800a610:	f1c2 0208 	rsb	r2, r2, #8
 800a614:	0092      	lsls	r2, r2, #2
 800a616:	b570      	push	{r4, r5, r6, lr}
 800a618:	f1c2 0620 	rsb	r6, r2, #32
 800a61c:	6843      	ldr	r3, [r0, #4]
 800a61e:	6804      	ldr	r4, [r0, #0]
 800a620:	fa03 f506 	lsl.w	r5, r3, r6
 800a624:	432c      	orrs	r4, r5
 800a626:	40d3      	lsrs	r3, r2
 800a628:	6004      	str	r4, [r0, #0]
 800a62a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a62e:	4288      	cmp	r0, r1
 800a630:	d3f4      	bcc.n	800a61c <L_shift+0xc>
 800a632:	bd70      	pop	{r4, r5, r6, pc}

0800a634 <__match>:
 800a634:	b530      	push	{r4, r5, lr}
 800a636:	6803      	ldr	r3, [r0, #0]
 800a638:	3301      	adds	r3, #1
 800a63a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a63e:	b914      	cbnz	r4, 800a646 <__match+0x12>
 800a640:	6003      	str	r3, [r0, #0]
 800a642:	2001      	movs	r0, #1
 800a644:	bd30      	pop	{r4, r5, pc}
 800a646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a64e:	2d19      	cmp	r5, #25
 800a650:	bf98      	it	ls
 800a652:	3220      	addls	r2, #32
 800a654:	42a2      	cmp	r2, r4
 800a656:	d0f0      	beq.n	800a63a <__match+0x6>
 800a658:	2000      	movs	r0, #0
 800a65a:	e7f3      	b.n	800a644 <__match+0x10>

0800a65c <__hexnan>:
 800a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a660:	680b      	ldr	r3, [r1, #0]
 800a662:	115e      	asrs	r6, r3, #5
 800a664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a668:	f013 031f 	ands.w	r3, r3, #31
 800a66c:	b087      	sub	sp, #28
 800a66e:	bf18      	it	ne
 800a670:	3604      	addne	r6, #4
 800a672:	2500      	movs	r5, #0
 800a674:	1f37      	subs	r7, r6, #4
 800a676:	4690      	mov	r8, r2
 800a678:	6802      	ldr	r2, [r0, #0]
 800a67a:	9301      	str	r3, [sp, #4]
 800a67c:	4682      	mov	sl, r0
 800a67e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a682:	46b9      	mov	r9, r7
 800a684:	463c      	mov	r4, r7
 800a686:	9502      	str	r5, [sp, #8]
 800a688:	46ab      	mov	fp, r5
 800a68a:	7851      	ldrb	r1, [r2, #1]
 800a68c:	1c53      	adds	r3, r2, #1
 800a68e:	9303      	str	r3, [sp, #12]
 800a690:	b341      	cbz	r1, 800a6e4 <__hexnan+0x88>
 800a692:	4608      	mov	r0, r1
 800a694:	9205      	str	r2, [sp, #20]
 800a696:	9104      	str	r1, [sp, #16]
 800a698:	f7ff fd5e 	bl	800a158 <__hexdig_fun>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d14f      	bne.n	800a740 <__hexnan+0xe4>
 800a6a0:	9904      	ldr	r1, [sp, #16]
 800a6a2:	9a05      	ldr	r2, [sp, #20]
 800a6a4:	2920      	cmp	r1, #32
 800a6a6:	d818      	bhi.n	800a6da <__hexnan+0x7e>
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	459b      	cmp	fp, r3
 800a6ac:	dd13      	ble.n	800a6d6 <__hexnan+0x7a>
 800a6ae:	454c      	cmp	r4, r9
 800a6b0:	d206      	bcs.n	800a6c0 <__hexnan+0x64>
 800a6b2:	2d07      	cmp	r5, #7
 800a6b4:	dc04      	bgt.n	800a6c0 <__hexnan+0x64>
 800a6b6:	462a      	mov	r2, r5
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f7ff ffa8 	bl	800a610 <L_shift>
 800a6c0:	4544      	cmp	r4, r8
 800a6c2:	d950      	bls.n	800a766 <__hexnan+0x10a>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f1a4 0904 	sub.w	r9, r4, #4
 800a6ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a6d2:	464c      	mov	r4, r9
 800a6d4:	461d      	mov	r5, r3
 800a6d6:	9a03      	ldr	r2, [sp, #12]
 800a6d8:	e7d7      	b.n	800a68a <__hexnan+0x2e>
 800a6da:	2929      	cmp	r1, #41	; 0x29
 800a6dc:	d156      	bne.n	800a78c <__hexnan+0x130>
 800a6de:	3202      	adds	r2, #2
 800a6e0:	f8ca 2000 	str.w	r2, [sl]
 800a6e4:	f1bb 0f00 	cmp.w	fp, #0
 800a6e8:	d050      	beq.n	800a78c <__hexnan+0x130>
 800a6ea:	454c      	cmp	r4, r9
 800a6ec:	d206      	bcs.n	800a6fc <__hexnan+0xa0>
 800a6ee:	2d07      	cmp	r5, #7
 800a6f0:	dc04      	bgt.n	800a6fc <__hexnan+0xa0>
 800a6f2:	462a      	mov	r2, r5
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f7ff ff8a 	bl	800a610 <L_shift>
 800a6fc:	4544      	cmp	r4, r8
 800a6fe:	d934      	bls.n	800a76a <__hexnan+0x10e>
 800a700:	f1a8 0204 	sub.w	r2, r8, #4
 800a704:	4623      	mov	r3, r4
 800a706:	f853 1b04 	ldr.w	r1, [r3], #4
 800a70a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a70e:	429f      	cmp	r7, r3
 800a710:	d2f9      	bcs.n	800a706 <__hexnan+0xaa>
 800a712:	1b3b      	subs	r3, r7, r4
 800a714:	f023 0303 	bic.w	r3, r3, #3
 800a718:	3304      	adds	r3, #4
 800a71a:	3401      	adds	r4, #1
 800a71c:	3e03      	subs	r6, #3
 800a71e:	42b4      	cmp	r4, r6
 800a720:	bf88      	it	hi
 800a722:	2304      	movhi	r3, #4
 800a724:	4443      	add	r3, r8
 800a726:	2200      	movs	r2, #0
 800a728:	f843 2b04 	str.w	r2, [r3], #4
 800a72c:	429f      	cmp	r7, r3
 800a72e:	d2fb      	bcs.n	800a728 <__hexnan+0xcc>
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	b91b      	cbnz	r3, 800a73c <__hexnan+0xe0>
 800a734:	4547      	cmp	r7, r8
 800a736:	d127      	bne.n	800a788 <__hexnan+0x12c>
 800a738:	2301      	movs	r3, #1
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	2005      	movs	r0, #5
 800a73e:	e026      	b.n	800a78e <__hexnan+0x132>
 800a740:	3501      	adds	r5, #1
 800a742:	2d08      	cmp	r5, #8
 800a744:	f10b 0b01 	add.w	fp, fp, #1
 800a748:	dd06      	ble.n	800a758 <__hexnan+0xfc>
 800a74a:	4544      	cmp	r4, r8
 800a74c:	d9c3      	bls.n	800a6d6 <__hexnan+0x7a>
 800a74e:	2300      	movs	r3, #0
 800a750:	f844 3c04 	str.w	r3, [r4, #-4]
 800a754:	2501      	movs	r5, #1
 800a756:	3c04      	subs	r4, #4
 800a758:	6822      	ldr	r2, [r4, #0]
 800a75a:	f000 000f 	and.w	r0, r0, #15
 800a75e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	e7b7      	b.n	800a6d6 <__hexnan+0x7a>
 800a766:	2508      	movs	r5, #8
 800a768:	e7b5      	b.n	800a6d6 <__hexnan+0x7a>
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0df      	beq.n	800a730 <__hexnan+0xd4>
 800a770:	f04f 32ff 	mov.w	r2, #4294967295
 800a774:	f1c3 0320 	rsb	r3, r3, #32
 800a778:	fa22 f303 	lsr.w	r3, r2, r3
 800a77c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a780:	401a      	ands	r2, r3
 800a782:	f846 2c04 	str.w	r2, [r6, #-4]
 800a786:	e7d3      	b.n	800a730 <__hexnan+0xd4>
 800a788:	3f04      	subs	r7, #4
 800a78a:	e7d1      	b.n	800a730 <__hexnan+0xd4>
 800a78c:	2004      	movs	r0, #4
 800a78e:	b007      	add	sp, #28
 800a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a794 <_localeconv_r>:
 800a794:	4800      	ldr	r0, [pc, #0]	; (800a798 <_localeconv_r+0x4>)
 800a796:	4770      	bx	lr
 800a798:	20000164 	.word	0x20000164

0800a79c <malloc>:
 800a79c:	4b02      	ldr	r3, [pc, #8]	; (800a7a8 <malloc+0xc>)
 800a79e:	4601      	mov	r1, r0
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	f000 bd67 	b.w	800b274 <_malloc_r>
 800a7a6:	bf00      	nop
 800a7a8:	2000000c 	.word	0x2000000c

0800a7ac <__ascii_mbtowc>:
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	b901      	cbnz	r1, 800a7b2 <__ascii_mbtowc+0x6>
 800a7b0:	a901      	add	r1, sp, #4
 800a7b2:	b142      	cbz	r2, 800a7c6 <__ascii_mbtowc+0x1a>
 800a7b4:	b14b      	cbz	r3, 800a7ca <__ascii_mbtowc+0x1e>
 800a7b6:	7813      	ldrb	r3, [r2, #0]
 800a7b8:	600b      	str	r3, [r1, #0]
 800a7ba:	7812      	ldrb	r2, [r2, #0]
 800a7bc:	1e10      	subs	r0, r2, #0
 800a7be:	bf18      	it	ne
 800a7c0:	2001      	movne	r0, #1
 800a7c2:	b002      	add	sp, #8
 800a7c4:	4770      	bx	lr
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	e7fb      	b.n	800a7c2 <__ascii_mbtowc+0x16>
 800a7ca:	f06f 0001 	mvn.w	r0, #1
 800a7ce:	e7f8      	b.n	800a7c2 <__ascii_mbtowc+0x16>

0800a7d0 <memcpy>:
 800a7d0:	440a      	add	r2, r1
 800a7d2:	4291      	cmp	r1, r2
 800a7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d8:	d100      	bne.n	800a7dc <memcpy+0xc>
 800a7da:	4770      	bx	lr
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7e6:	4291      	cmp	r1, r2
 800a7e8:	d1f9      	bne.n	800a7de <memcpy+0xe>
 800a7ea:	bd10      	pop	{r4, pc}

0800a7ec <_Balloc>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	b976      	cbnz	r6, 800a814 <_Balloc+0x28>
 800a7f6:	2010      	movs	r0, #16
 800a7f8:	f7ff ffd0 	bl	800a79c <malloc>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	6260      	str	r0, [r4, #36]	; 0x24
 800a800:	b920      	cbnz	r0, 800a80c <_Balloc+0x20>
 800a802:	4b18      	ldr	r3, [pc, #96]	; (800a864 <_Balloc+0x78>)
 800a804:	4818      	ldr	r0, [pc, #96]	; (800a868 <_Balloc+0x7c>)
 800a806:	2166      	movs	r1, #102	; 0x66
 800a808:	f000 ff40 	bl	800b68c <__assert_func>
 800a80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a810:	6006      	str	r6, [r0, #0]
 800a812:	60c6      	str	r6, [r0, #12]
 800a814:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a816:	68f3      	ldr	r3, [r6, #12]
 800a818:	b183      	cbz	r3, 800a83c <_Balloc+0x50>
 800a81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a822:	b9b8      	cbnz	r0, 800a854 <_Balloc+0x68>
 800a824:	2101      	movs	r1, #1
 800a826:	fa01 f605 	lsl.w	r6, r1, r5
 800a82a:	1d72      	adds	r2, r6, #5
 800a82c:	0092      	lsls	r2, r2, #2
 800a82e:	4620      	mov	r0, r4
 800a830:	f000 fc9d 	bl	800b16e <_calloc_r>
 800a834:	b160      	cbz	r0, 800a850 <_Balloc+0x64>
 800a836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a83a:	e00e      	b.n	800a85a <_Balloc+0x6e>
 800a83c:	2221      	movs	r2, #33	; 0x21
 800a83e:	2104      	movs	r1, #4
 800a840:	4620      	mov	r0, r4
 800a842:	f000 fc94 	bl	800b16e <_calloc_r>
 800a846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a848:	60f0      	str	r0, [r6, #12]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e4      	bne.n	800a81a <_Balloc+0x2e>
 800a850:	2000      	movs	r0, #0
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	6802      	ldr	r2, [r0, #0]
 800a856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a85a:	2300      	movs	r3, #0
 800a85c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a860:	e7f7      	b.n	800a852 <_Balloc+0x66>
 800a862:	bf00      	nop
 800a864:	0800c456 	.word	0x0800c456
 800a868:	0800c554 	.word	0x0800c554

0800a86c <_Bfree>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a870:	4605      	mov	r5, r0
 800a872:	460c      	mov	r4, r1
 800a874:	b976      	cbnz	r6, 800a894 <_Bfree+0x28>
 800a876:	2010      	movs	r0, #16
 800a878:	f7ff ff90 	bl	800a79c <malloc>
 800a87c:	4602      	mov	r2, r0
 800a87e:	6268      	str	r0, [r5, #36]	; 0x24
 800a880:	b920      	cbnz	r0, 800a88c <_Bfree+0x20>
 800a882:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <_Bfree+0x3c>)
 800a884:	4809      	ldr	r0, [pc, #36]	; (800a8ac <_Bfree+0x40>)
 800a886:	218a      	movs	r1, #138	; 0x8a
 800a888:	f000 ff00 	bl	800b68c <__assert_func>
 800a88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a890:	6006      	str	r6, [r0, #0]
 800a892:	60c6      	str	r6, [r0, #12]
 800a894:	b13c      	cbz	r4, 800a8a6 <_Bfree+0x3a>
 800a896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a898:	6862      	ldr	r2, [r4, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8a0:	6021      	str	r1, [r4, #0]
 800a8a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	0800c456 	.word	0x0800c456
 800a8ac:	0800c554 	.word	0x0800c554

0800a8b0 <__multadd>:
 800a8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b4:	690d      	ldr	r5, [r1, #16]
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	461e      	mov	r6, r3
 800a8bc:	f101 0c14 	add.w	ip, r1, #20
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8c6:	b299      	uxth	r1, r3
 800a8c8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8cc:	0c1e      	lsrs	r6, r3, #16
 800a8ce:	0c0b      	lsrs	r3, r1, #16
 800a8d0:	fb02 3306 	mla	r3, r2, r6, r3
 800a8d4:	b289      	uxth	r1, r1
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8dc:	4285      	cmp	r5, r0
 800a8de:	f84c 1b04 	str.w	r1, [ip], #4
 800a8e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8e6:	dcec      	bgt.n	800a8c2 <__multadd+0x12>
 800a8e8:	b30e      	cbz	r6, 800a92e <__multadd+0x7e>
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	42ab      	cmp	r3, r5
 800a8ee:	dc19      	bgt.n	800a924 <__multadd+0x74>
 800a8f0:	6861      	ldr	r1, [r4, #4]
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	3101      	adds	r1, #1
 800a8f6:	f7ff ff79 	bl	800a7ec <_Balloc>
 800a8fa:	4680      	mov	r8, r0
 800a8fc:	b928      	cbnz	r0, 800a90a <__multadd+0x5a>
 800a8fe:	4602      	mov	r2, r0
 800a900:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <__multadd+0x84>)
 800a902:	480d      	ldr	r0, [pc, #52]	; (800a938 <__multadd+0x88>)
 800a904:	21b5      	movs	r1, #181	; 0xb5
 800a906:	f000 fec1 	bl	800b68c <__assert_func>
 800a90a:	6922      	ldr	r2, [r4, #16]
 800a90c:	3202      	adds	r2, #2
 800a90e:	f104 010c 	add.w	r1, r4, #12
 800a912:	0092      	lsls	r2, r2, #2
 800a914:	300c      	adds	r0, #12
 800a916:	f7ff ff5b 	bl	800a7d0 <memcpy>
 800a91a:	4621      	mov	r1, r4
 800a91c:	4638      	mov	r0, r7
 800a91e:	f7ff ffa5 	bl	800a86c <_Bfree>
 800a922:	4644      	mov	r4, r8
 800a924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a928:	3501      	adds	r5, #1
 800a92a:	615e      	str	r6, [r3, #20]
 800a92c:	6125      	str	r5, [r4, #16]
 800a92e:	4620      	mov	r0, r4
 800a930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a934:	0800c4c8 	.word	0x0800c4c8
 800a938:	0800c554 	.word	0x0800c554

0800a93c <__s2b>:
 800a93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a940:	460c      	mov	r4, r1
 800a942:	4615      	mov	r5, r2
 800a944:	461f      	mov	r7, r3
 800a946:	2209      	movs	r2, #9
 800a948:	3308      	adds	r3, #8
 800a94a:	4606      	mov	r6, r0
 800a94c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a950:	2100      	movs	r1, #0
 800a952:	2201      	movs	r2, #1
 800a954:	429a      	cmp	r2, r3
 800a956:	db09      	blt.n	800a96c <__s2b+0x30>
 800a958:	4630      	mov	r0, r6
 800a95a:	f7ff ff47 	bl	800a7ec <_Balloc>
 800a95e:	b940      	cbnz	r0, 800a972 <__s2b+0x36>
 800a960:	4602      	mov	r2, r0
 800a962:	4b19      	ldr	r3, [pc, #100]	; (800a9c8 <__s2b+0x8c>)
 800a964:	4819      	ldr	r0, [pc, #100]	; (800a9cc <__s2b+0x90>)
 800a966:	21ce      	movs	r1, #206	; 0xce
 800a968:	f000 fe90 	bl	800b68c <__assert_func>
 800a96c:	0052      	lsls	r2, r2, #1
 800a96e:	3101      	adds	r1, #1
 800a970:	e7f0      	b.n	800a954 <__s2b+0x18>
 800a972:	9b08      	ldr	r3, [sp, #32]
 800a974:	6143      	str	r3, [r0, #20]
 800a976:	2d09      	cmp	r5, #9
 800a978:	f04f 0301 	mov.w	r3, #1
 800a97c:	6103      	str	r3, [r0, #16]
 800a97e:	dd16      	ble.n	800a9ae <__s2b+0x72>
 800a980:	f104 0909 	add.w	r9, r4, #9
 800a984:	46c8      	mov	r8, r9
 800a986:	442c      	add	r4, r5
 800a988:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a98c:	4601      	mov	r1, r0
 800a98e:	3b30      	subs	r3, #48	; 0x30
 800a990:	220a      	movs	r2, #10
 800a992:	4630      	mov	r0, r6
 800a994:	f7ff ff8c 	bl	800a8b0 <__multadd>
 800a998:	45a0      	cmp	r8, r4
 800a99a:	d1f5      	bne.n	800a988 <__s2b+0x4c>
 800a99c:	f1a5 0408 	sub.w	r4, r5, #8
 800a9a0:	444c      	add	r4, r9
 800a9a2:	1b2d      	subs	r5, r5, r4
 800a9a4:	1963      	adds	r3, r4, r5
 800a9a6:	42bb      	cmp	r3, r7
 800a9a8:	db04      	blt.n	800a9b4 <__s2b+0x78>
 800a9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ae:	340a      	adds	r4, #10
 800a9b0:	2509      	movs	r5, #9
 800a9b2:	e7f6      	b.n	800a9a2 <__s2b+0x66>
 800a9b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9b8:	4601      	mov	r1, r0
 800a9ba:	3b30      	subs	r3, #48	; 0x30
 800a9bc:	220a      	movs	r2, #10
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f7ff ff76 	bl	800a8b0 <__multadd>
 800a9c4:	e7ee      	b.n	800a9a4 <__s2b+0x68>
 800a9c6:	bf00      	nop
 800a9c8:	0800c4c8 	.word	0x0800c4c8
 800a9cc:	0800c554 	.word	0x0800c554

0800a9d0 <__hi0bits>:
 800a9d0:	0c03      	lsrs	r3, r0, #16
 800a9d2:	041b      	lsls	r3, r3, #16
 800a9d4:	b9d3      	cbnz	r3, 800aa0c <__hi0bits+0x3c>
 800a9d6:	0400      	lsls	r0, r0, #16
 800a9d8:	2310      	movs	r3, #16
 800a9da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9de:	bf04      	itt	eq
 800a9e0:	0200      	lsleq	r0, r0, #8
 800a9e2:	3308      	addeq	r3, #8
 800a9e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9e8:	bf04      	itt	eq
 800a9ea:	0100      	lsleq	r0, r0, #4
 800a9ec:	3304      	addeq	r3, #4
 800a9ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9f2:	bf04      	itt	eq
 800a9f4:	0080      	lsleq	r0, r0, #2
 800a9f6:	3302      	addeq	r3, #2
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	db05      	blt.n	800aa08 <__hi0bits+0x38>
 800a9fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa00:	f103 0301 	add.w	r3, r3, #1
 800aa04:	bf08      	it	eq
 800aa06:	2320      	moveq	r3, #32
 800aa08:	4618      	mov	r0, r3
 800aa0a:	4770      	bx	lr
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	e7e4      	b.n	800a9da <__hi0bits+0xa>

0800aa10 <__lo0bits>:
 800aa10:	6803      	ldr	r3, [r0, #0]
 800aa12:	f013 0207 	ands.w	r2, r3, #7
 800aa16:	4601      	mov	r1, r0
 800aa18:	d00b      	beq.n	800aa32 <__lo0bits+0x22>
 800aa1a:	07da      	lsls	r2, r3, #31
 800aa1c:	d423      	bmi.n	800aa66 <__lo0bits+0x56>
 800aa1e:	0798      	lsls	r0, r3, #30
 800aa20:	bf49      	itett	mi
 800aa22:	085b      	lsrmi	r3, r3, #1
 800aa24:	089b      	lsrpl	r3, r3, #2
 800aa26:	2001      	movmi	r0, #1
 800aa28:	600b      	strmi	r3, [r1, #0]
 800aa2a:	bf5c      	itt	pl
 800aa2c:	600b      	strpl	r3, [r1, #0]
 800aa2e:	2002      	movpl	r0, #2
 800aa30:	4770      	bx	lr
 800aa32:	b298      	uxth	r0, r3
 800aa34:	b9a8      	cbnz	r0, 800aa62 <__lo0bits+0x52>
 800aa36:	0c1b      	lsrs	r3, r3, #16
 800aa38:	2010      	movs	r0, #16
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	b90a      	cbnz	r2, 800aa42 <__lo0bits+0x32>
 800aa3e:	3008      	adds	r0, #8
 800aa40:	0a1b      	lsrs	r3, r3, #8
 800aa42:	071a      	lsls	r2, r3, #28
 800aa44:	bf04      	itt	eq
 800aa46:	091b      	lsreq	r3, r3, #4
 800aa48:	3004      	addeq	r0, #4
 800aa4a:	079a      	lsls	r2, r3, #30
 800aa4c:	bf04      	itt	eq
 800aa4e:	089b      	lsreq	r3, r3, #2
 800aa50:	3002      	addeq	r0, #2
 800aa52:	07da      	lsls	r2, r3, #31
 800aa54:	d403      	bmi.n	800aa5e <__lo0bits+0x4e>
 800aa56:	085b      	lsrs	r3, r3, #1
 800aa58:	f100 0001 	add.w	r0, r0, #1
 800aa5c:	d005      	beq.n	800aa6a <__lo0bits+0x5a>
 800aa5e:	600b      	str	r3, [r1, #0]
 800aa60:	4770      	bx	lr
 800aa62:	4610      	mov	r0, r2
 800aa64:	e7e9      	b.n	800aa3a <__lo0bits+0x2a>
 800aa66:	2000      	movs	r0, #0
 800aa68:	4770      	bx	lr
 800aa6a:	2020      	movs	r0, #32
 800aa6c:	4770      	bx	lr
	...

0800aa70 <__i2b>:
 800aa70:	b510      	push	{r4, lr}
 800aa72:	460c      	mov	r4, r1
 800aa74:	2101      	movs	r1, #1
 800aa76:	f7ff feb9 	bl	800a7ec <_Balloc>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	b928      	cbnz	r0, 800aa8a <__i2b+0x1a>
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <__i2b+0x24>)
 800aa80:	4805      	ldr	r0, [pc, #20]	; (800aa98 <__i2b+0x28>)
 800aa82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa86:	f000 fe01 	bl	800b68c <__assert_func>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	6144      	str	r4, [r0, #20]
 800aa8e:	6103      	str	r3, [r0, #16]
 800aa90:	bd10      	pop	{r4, pc}
 800aa92:	bf00      	nop
 800aa94:	0800c4c8 	.word	0x0800c4c8
 800aa98:	0800c554 	.word	0x0800c554

0800aa9c <__multiply>:
 800aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	4691      	mov	r9, r2
 800aaa2:	690a      	ldr	r2, [r1, #16]
 800aaa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	bfb8      	it	lt
 800aaac:	460b      	movlt	r3, r1
 800aaae:	460c      	mov	r4, r1
 800aab0:	bfbc      	itt	lt
 800aab2:	464c      	movlt	r4, r9
 800aab4:	4699      	movlt	r9, r3
 800aab6:	6927      	ldr	r7, [r4, #16]
 800aab8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aabc:	68a3      	ldr	r3, [r4, #8]
 800aabe:	6861      	ldr	r1, [r4, #4]
 800aac0:	eb07 060a 	add.w	r6, r7, sl
 800aac4:	42b3      	cmp	r3, r6
 800aac6:	b085      	sub	sp, #20
 800aac8:	bfb8      	it	lt
 800aaca:	3101      	addlt	r1, #1
 800aacc:	f7ff fe8e 	bl	800a7ec <_Balloc>
 800aad0:	b930      	cbnz	r0, 800aae0 <__multiply+0x44>
 800aad2:	4602      	mov	r2, r0
 800aad4:	4b44      	ldr	r3, [pc, #272]	; (800abe8 <__multiply+0x14c>)
 800aad6:	4845      	ldr	r0, [pc, #276]	; (800abec <__multiply+0x150>)
 800aad8:	f240 115d 	movw	r1, #349	; 0x15d
 800aadc:	f000 fdd6 	bl	800b68c <__assert_func>
 800aae0:	f100 0514 	add.w	r5, r0, #20
 800aae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aae8:	462b      	mov	r3, r5
 800aaea:	2200      	movs	r2, #0
 800aaec:	4543      	cmp	r3, r8
 800aaee:	d321      	bcc.n	800ab34 <__multiply+0x98>
 800aaf0:	f104 0314 	add.w	r3, r4, #20
 800aaf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aaf8:	f109 0314 	add.w	r3, r9, #20
 800aafc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab00:	9202      	str	r2, [sp, #8]
 800ab02:	1b3a      	subs	r2, r7, r4
 800ab04:	3a15      	subs	r2, #21
 800ab06:	f022 0203 	bic.w	r2, r2, #3
 800ab0a:	3204      	adds	r2, #4
 800ab0c:	f104 0115 	add.w	r1, r4, #21
 800ab10:	428f      	cmp	r7, r1
 800ab12:	bf38      	it	cc
 800ab14:	2204      	movcc	r2, #4
 800ab16:	9201      	str	r2, [sp, #4]
 800ab18:	9a02      	ldr	r2, [sp, #8]
 800ab1a:	9303      	str	r3, [sp, #12]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d80c      	bhi.n	800ab3a <__multiply+0x9e>
 800ab20:	2e00      	cmp	r6, #0
 800ab22:	dd03      	ble.n	800ab2c <__multiply+0x90>
 800ab24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d05a      	beq.n	800abe2 <__multiply+0x146>
 800ab2c:	6106      	str	r6, [r0, #16]
 800ab2e:	b005      	add	sp, #20
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	f843 2b04 	str.w	r2, [r3], #4
 800ab38:	e7d8      	b.n	800aaec <__multiply+0x50>
 800ab3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab3e:	f1ba 0f00 	cmp.w	sl, #0
 800ab42:	d024      	beq.n	800ab8e <__multiply+0xf2>
 800ab44:	f104 0e14 	add.w	lr, r4, #20
 800ab48:	46a9      	mov	r9, r5
 800ab4a:	f04f 0c00 	mov.w	ip, #0
 800ab4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab52:	f8d9 1000 	ldr.w	r1, [r9]
 800ab56:	fa1f fb82 	uxth.w	fp, r2
 800ab5a:	b289      	uxth	r1, r1
 800ab5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab64:	f8d9 2000 	ldr.w	r2, [r9]
 800ab68:	4461      	add	r1, ip
 800ab6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab76:	b289      	uxth	r1, r1
 800ab78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab7c:	4577      	cmp	r7, lr
 800ab7e:	f849 1b04 	str.w	r1, [r9], #4
 800ab82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab86:	d8e2      	bhi.n	800ab4e <__multiply+0xb2>
 800ab88:	9a01      	ldr	r2, [sp, #4]
 800ab8a:	f845 c002 	str.w	ip, [r5, r2]
 800ab8e:	9a03      	ldr	r2, [sp, #12]
 800ab90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab94:	3304      	adds	r3, #4
 800ab96:	f1b9 0f00 	cmp.w	r9, #0
 800ab9a:	d020      	beq.n	800abde <__multiply+0x142>
 800ab9c:	6829      	ldr	r1, [r5, #0]
 800ab9e:	f104 0c14 	add.w	ip, r4, #20
 800aba2:	46ae      	mov	lr, r5
 800aba4:	f04f 0a00 	mov.w	sl, #0
 800aba8:	f8bc b000 	ldrh.w	fp, [ip]
 800abac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800abb0:	fb09 220b 	mla	r2, r9, fp, r2
 800abb4:	4492      	add	sl, r2
 800abb6:	b289      	uxth	r1, r1
 800abb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800abbc:	f84e 1b04 	str.w	r1, [lr], #4
 800abc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800abc4:	f8be 1000 	ldrh.w	r1, [lr]
 800abc8:	0c12      	lsrs	r2, r2, #16
 800abca:	fb09 1102 	mla	r1, r9, r2, r1
 800abce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800abd2:	4567      	cmp	r7, ip
 800abd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abd8:	d8e6      	bhi.n	800aba8 <__multiply+0x10c>
 800abda:	9a01      	ldr	r2, [sp, #4]
 800abdc:	50a9      	str	r1, [r5, r2]
 800abde:	3504      	adds	r5, #4
 800abe0:	e79a      	b.n	800ab18 <__multiply+0x7c>
 800abe2:	3e01      	subs	r6, #1
 800abe4:	e79c      	b.n	800ab20 <__multiply+0x84>
 800abe6:	bf00      	nop
 800abe8:	0800c4c8 	.word	0x0800c4c8
 800abec:	0800c554 	.word	0x0800c554

0800abf0 <__pow5mult>:
 800abf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf4:	4615      	mov	r5, r2
 800abf6:	f012 0203 	ands.w	r2, r2, #3
 800abfa:	4606      	mov	r6, r0
 800abfc:	460f      	mov	r7, r1
 800abfe:	d007      	beq.n	800ac10 <__pow5mult+0x20>
 800ac00:	4c25      	ldr	r4, [pc, #148]	; (800ac98 <__pow5mult+0xa8>)
 800ac02:	3a01      	subs	r2, #1
 800ac04:	2300      	movs	r3, #0
 800ac06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac0a:	f7ff fe51 	bl	800a8b0 <__multadd>
 800ac0e:	4607      	mov	r7, r0
 800ac10:	10ad      	asrs	r5, r5, #2
 800ac12:	d03d      	beq.n	800ac90 <__pow5mult+0xa0>
 800ac14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac16:	b97c      	cbnz	r4, 800ac38 <__pow5mult+0x48>
 800ac18:	2010      	movs	r0, #16
 800ac1a:	f7ff fdbf 	bl	800a79c <malloc>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	6270      	str	r0, [r6, #36]	; 0x24
 800ac22:	b928      	cbnz	r0, 800ac30 <__pow5mult+0x40>
 800ac24:	4b1d      	ldr	r3, [pc, #116]	; (800ac9c <__pow5mult+0xac>)
 800ac26:	481e      	ldr	r0, [pc, #120]	; (800aca0 <__pow5mult+0xb0>)
 800ac28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac2c:	f000 fd2e 	bl	800b68c <__assert_func>
 800ac30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac34:	6004      	str	r4, [r0, #0]
 800ac36:	60c4      	str	r4, [r0, #12]
 800ac38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac40:	b94c      	cbnz	r4, 800ac56 <__pow5mult+0x66>
 800ac42:	f240 2171 	movw	r1, #625	; 0x271
 800ac46:	4630      	mov	r0, r6
 800ac48:	f7ff ff12 	bl	800aa70 <__i2b>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac52:	4604      	mov	r4, r0
 800ac54:	6003      	str	r3, [r0, #0]
 800ac56:	f04f 0900 	mov.w	r9, #0
 800ac5a:	07eb      	lsls	r3, r5, #31
 800ac5c:	d50a      	bpl.n	800ac74 <__pow5mult+0x84>
 800ac5e:	4639      	mov	r1, r7
 800ac60:	4622      	mov	r2, r4
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7ff ff1a 	bl	800aa9c <__multiply>
 800ac68:	4639      	mov	r1, r7
 800ac6a:	4680      	mov	r8, r0
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff fdfd 	bl	800a86c <_Bfree>
 800ac72:	4647      	mov	r7, r8
 800ac74:	106d      	asrs	r5, r5, #1
 800ac76:	d00b      	beq.n	800ac90 <__pow5mult+0xa0>
 800ac78:	6820      	ldr	r0, [r4, #0]
 800ac7a:	b938      	cbnz	r0, 800ac8c <__pow5mult+0x9c>
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4630      	mov	r0, r6
 800ac82:	f7ff ff0b 	bl	800aa9c <__multiply>
 800ac86:	6020      	str	r0, [r4, #0]
 800ac88:	f8c0 9000 	str.w	r9, [r0]
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	e7e4      	b.n	800ac5a <__pow5mult+0x6a>
 800ac90:	4638      	mov	r0, r7
 800ac92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac96:	bf00      	nop
 800ac98:	0800c6a0 	.word	0x0800c6a0
 800ac9c:	0800c456 	.word	0x0800c456
 800aca0:	0800c554 	.word	0x0800c554

0800aca4 <__lshift>:
 800aca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca8:	460c      	mov	r4, r1
 800acaa:	6849      	ldr	r1, [r1, #4]
 800acac:	6923      	ldr	r3, [r4, #16]
 800acae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	4607      	mov	r7, r0
 800acb6:	4691      	mov	r9, r2
 800acb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acbc:	f108 0601 	add.w	r6, r8, #1
 800acc0:	42b3      	cmp	r3, r6
 800acc2:	db0b      	blt.n	800acdc <__lshift+0x38>
 800acc4:	4638      	mov	r0, r7
 800acc6:	f7ff fd91 	bl	800a7ec <_Balloc>
 800acca:	4605      	mov	r5, r0
 800accc:	b948      	cbnz	r0, 800ace2 <__lshift+0x3e>
 800acce:	4602      	mov	r2, r0
 800acd0:	4b2a      	ldr	r3, [pc, #168]	; (800ad7c <__lshift+0xd8>)
 800acd2:	482b      	ldr	r0, [pc, #172]	; (800ad80 <__lshift+0xdc>)
 800acd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acd8:	f000 fcd8 	bl	800b68c <__assert_func>
 800acdc:	3101      	adds	r1, #1
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	e7ee      	b.n	800acc0 <__lshift+0x1c>
 800ace2:	2300      	movs	r3, #0
 800ace4:	f100 0114 	add.w	r1, r0, #20
 800ace8:	f100 0210 	add.w	r2, r0, #16
 800acec:	4618      	mov	r0, r3
 800acee:	4553      	cmp	r3, sl
 800acf0:	db37      	blt.n	800ad62 <__lshift+0xbe>
 800acf2:	6920      	ldr	r0, [r4, #16]
 800acf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acf8:	f104 0314 	add.w	r3, r4, #20
 800acfc:	f019 091f 	ands.w	r9, r9, #31
 800ad00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad08:	d02f      	beq.n	800ad6a <__lshift+0xc6>
 800ad0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ad0e:	468a      	mov	sl, r1
 800ad10:	f04f 0c00 	mov.w	ip, #0
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	fa02 f209 	lsl.w	r2, r2, r9
 800ad1a:	ea42 020c 	orr.w	r2, r2, ip
 800ad1e:	f84a 2b04 	str.w	r2, [sl], #4
 800ad22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad26:	4298      	cmp	r0, r3
 800ad28:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad2c:	d8f2      	bhi.n	800ad14 <__lshift+0x70>
 800ad2e:	1b03      	subs	r3, r0, r4
 800ad30:	3b15      	subs	r3, #21
 800ad32:	f023 0303 	bic.w	r3, r3, #3
 800ad36:	3304      	adds	r3, #4
 800ad38:	f104 0215 	add.w	r2, r4, #21
 800ad3c:	4290      	cmp	r0, r2
 800ad3e:	bf38      	it	cc
 800ad40:	2304      	movcc	r3, #4
 800ad42:	f841 c003 	str.w	ip, [r1, r3]
 800ad46:	f1bc 0f00 	cmp.w	ip, #0
 800ad4a:	d001      	beq.n	800ad50 <__lshift+0xac>
 800ad4c:	f108 0602 	add.w	r6, r8, #2
 800ad50:	3e01      	subs	r6, #1
 800ad52:	4638      	mov	r0, r7
 800ad54:	612e      	str	r6, [r5, #16]
 800ad56:	4621      	mov	r1, r4
 800ad58:	f7ff fd88 	bl	800a86c <_Bfree>
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad66:	3301      	adds	r3, #1
 800ad68:	e7c1      	b.n	800acee <__lshift+0x4a>
 800ad6a:	3904      	subs	r1, #4
 800ad6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad70:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad74:	4298      	cmp	r0, r3
 800ad76:	d8f9      	bhi.n	800ad6c <__lshift+0xc8>
 800ad78:	e7ea      	b.n	800ad50 <__lshift+0xac>
 800ad7a:	bf00      	nop
 800ad7c:	0800c4c8 	.word	0x0800c4c8
 800ad80:	0800c554 	.word	0x0800c554

0800ad84 <__mcmp>:
 800ad84:	b530      	push	{r4, r5, lr}
 800ad86:	6902      	ldr	r2, [r0, #16]
 800ad88:	690c      	ldr	r4, [r1, #16]
 800ad8a:	1b12      	subs	r2, r2, r4
 800ad8c:	d10e      	bne.n	800adac <__mcmp+0x28>
 800ad8e:	f100 0314 	add.w	r3, r0, #20
 800ad92:	3114      	adds	r1, #20
 800ad94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ada0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ada4:	42a5      	cmp	r5, r4
 800ada6:	d003      	beq.n	800adb0 <__mcmp+0x2c>
 800ada8:	d305      	bcc.n	800adb6 <__mcmp+0x32>
 800adaa:	2201      	movs	r2, #1
 800adac:	4610      	mov	r0, r2
 800adae:	bd30      	pop	{r4, r5, pc}
 800adb0:	4283      	cmp	r3, r0
 800adb2:	d3f3      	bcc.n	800ad9c <__mcmp+0x18>
 800adb4:	e7fa      	b.n	800adac <__mcmp+0x28>
 800adb6:	f04f 32ff 	mov.w	r2, #4294967295
 800adba:	e7f7      	b.n	800adac <__mcmp+0x28>

0800adbc <__mdiff>:
 800adbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	460c      	mov	r4, r1
 800adc2:	4606      	mov	r6, r0
 800adc4:	4611      	mov	r1, r2
 800adc6:	4620      	mov	r0, r4
 800adc8:	4690      	mov	r8, r2
 800adca:	f7ff ffdb 	bl	800ad84 <__mcmp>
 800adce:	1e05      	subs	r5, r0, #0
 800add0:	d110      	bne.n	800adf4 <__mdiff+0x38>
 800add2:	4629      	mov	r1, r5
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff fd09 	bl	800a7ec <_Balloc>
 800adda:	b930      	cbnz	r0, 800adea <__mdiff+0x2e>
 800addc:	4b3a      	ldr	r3, [pc, #232]	; (800aec8 <__mdiff+0x10c>)
 800adde:	4602      	mov	r2, r0
 800ade0:	f240 2132 	movw	r1, #562	; 0x232
 800ade4:	4839      	ldr	r0, [pc, #228]	; (800aecc <__mdiff+0x110>)
 800ade6:	f000 fc51 	bl	800b68c <__assert_func>
 800adea:	2301      	movs	r3, #1
 800adec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf4:	bfa4      	itt	ge
 800adf6:	4643      	movge	r3, r8
 800adf8:	46a0      	movge	r8, r4
 800adfa:	4630      	mov	r0, r6
 800adfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae00:	bfa6      	itte	ge
 800ae02:	461c      	movge	r4, r3
 800ae04:	2500      	movge	r5, #0
 800ae06:	2501      	movlt	r5, #1
 800ae08:	f7ff fcf0 	bl	800a7ec <_Balloc>
 800ae0c:	b920      	cbnz	r0, 800ae18 <__mdiff+0x5c>
 800ae0e:	4b2e      	ldr	r3, [pc, #184]	; (800aec8 <__mdiff+0x10c>)
 800ae10:	4602      	mov	r2, r0
 800ae12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae16:	e7e5      	b.n	800ade4 <__mdiff+0x28>
 800ae18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae1c:	6926      	ldr	r6, [r4, #16]
 800ae1e:	60c5      	str	r5, [r0, #12]
 800ae20:	f104 0914 	add.w	r9, r4, #20
 800ae24:	f108 0514 	add.w	r5, r8, #20
 800ae28:	f100 0e14 	add.w	lr, r0, #20
 800ae2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae34:	f108 0210 	add.w	r2, r8, #16
 800ae38:	46f2      	mov	sl, lr
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae44:	fa1f f883 	uxth.w	r8, r3
 800ae48:	fa11 f18b 	uxtah	r1, r1, fp
 800ae4c:	0c1b      	lsrs	r3, r3, #16
 800ae4e:	eba1 0808 	sub.w	r8, r1, r8
 800ae52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae5a:	fa1f f888 	uxth.w	r8, r8
 800ae5e:	1419      	asrs	r1, r3, #16
 800ae60:	454e      	cmp	r6, r9
 800ae62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae66:	f84a 3b04 	str.w	r3, [sl], #4
 800ae6a:	d8e7      	bhi.n	800ae3c <__mdiff+0x80>
 800ae6c:	1b33      	subs	r3, r6, r4
 800ae6e:	3b15      	subs	r3, #21
 800ae70:	f023 0303 	bic.w	r3, r3, #3
 800ae74:	3304      	adds	r3, #4
 800ae76:	3415      	adds	r4, #21
 800ae78:	42a6      	cmp	r6, r4
 800ae7a:	bf38      	it	cc
 800ae7c:	2304      	movcc	r3, #4
 800ae7e:	441d      	add	r5, r3
 800ae80:	4473      	add	r3, lr
 800ae82:	469e      	mov	lr, r3
 800ae84:	462e      	mov	r6, r5
 800ae86:	4566      	cmp	r6, ip
 800ae88:	d30e      	bcc.n	800aea8 <__mdiff+0xec>
 800ae8a:	f10c 0203 	add.w	r2, ip, #3
 800ae8e:	1b52      	subs	r2, r2, r5
 800ae90:	f022 0203 	bic.w	r2, r2, #3
 800ae94:	3d03      	subs	r5, #3
 800ae96:	45ac      	cmp	ip, r5
 800ae98:	bf38      	it	cc
 800ae9a:	2200      	movcc	r2, #0
 800ae9c:	441a      	add	r2, r3
 800ae9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aea2:	b17b      	cbz	r3, 800aec4 <__mdiff+0x108>
 800aea4:	6107      	str	r7, [r0, #16]
 800aea6:	e7a3      	b.n	800adf0 <__mdiff+0x34>
 800aea8:	f856 8b04 	ldr.w	r8, [r6], #4
 800aeac:	fa11 f288 	uxtah	r2, r1, r8
 800aeb0:	1414      	asrs	r4, r2, #16
 800aeb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aeb6:	b292      	uxth	r2, r2
 800aeb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aebc:	f84e 2b04 	str.w	r2, [lr], #4
 800aec0:	1421      	asrs	r1, r4, #16
 800aec2:	e7e0      	b.n	800ae86 <__mdiff+0xca>
 800aec4:	3f01      	subs	r7, #1
 800aec6:	e7ea      	b.n	800ae9e <__mdiff+0xe2>
 800aec8:	0800c4c8 	.word	0x0800c4c8
 800aecc:	0800c554 	.word	0x0800c554

0800aed0 <__ulp>:
 800aed0:	b082      	sub	sp, #8
 800aed2:	ed8d 0b00 	vstr	d0, [sp]
 800aed6:	9b01      	ldr	r3, [sp, #4]
 800aed8:	4912      	ldr	r1, [pc, #72]	; (800af24 <__ulp+0x54>)
 800aeda:	4019      	ands	r1, r3
 800aedc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aee0:	2900      	cmp	r1, #0
 800aee2:	dd05      	ble.n	800aef0 <__ulp+0x20>
 800aee4:	2200      	movs	r2, #0
 800aee6:	460b      	mov	r3, r1
 800aee8:	ec43 2b10 	vmov	d0, r2, r3
 800aeec:	b002      	add	sp, #8
 800aeee:	4770      	bx	lr
 800aef0:	4249      	negs	r1, r1
 800aef2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aef6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aefa:	f04f 0200 	mov.w	r2, #0
 800aefe:	f04f 0300 	mov.w	r3, #0
 800af02:	da04      	bge.n	800af0e <__ulp+0x3e>
 800af04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af08:	fa41 f300 	asr.w	r3, r1, r0
 800af0c:	e7ec      	b.n	800aee8 <__ulp+0x18>
 800af0e:	f1a0 0114 	sub.w	r1, r0, #20
 800af12:	291e      	cmp	r1, #30
 800af14:	bfda      	itte	le
 800af16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800af1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800af1e:	2101      	movgt	r1, #1
 800af20:	460a      	mov	r2, r1
 800af22:	e7e1      	b.n	800aee8 <__ulp+0x18>
 800af24:	7ff00000 	.word	0x7ff00000

0800af28 <__b2d>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	6905      	ldr	r5, [r0, #16]
 800af2c:	f100 0714 	add.w	r7, r0, #20
 800af30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af34:	1f2e      	subs	r6, r5, #4
 800af36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800af3a:	4620      	mov	r0, r4
 800af3c:	f7ff fd48 	bl	800a9d0 <__hi0bits>
 800af40:	f1c0 0320 	rsb	r3, r0, #32
 800af44:	280a      	cmp	r0, #10
 800af46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800afc4 <__b2d+0x9c>
 800af4a:	600b      	str	r3, [r1, #0]
 800af4c:	dc14      	bgt.n	800af78 <__b2d+0x50>
 800af4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800af52:	fa24 f10e 	lsr.w	r1, r4, lr
 800af56:	42b7      	cmp	r7, r6
 800af58:	ea41 030c 	orr.w	r3, r1, ip
 800af5c:	bf34      	ite	cc
 800af5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af62:	2100      	movcs	r1, #0
 800af64:	3015      	adds	r0, #21
 800af66:	fa04 f000 	lsl.w	r0, r4, r0
 800af6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800af6e:	ea40 0201 	orr.w	r2, r0, r1
 800af72:	ec43 2b10 	vmov	d0, r2, r3
 800af76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af78:	42b7      	cmp	r7, r6
 800af7a:	bf3a      	itte	cc
 800af7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af80:	f1a5 0608 	subcc.w	r6, r5, #8
 800af84:	2100      	movcs	r1, #0
 800af86:	380b      	subs	r0, #11
 800af88:	d017      	beq.n	800afba <__b2d+0x92>
 800af8a:	f1c0 0c20 	rsb	ip, r0, #32
 800af8e:	fa04 f500 	lsl.w	r5, r4, r0
 800af92:	42be      	cmp	r6, r7
 800af94:	fa21 f40c 	lsr.w	r4, r1, ip
 800af98:	ea45 0504 	orr.w	r5, r5, r4
 800af9c:	bf8c      	ite	hi
 800af9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800afa2:	2400      	movls	r4, #0
 800afa4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800afa8:	fa01 f000 	lsl.w	r0, r1, r0
 800afac:	fa24 f40c 	lsr.w	r4, r4, ip
 800afb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800afb4:	ea40 0204 	orr.w	r2, r0, r4
 800afb8:	e7db      	b.n	800af72 <__b2d+0x4a>
 800afba:	ea44 030c 	orr.w	r3, r4, ip
 800afbe:	460a      	mov	r2, r1
 800afc0:	e7d7      	b.n	800af72 <__b2d+0x4a>
 800afc2:	bf00      	nop
 800afc4:	3ff00000 	.word	0x3ff00000

0800afc8 <__d2b>:
 800afc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afcc:	4689      	mov	r9, r1
 800afce:	2101      	movs	r1, #1
 800afd0:	ec57 6b10 	vmov	r6, r7, d0
 800afd4:	4690      	mov	r8, r2
 800afd6:	f7ff fc09 	bl	800a7ec <_Balloc>
 800afda:	4604      	mov	r4, r0
 800afdc:	b930      	cbnz	r0, 800afec <__d2b+0x24>
 800afde:	4602      	mov	r2, r0
 800afe0:	4b25      	ldr	r3, [pc, #148]	; (800b078 <__d2b+0xb0>)
 800afe2:	4826      	ldr	r0, [pc, #152]	; (800b07c <__d2b+0xb4>)
 800afe4:	f240 310a 	movw	r1, #778	; 0x30a
 800afe8:	f000 fb50 	bl	800b68c <__assert_func>
 800afec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aff4:	bb35      	cbnz	r5, 800b044 <__d2b+0x7c>
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	d028      	beq.n	800b04e <__d2b+0x86>
 800affc:	4668      	mov	r0, sp
 800affe:	9600      	str	r6, [sp, #0]
 800b000:	f7ff fd06 	bl	800aa10 <__lo0bits>
 800b004:	9900      	ldr	r1, [sp, #0]
 800b006:	b300      	cbz	r0, 800b04a <__d2b+0x82>
 800b008:	9a01      	ldr	r2, [sp, #4]
 800b00a:	f1c0 0320 	rsb	r3, r0, #32
 800b00e:	fa02 f303 	lsl.w	r3, r2, r3
 800b012:	430b      	orrs	r3, r1
 800b014:	40c2      	lsrs	r2, r0
 800b016:	6163      	str	r3, [r4, #20]
 800b018:	9201      	str	r2, [sp, #4]
 800b01a:	9b01      	ldr	r3, [sp, #4]
 800b01c:	61a3      	str	r3, [r4, #24]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bf14      	ite	ne
 800b022:	2202      	movne	r2, #2
 800b024:	2201      	moveq	r2, #1
 800b026:	6122      	str	r2, [r4, #16]
 800b028:	b1d5      	cbz	r5, 800b060 <__d2b+0x98>
 800b02a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b02e:	4405      	add	r5, r0
 800b030:	f8c9 5000 	str.w	r5, [r9]
 800b034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b038:	f8c8 0000 	str.w	r0, [r8]
 800b03c:	4620      	mov	r0, r4
 800b03e:	b003      	add	sp, #12
 800b040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b048:	e7d5      	b.n	800aff6 <__d2b+0x2e>
 800b04a:	6161      	str	r1, [r4, #20]
 800b04c:	e7e5      	b.n	800b01a <__d2b+0x52>
 800b04e:	a801      	add	r0, sp, #4
 800b050:	f7ff fcde 	bl	800aa10 <__lo0bits>
 800b054:	9b01      	ldr	r3, [sp, #4]
 800b056:	6163      	str	r3, [r4, #20]
 800b058:	2201      	movs	r2, #1
 800b05a:	6122      	str	r2, [r4, #16]
 800b05c:	3020      	adds	r0, #32
 800b05e:	e7e3      	b.n	800b028 <__d2b+0x60>
 800b060:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b064:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b068:	f8c9 0000 	str.w	r0, [r9]
 800b06c:	6918      	ldr	r0, [r3, #16]
 800b06e:	f7ff fcaf 	bl	800a9d0 <__hi0bits>
 800b072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b076:	e7df      	b.n	800b038 <__d2b+0x70>
 800b078:	0800c4c8 	.word	0x0800c4c8
 800b07c:	0800c554 	.word	0x0800c554

0800b080 <__ratio>:
 800b080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	4688      	mov	r8, r1
 800b086:	4669      	mov	r1, sp
 800b088:	4681      	mov	r9, r0
 800b08a:	f7ff ff4d 	bl	800af28 <__b2d>
 800b08e:	a901      	add	r1, sp, #4
 800b090:	4640      	mov	r0, r8
 800b092:	ec55 4b10 	vmov	r4, r5, d0
 800b096:	f7ff ff47 	bl	800af28 <__b2d>
 800b09a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b09e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b0a2:	eba3 0c02 	sub.w	ip, r3, r2
 800b0a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b0aa:	1a9b      	subs	r3, r3, r2
 800b0ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b0b0:	ec51 0b10 	vmov	r0, r1, d0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bfd6      	itet	le
 800b0b8:	460a      	movle	r2, r1
 800b0ba:	462a      	movgt	r2, r5
 800b0bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0c0:	468b      	mov	fp, r1
 800b0c2:	462f      	mov	r7, r5
 800b0c4:	bfd4      	ite	le
 800b0c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b0ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	ee10 2a10 	vmov	r2, s0
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 fbe0 	bl	800089c <__aeabi_ddiv>
 800b0dc:	ec41 0b10 	vmov	d0, r0, r1
 800b0e0:	b003      	add	sp, #12
 800b0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0e6 <__copybits>:
 800b0e6:	3901      	subs	r1, #1
 800b0e8:	b570      	push	{r4, r5, r6, lr}
 800b0ea:	1149      	asrs	r1, r1, #5
 800b0ec:	6914      	ldr	r4, [r2, #16]
 800b0ee:	3101      	adds	r1, #1
 800b0f0:	f102 0314 	add.w	r3, r2, #20
 800b0f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0fc:	1f05      	subs	r5, r0, #4
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	d30c      	bcc.n	800b11c <__copybits+0x36>
 800b102:	1aa3      	subs	r3, r4, r2
 800b104:	3b11      	subs	r3, #17
 800b106:	f023 0303 	bic.w	r3, r3, #3
 800b10a:	3211      	adds	r2, #17
 800b10c:	42a2      	cmp	r2, r4
 800b10e:	bf88      	it	hi
 800b110:	2300      	movhi	r3, #0
 800b112:	4418      	add	r0, r3
 800b114:	2300      	movs	r3, #0
 800b116:	4288      	cmp	r0, r1
 800b118:	d305      	bcc.n	800b126 <__copybits+0x40>
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b120:	f845 6f04 	str.w	r6, [r5, #4]!
 800b124:	e7eb      	b.n	800b0fe <__copybits+0x18>
 800b126:	f840 3b04 	str.w	r3, [r0], #4
 800b12a:	e7f4      	b.n	800b116 <__copybits+0x30>

0800b12c <__any_on>:
 800b12c:	f100 0214 	add.w	r2, r0, #20
 800b130:	6900      	ldr	r0, [r0, #16]
 800b132:	114b      	asrs	r3, r1, #5
 800b134:	4298      	cmp	r0, r3
 800b136:	b510      	push	{r4, lr}
 800b138:	db11      	blt.n	800b15e <__any_on+0x32>
 800b13a:	dd0a      	ble.n	800b152 <__any_on+0x26>
 800b13c:	f011 011f 	ands.w	r1, r1, #31
 800b140:	d007      	beq.n	800b152 <__any_on+0x26>
 800b142:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b146:	fa24 f001 	lsr.w	r0, r4, r1
 800b14a:	fa00 f101 	lsl.w	r1, r0, r1
 800b14e:	428c      	cmp	r4, r1
 800b150:	d10b      	bne.n	800b16a <__any_on+0x3e>
 800b152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b156:	4293      	cmp	r3, r2
 800b158:	d803      	bhi.n	800b162 <__any_on+0x36>
 800b15a:	2000      	movs	r0, #0
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	4603      	mov	r3, r0
 800b160:	e7f7      	b.n	800b152 <__any_on+0x26>
 800b162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b166:	2900      	cmp	r1, #0
 800b168:	d0f5      	beq.n	800b156 <__any_on+0x2a>
 800b16a:	2001      	movs	r0, #1
 800b16c:	e7f6      	b.n	800b15c <__any_on+0x30>

0800b16e <_calloc_r>:
 800b16e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b170:	fba1 2402 	umull	r2, r4, r1, r2
 800b174:	b94c      	cbnz	r4, 800b18a <_calloc_r+0x1c>
 800b176:	4611      	mov	r1, r2
 800b178:	9201      	str	r2, [sp, #4]
 800b17a:	f000 f87b 	bl	800b274 <_malloc_r>
 800b17e:	9a01      	ldr	r2, [sp, #4]
 800b180:	4605      	mov	r5, r0
 800b182:	b930      	cbnz	r0, 800b192 <_calloc_r+0x24>
 800b184:	4628      	mov	r0, r5
 800b186:	b003      	add	sp, #12
 800b188:	bd30      	pop	{r4, r5, pc}
 800b18a:	220c      	movs	r2, #12
 800b18c:	6002      	str	r2, [r0, #0]
 800b18e:	2500      	movs	r5, #0
 800b190:	e7f8      	b.n	800b184 <_calloc_r+0x16>
 800b192:	4621      	mov	r1, r4
 800b194:	f7fc fbbe 	bl	8007914 <memset>
 800b198:	e7f4      	b.n	800b184 <_calloc_r+0x16>
	...

0800b19c <_free_r>:
 800b19c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b19e:	2900      	cmp	r1, #0
 800b1a0:	d044      	beq.n	800b22c <_free_r+0x90>
 800b1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a6:	9001      	str	r0, [sp, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b1ae:	bfb8      	it	lt
 800b1b0:	18e4      	addlt	r4, r4, r3
 800b1b2:	f000 fab5 	bl	800b720 <__malloc_lock>
 800b1b6:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <_free_r+0x94>)
 800b1b8:	9801      	ldr	r0, [sp, #4]
 800b1ba:	6813      	ldr	r3, [r2, #0]
 800b1bc:	b933      	cbnz	r3, 800b1cc <_free_r+0x30>
 800b1be:	6063      	str	r3, [r4, #4]
 800b1c0:	6014      	str	r4, [r2, #0]
 800b1c2:	b003      	add	sp, #12
 800b1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1c8:	f000 bab0 	b.w	800b72c <__malloc_unlock>
 800b1cc:	42a3      	cmp	r3, r4
 800b1ce:	d908      	bls.n	800b1e2 <_free_r+0x46>
 800b1d0:	6825      	ldr	r5, [r4, #0]
 800b1d2:	1961      	adds	r1, r4, r5
 800b1d4:	428b      	cmp	r3, r1
 800b1d6:	bf01      	itttt	eq
 800b1d8:	6819      	ldreq	r1, [r3, #0]
 800b1da:	685b      	ldreq	r3, [r3, #4]
 800b1dc:	1949      	addeq	r1, r1, r5
 800b1de:	6021      	streq	r1, [r4, #0]
 800b1e0:	e7ed      	b.n	800b1be <_free_r+0x22>
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	b10b      	cbz	r3, 800b1ec <_free_r+0x50>
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	d9fa      	bls.n	800b1e2 <_free_r+0x46>
 800b1ec:	6811      	ldr	r1, [r2, #0]
 800b1ee:	1855      	adds	r5, r2, r1
 800b1f0:	42a5      	cmp	r5, r4
 800b1f2:	d10b      	bne.n	800b20c <_free_r+0x70>
 800b1f4:	6824      	ldr	r4, [r4, #0]
 800b1f6:	4421      	add	r1, r4
 800b1f8:	1854      	adds	r4, r2, r1
 800b1fa:	42a3      	cmp	r3, r4
 800b1fc:	6011      	str	r1, [r2, #0]
 800b1fe:	d1e0      	bne.n	800b1c2 <_free_r+0x26>
 800b200:	681c      	ldr	r4, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	6053      	str	r3, [r2, #4]
 800b206:	4421      	add	r1, r4
 800b208:	6011      	str	r1, [r2, #0]
 800b20a:	e7da      	b.n	800b1c2 <_free_r+0x26>
 800b20c:	d902      	bls.n	800b214 <_free_r+0x78>
 800b20e:	230c      	movs	r3, #12
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	e7d6      	b.n	800b1c2 <_free_r+0x26>
 800b214:	6825      	ldr	r5, [r4, #0]
 800b216:	1961      	adds	r1, r4, r5
 800b218:	428b      	cmp	r3, r1
 800b21a:	bf04      	itt	eq
 800b21c:	6819      	ldreq	r1, [r3, #0]
 800b21e:	685b      	ldreq	r3, [r3, #4]
 800b220:	6063      	str	r3, [r4, #4]
 800b222:	bf04      	itt	eq
 800b224:	1949      	addeq	r1, r1, r5
 800b226:	6021      	streq	r1, [r4, #0]
 800b228:	6054      	str	r4, [r2, #4]
 800b22a:	e7ca      	b.n	800b1c2 <_free_r+0x26>
 800b22c:	b003      	add	sp, #12
 800b22e:	bd30      	pop	{r4, r5, pc}
 800b230:	200004f4 	.word	0x200004f4

0800b234 <sbrk_aligned>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	4e0e      	ldr	r6, [pc, #56]	; (800b270 <sbrk_aligned+0x3c>)
 800b238:	460c      	mov	r4, r1
 800b23a:	6831      	ldr	r1, [r6, #0]
 800b23c:	4605      	mov	r5, r0
 800b23e:	b911      	cbnz	r1, 800b246 <sbrk_aligned+0x12>
 800b240:	f000 f9f2 	bl	800b628 <_sbrk_r>
 800b244:	6030      	str	r0, [r6, #0]
 800b246:	4621      	mov	r1, r4
 800b248:	4628      	mov	r0, r5
 800b24a:	f000 f9ed 	bl	800b628 <_sbrk_r>
 800b24e:	1c43      	adds	r3, r0, #1
 800b250:	d00a      	beq.n	800b268 <sbrk_aligned+0x34>
 800b252:	1cc4      	adds	r4, r0, #3
 800b254:	f024 0403 	bic.w	r4, r4, #3
 800b258:	42a0      	cmp	r0, r4
 800b25a:	d007      	beq.n	800b26c <sbrk_aligned+0x38>
 800b25c:	1a21      	subs	r1, r4, r0
 800b25e:	4628      	mov	r0, r5
 800b260:	f000 f9e2 	bl	800b628 <_sbrk_r>
 800b264:	3001      	adds	r0, #1
 800b266:	d101      	bne.n	800b26c <sbrk_aligned+0x38>
 800b268:	f04f 34ff 	mov.w	r4, #4294967295
 800b26c:	4620      	mov	r0, r4
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	200004f8 	.word	0x200004f8

0800b274 <_malloc_r>:
 800b274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b278:	1ccd      	adds	r5, r1, #3
 800b27a:	f025 0503 	bic.w	r5, r5, #3
 800b27e:	3508      	adds	r5, #8
 800b280:	2d0c      	cmp	r5, #12
 800b282:	bf38      	it	cc
 800b284:	250c      	movcc	r5, #12
 800b286:	2d00      	cmp	r5, #0
 800b288:	4607      	mov	r7, r0
 800b28a:	db01      	blt.n	800b290 <_malloc_r+0x1c>
 800b28c:	42a9      	cmp	r1, r5
 800b28e:	d905      	bls.n	800b29c <_malloc_r+0x28>
 800b290:	230c      	movs	r3, #12
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	2600      	movs	r6, #0
 800b296:	4630      	mov	r0, r6
 800b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29c:	4e2e      	ldr	r6, [pc, #184]	; (800b358 <_malloc_r+0xe4>)
 800b29e:	f000 fa3f 	bl	800b720 <__malloc_lock>
 800b2a2:	6833      	ldr	r3, [r6, #0]
 800b2a4:	461c      	mov	r4, r3
 800b2a6:	bb34      	cbnz	r4, 800b2f6 <_malloc_r+0x82>
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	f7ff ffc2 	bl	800b234 <sbrk_aligned>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	d14d      	bne.n	800b352 <_malloc_r+0xde>
 800b2b6:	6834      	ldr	r4, [r6, #0]
 800b2b8:	4626      	mov	r6, r4
 800b2ba:	2e00      	cmp	r6, #0
 800b2bc:	d140      	bne.n	800b340 <_malloc_r+0xcc>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	eb04 0803 	add.w	r8, r4, r3
 800b2c8:	f000 f9ae 	bl	800b628 <_sbrk_r>
 800b2cc:	4580      	cmp	r8, r0
 800b2ce:	d13a      	bne.n	800b346 <_malloc_r+0xd2>
 800b2d0:	6821      	ldr	r1, [r4, #0]
 800b2d2:	3503      	adds	r5, #3
 800b2d4:	1a6d      	subs	r5, r5, r1
 800b2d6:	f025 0503 	bic.w	r5, r5, #3
 800b2da:	3508      	adds	r5, #8
 800b2dc:	2d0c      	cmp	r5, #12
 800b2de:	bf38      	it	cc
 800b2e0:	250c      	movcc	r5, #12
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7ff ffa5 	bl	800b234 <sbrk_aligned>
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d02b      	beq.n	800b346 <_malloc_r+0xd2>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	442b      	add	r3, r5
 800b2f2:	6023      	str	r3, [r4, #0]
 800b2f4:	e00e      	b.n	800b314 <_malloc_r+0xa0>
 800b2f6:	6822      	ldr	r2, [r4, #0]
 800b2f8:	1b52      	subs	r2, r2, r5
 800b2fa:	d41e      	bmi.n	800b33a <_malloc_r+0xc6>
 800b2fc:	2a0b      	cmp	r2, #11
 800b2fe:	d916      	bls.n	800b32e <_malloc_r+0xba>
 800b300:	1961      	adds	r1, r4, r5
 800b302:	42a3      	cmp	r3, r4
 800b304:	6025      	str	r5, [r4, #0]
 800b306:	bf18      	it	ne
 800b308:	6059      	strne	r1, [r3, #4]
 800b30a:	6863      	ldr	r3, [r4, #4]
 800b30c:	bf08      	it	eq
 800b30e:	6031      	streq	r1, [r6, #0]
 800b310:	5162      	str	r2, [r4, r5]
 800b312:	604b      	str	r3, [r1, #4]
 800b314:	4638      	mov	r0, r7
 800b316:	f104 060b 	add.w	r6, r4, #11
 800b31a:	f000 fa07 	bl	800b72c <__malloc_unlock>
 800b31e:	f026 0607 	bic.w	r6, r6, #7
 800b322:	1d23      	adds	r3, r4, #4
 800b324:	1af2      	subs	r2, r6, r3
 800b326:	d0b6      	beq.n	800b296 <_malloc_r+0x22>
 800b328:	1b9b      	subs	r3, r3, r6
 800b32a:	50a3      	str	r3, [r4, r2]
 800b32c:	e7b3      	b.n	800b296 <_malloc_r+0x22>
 800b32e:	6862      	ldr	r2, [r4, #4]
 800b330:	42a3      	cmp	r3, r4
 800b332:	bf0c      	ite	eq
 800b334:	6032      	streq	r2, [r6, #0]
 800b336:	605a      	strne	r2, [r3, #4]
 800b338:	e7ec      	b.n	800b314 <_malloc_r+0xa0>
 800b33a:	4623      	mov	r3, r4
 800b33c:	6864      	ldr	r4, [r4, #4]
 800b33e:	e7b2      	b.n	800b2a6 <_malloc_r+0x32>
 800b340:	4634      	mov	r4, r6
 800b342:	6876      	ldr	r6, [r6, #4]
 800b344:	e7b9      	b.n	800b2ba <_malloc_r+0x46>
 800b346:	230c      	movs	r3, #12
 800b348:	603b      	str	r3, [r7, #0]
 800b34a:	4638      	mov	r0, r7
 800b34c:	f000 f9ee 	bl	800b72c <__malloc_unlock>
 800b350:	e7a1      	b.n	800b296 <_malloc_r+0x22>
 800b352:	6025      	str	r5, [r4, #0]
 800b354:	e7de      	b.n	800b314 <_malloc_r+0xa0>
 800b356:	bf00      	nop
 800b358:	200004f4 	.word	0x200004f4

0800b35c <__ssputs_r>:
 800b35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	688e      	ldr	r6, [r1, #8]
 800b362:	429e      	cmp	r6, r3
 800b364:	4682      	mov	sl, r0
 800b366:	460c      	mov	r4, r1
 800b368:	4690      	mov	r8, r2
 800b36a:	461f      	mov	r7, r3
 800b36c:	d838      	bhi.n	800b3e0 <__ssputs_r+0x84>
 800b36e:	898a      	ldrh	r2, [r1, #12]
 800b370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b374:	d032      	beq.n	800b3dc <__ssputs_r+0x80>
 800b376:	6825      	ldr	r5, [r4, #0]
 800b378:	6909      	ldr	r1, [r1, #16]
 800b37a:	eba5 0901 	sub.w	r9, r5, r1
 800b37e:	6965      	ldr	r5, [r4, #20]
 800b380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b388:	3301      	adds	r3, #1
 800b38a:	444b      	add	r3, r9
 800b38c:	106d      	asrs	r5, r5, #1
 800b38e:	429d      	cmp	r5, r3
 800b390:	bf38      	it	cc
 800b392:	461d      	movcc	r5, r3
 800b394:	0553      	lsls	r3, r2, #21
 800b396:	d531      	bpl.n	800b3fc <__ssputs_r+0xa0>
 800b398:	4629      	mov	r1, r5
 800b39a:	f7ff ff6b 	bl	800b274 <_malloc_r>
 800b39e:	4606      	mov	r6, r0
 800b3a0:	b950      	cbnz	r0, 800b3b8 <__ssputs_r+0x5c>
 800b3a2:	230c      	movs	r3, #12
 800b3a4:	f8ca 3000 	str.w	r3, [sl]
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ae:	81a3      	strh	r3, [r4, #12]
 800b3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b8:	6921      	ldr	r1, [r4, #16]
 800b3ba:	464a      	mov	r2, r9
 800b3bc:	f7ff fa08 	bl	800a7d0 <memcpy>
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	6126      	str	r6, [r4, #16]
 800b3ce:	6165      	str	r5, [r4, #20]
 800b3d0:	444e      	add	r6, r9
 800b3d2:	eba5 0509 	sub.w	r5, r5, r9
 800b3d6:	6026      	str	r6, [r4, #0]
 800b3d8:	60a5      	str	r5, [r4, #8]
 800b3da:	463e      	mov	r6, r7
 800b3dc:	42be      	cmp	r6, r7
 800b3de:	d900      	bls.n	800b3e2 <__ssputs_r+0x86>
 800b3e0:	463e      	mov	r6, r7
 800b3e2:	6820      	ldr	r0, [r4, #0]
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	4641      	mov	r1, r8
 800b3e8:	f000 f980 	bl	800b6ec <memmove>
 800b3ec:	68a3      	ldr	r3, [r4, #8]
 800b3ee:	1b9b      	subs	r3, r3, r6
 800b3f0:	60a3      	str	r3, [r4, #8]
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	4433      	add	r3, r6
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	e7db      	b.n	800b3b4 <__ssputs_r+0x58>
 800b3fc:	462a      	mov	r2, r5
 800b3fe:	f000 f99b 	bl	800b738 <_realloc_r>
 800b402:	4606      	mov	r6, r0
 800b404:	2800      	cmp	r0, #0
 800b406:	d1e1      	bne.n	800b3cc <__ssputs_r+0x70>
 800b408:	6921      	ldr	r1, [r4, #16]
 800b40a:	4650      	mov	r0, sl
 800b40c:	f7ff fec6 	bl	800b19c <_free_r>
 800b410:	e7c7      	b.n	800b3a2 <__ssputs_r+0x46>
	...

0800b414 <_svfiprintf_r>:
 800b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b418:	4698      	mov	r8, r3
 800b41a:	898b      	ldrh	r3, [r1, #12]
 800b41c:	061b      	lsls	r3, r3, #24
 800b41e:	b09d      	sub	sp, #116	; 0x74
 800b420:	4607      	mov	r7, r0
 800b422:	460d      	mov	r5, r1
 800b424:	4614      	mov	r4, r2
 800b426:	d50e      	bpl.n	800b446 <_svfiprintf_r+0x32>
 800b428:	690b      	ldr	r3, [r1, #16]
 800b42a:	b963      	cbnz	r3, 800b446 <_svfiprintf_r+0x32>
 800b42c:	2140      	movs	r1, #64	; 0x40
 800b42e:	f7ff ff21 	bl	800b274 <_malloc_r>
 800b432:	6028      	str	r0, [r5, #0]
 800b434:	6128      	str	r0, [r5, #16]
 800b436:	b920      	cbnz	r0, 800b442 <_svfiprintf_r+0x2e>
 800b438:	230c      	movs	r3, #12
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	e0d1      	b.n	800b5e6 <_svfiprintf_r+0x1d2>
 800b442:	2340      	movs	r3, #64	; 0x40
 800b444:	616b      	str	r3, [r5, #20]
 800b446:	2300      	movs	r3, #0
 800b448:	9309      	str	r3, [sp, #36]	; 0x24
 800b44a:	2320      	movs	r3, #32
 800b44c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b450:	f8cd 800c 	str.w	r8, [sp, #12]
 800b454:	2330      	movs	r3, #48	; 0x30
 800b456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b600 <_svfiprintf_r+0x1ec>
 800b45a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b45e:	f04f 0901 	mov.w	r9, #1
 800b462:	4623      	mov	r3, r4
 800b464:	469a      	mov	sl, r3
 800b466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46a:	b10a      	cbz	r2, 800b470 <_svfiprintf_r+0x5c>
 800b46c:	2a25      	cmp	r2, #37	; 0x25
 800b46e:	d1f9      	bne.n	800b464 <_svfiprintf_r+0x50>
 800b470:	ebba 0b04 	subs.w	fp, sl, r4
 800b474:	d00b      	beq.n	800b48e <_svfiprintf_r+0x7a>
 800b476:	465b      	mov	r3, fp
 800b478:	4622      	mov	r2, r4
 800b47a:	4629      	mov	r1, r5
 800b47c:	4638      	mov	r0, r7
 800b47e:	f7ff ff6d 	bl	800b35c <__ssputs_r>
 800b482:	3001      	adds	r0, #1
 800b484:	f000 80aa 	beq.w	800b5dc <_svfiprintf_r+0x1c8>
 800b488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b48a:	445a      	add	r2, fp
 800b48c:	9209      	str	r2, [sp, #36]	; 0x24
 800b48e:	f89a 3000 	ldrb.w	r3, [sl]
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 80a2 	beq.w	800b5dc <_svfiprintf_r+0x1c8>
 800b498:	2300      	movs	r3, #0
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a2:	f10a 0a01 	add.w	sl, sl, #1
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	9307      	str	r3, [sp, #28]
 800b4aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b4b0:	4654      	mov	r4, sl
 800b4b2:	2205      	movs	r2, #5
 800b4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b8:	4851      	ldr	r0, [pc, #324]	; (800b600 <_svfiprintf_r+0x1ec>)
 800b4ba:	f7f4 feb9 	bl	8000230 <memchr>
 800b4be:	9a04      	ldr	r2, [sp, #16]
 800b4c0:	b9d8      	cbnz	r0, 800b4fa <_svfiprintf_r+0xe6>
 800b4c2:	06d0      	lsls	r0, r2, #27
 800b4c4:	bf44      	itt	mi
 800b4c6:	2320      	movmi	r3, #32
 800b4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4cc:	0711      	lsls	r1, r2, #28
 800b4ce:	bf44      	itt	mi
 800b4d0:	232b      	movmi	r3, #43	; 0x2b
 800b4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4da:	2b2a      	cmp	r3, #42	; 0x2a
 800b4dc:	d015      	beq.n	800b50a <_svfiprintf_r+0xf6>
 800b4de:	9a07      	ldr	r2, [sp, #28]
 800b4e0:	4654      	mov	r4, sl
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	f04f 0c0a 	mov.w	ip, #10
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ee:	3b30      	subs	r3, #48	; 0x30
 800b4f0:	2b09      	cmp	r3, #9
 800b4f2:	d94e      	bls.n	800b592 <_svfiprintf_r+0x17e>
 800b4f4:	b1b0      	cbz	r0, 800b524 <_svfiprintf_r+0x110>
 800b4f6:	9207      	str	r2, [sp, #28]
 800b4f8:	e014      	b.n	800b524 <_svfiprintf_r+0x110>
 800b4fa:	eba0 0308 	sub.w	r3, r0, r8
 800b4fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b502:	4313      	orrs	r3, r2
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	46a2      	mov	sl, r4
 800b508:	e7d2      	b.n	800b4b0 <_svfiprintf_r+0x9c>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	1d19      	adds	r1, r3, #4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	9103      	str	r1, [sp, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	bfbb      	ittet	lt
 800b516:	425b      	neglt	r3, r3
 800b518:	f042 0202 	orrlt.w	r2, r2, #2
 800b51c:	9307      	strge	r3, [sp, #28]
 800b51e:	9307      	strlt	r3, [sp, #28]
 800b520:	bfb8      	it	lt
 800b522:	9204      	strlt	r2, [sp, #16]
 800b524:	7823      	ldrb	r3, [r4, #0]
 800b526:	2b2e      	cmp	r3, #46	; 0x2e
 800b528:	d10c      	bne.n	800b544 <_svfiprintf_r+0x130>
 800b52a:	7863      	ldrb	r3, [r4, #1]
 800b52c:	2b2a      	cmp	r3, #42	; 0x2a
 800b52e:	d135      	bne.n	800b59c <_svfiprintf_r+0x188>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	1d1a      	adds	r2, r3, #4
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	9203      	str	r2, [sp, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bfb8      	it	lt
 800b53c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b540:	3402      	adds	r4, #2
 800b542:	9305      	str	r3, [sp, #20]
 800b544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b610 <_svfiprintf_r+0x1fc>
 800b548:	7821      	ldrb	r1, [r4, #0]
 800b54a:	2203      	movs	r2, #3
 800b54c:	4650      	mov	r0, sl
 800b54e:	f7f4 fe6f 	bl	8000230 <memchr>
 800b552:	b140      	cbz	r0, 800b566 <_svfiprintf_r+0x152>
 800b554:	2340      	movs	r3, #64	; 0x40
 800b556:	eba0 000a 	sub.w	r0, r0, sl
 800b55a:	fa03 f000 	lsl.w	r0, r3, r0
 800b55e:	9b04      	ldr	r3, [sp, #16]
 800b560:	4303      	orrs	r3, r0
 800b562:	3401      	adds	r4, #1
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56a:	4826      	ldr	r0, [pc, #152]	; (800b604 <_svfiprintf_r+0x1f0>)
 800b56c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b570:	2206      	movs	r2, #6
 800b572:	f7f4 fe5d 	bl	8000230 <memchr>
 800b576:	2800      	cmp	r0, #0
 800b578:	d038      	beq.n	800b5ec <_svfiprintf_r+0x1d8>
 800b57a:	4b23      	ldr	r3, [pc, #140]	; (800b608 <_svfiprintf_r+0x1f4>)
 800b57c:	bb1b      	cbnz	r3, 800b5c6 <_svfiprintf_r+0x1b2>
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	3307      	adds	r3, #7
 800b582:	f023 0307 	bic.w	r3, r3, #7
 800b586:	3308      	adds	r3, #8
 800b588:	9303      	str	r3, [sp, #12]
 800b58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58c:	4433      	add	r3, r6
 800b58e:	9309      	str	r3, [sp, #36]	; 0x24
 800b590:	e767      	b.n	800b462 <_svfiprintf_r+0x4e>
 800b592:	fb0c 3202 	mla	r2, ip, r2, r3
 800b596:	460c      	mov	r4, r1
 800b598:	2001      	movs	r0, #1
 800b59a:	e7a5      	b.n	800b4e8 <_svfiprintf_r+0xd4>
 800b59c:	2300      	movs	r3, #0
 800b59e:	3401      	adds	r4, #1
 800b5a0:	9305      	str	r3, [sp, #20]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	f04f 0c0a 	mov.w	ip, #10
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ae:	3a30      	subs	r2, #48	; 0x30
 800b5b0:	2a09      	cmp	r2, #9
 800b5b2:	d903      	bls.n	800b5bc <_svfiprintf_r+0x1a8>
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0c5      	beq.n	800b544 <_svfiprintf_r+0x130>
 800b5b8:	9105      	str	r1, [sp, #20]
 800b5ba:	e7c3      	b.n	800b544 <_svfiprintf_r+0x130>
 800b5bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e7f0      	b.n	800b5a8 <_svfiprintf_r+0x194>
 800b5c6:	ab03      	add	r3, sp, #12
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	462a      	mov	r2, r5
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <_svfiprintf_r+0x1f8>)
 800b5ce:	a904      	add	r1, sp, #16
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	f7fc fa47 	bl	8007a64 <_printf_float>
 800b5d6:	1c42      	adds	r2, r0, #1
 800b5d8:	4606      	mov	r6, r0
 800b5da:	d1d6      	bne.n	800b58a <_svfiprintf_r+0x176>
 800b5dc:	89ab      	ldrh	r3, [r5, #12]
 800b5de:	065b      	lsls	r3, r3, #25
 800b5e0:	f53f af2c 	bmi.w	800b43c <_svfiprintf_r+0x28>
 800b5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5e6:	b01d      	add	sp, #116	; 0x74
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ec:	ab03      	add	r3, sp, #12
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	462a      	mov	r2, r5
 800b5f2:	4b06      	ldr	r3, [pc, #24]	; (800b60c <_svfiprintf_r+0x1f8>)
 800b5f4:	a904      	add	r1, sp, #16
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	f7fc fcd8 	bl	8007fac <_printf_i>
 800b5fc:	e7eb      	b.n	800b5d6 <_svfiprintf_r+0x1c2>
 800b5fe:	bf00      	nop
 800b600:	0800c6ac 	.word	0x0800c6ac
 800b604:	0800c6b6 	.word	0x0800c6b6
 800b608:	08007a65 	.word	0x08007a65
 800b60c:	0800b35d 	.word	0x0800b35d
 800b610:	0800c6b2 	.word	0x0800c6b2
 800b614:	00000000 	.word	0x00000000

0800b618 <nan>:
 800b618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b620 <nan+0x8>
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	00000000 	.word	0x00000000
 800b624:	7ff80000 	.word	0x7ff80000

0800b628 <_sbrk_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4d06      	ldr	r5, [pc, #24]	; (800b644 <_sbrk_r+0x1c>)
 800b62c:	2300      	movs	r3, #0
 800b62e:	4604      	mov	r4, r0
 800b630:	4608      	mov	r0, r1
 800b632:	602b      	str	r3, [r5, #0]
 800b634:	f7f6 fe86 	bl	8002344 <_sbrk>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d102      	bne.n	800b642 <_sbrk_r+0x1a>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	b103      	cbz	r3, 800b642 <_sbrk_r+0x1a>
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	200004fc 	.word	0x200004fc

0800b648 <strncmp>:
 800b648:	b510      	push	{r4, lr}
 800b64a:	b17a      	cbz	r2, 800b66c <strncmp+0x24>
 800b64c:	4603      	mov	r3, r0
 800b64e:	3901      	subs	r1, #1
 800b650:	1884      	adds	r4, r0, r2
 800b652:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b656:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b65a:	4290      	cmp	r0, r2
 800b65c:	d101      	bne.n	800b662 <strncmp+0x1a>
 800b65e:	42a3      	cmp	r3, r4
 800b660:	d101      	bne.n	800b666 <strncmp+0x1e>
 800b662:	1a80      	subs	r0, r0, r2
 800b664:	bd10      	pop	{r4, pc}
 800b666:	2800      	cmp	r0, #0
 800b668:	d1f3      	bne.n	800b652 <strncmp+0xa>
 800b66a:	e7fa      	b.n	800b662 <strncmp+0x1a>
 800b66c:	4610      	mov	r0, r2
 800b66e:	e7f9      	b.n	800b664 <strncmp+0x1c>

0800b670 <__ascii_wctomb>:
 800b670:	b149      	cbz	r1, 800b686 <__ascii_wctomb+0x16>
 800b672:	2aff      	cmp	r2, #255	; 0xff
 800b674:	bf85      	ittet	hi
 800b676:	238a      	movhi	r3, #138	; 0x8a
 800b678:	6003      	strhi	r3, [r0, #0]
 800b67a:	700a      	strbls	r2, [r1, #0]
 800b67c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b680:	bf98      	it	ls
 800b682:	2001      	movls	r0, #1
 800b684:	4770      	bx	lr
 800b686:	4608      	mov	r0, r1
 800b688:	4770      	bx	lr
	...

0800b68c <__assert_func>:
 800b68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b68e:	4614      	mov	r4, r2
 800b690:	461a      	mov	r2, r3
 800b692:	4b09      	ldr	r3, [pc, #36]	; (800b6b8 <__assert_func+0x2c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4605      	mov	r5, r0
 800b698:	68d8      	ldr	r0, [r3, #12]
 800b69a:	b14c      	cbz	r4, 800b6b0 <__assert_func+0x24>
 800b69c:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <__assert_func+0x30>)
 800b69e:	9100      	str	r1, [sp, #0]
 800b6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6a4:	4906      	ldr	r1, [pc, #24]	; (800b6c0 <__assert_func+0x34>)
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	f000 f80e 	bl	800b6c8 <fiprintf>
 800b6ac:	f000 fa8c 	bl	800bbc8 <abort>
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <__assert_func+0x38>)
 800b6b2:	461c      	mov	r4, r3
 800b6b4:	e7f3      	b.n	800b69e <__assert_func+0x12>
 800b6b6:	bf00      	nop
 800b6b8:	2000000c 	.word	0x2000000c
 800b6bc:	0800c6bd 	.word	0x0800c6bd
 800b6c0:	0800c6ca 	.word	0x0800c6ca
 800b6c4:	0800c6f8 	.word	0x0800c6f8

0800b6c8 <fiprintf>:
 800b6c8:	b40e      	push	{r1, r2, r3}
 800b6ca:	b503      	push	{r0, r1, lr}
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	ab03      	add	r3, sp, #12
 800b6d0:	4805      	ldr	r0, [pc, #20]	; (800b6e8 <fiprintf+0x20>)
 800b6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d6:	6800      	ldr	r0, [r0, #0]
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	f000 f885 	bl	800b7e8 <_vfiprintf_r>
 800b6de:	b002      	add	sp, #8
 800b6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e4:	b003      	add	sp, #12
 800b6e6:	4770      	bx	lr
 800b6e8:	2000000c 	.word	0x2000000c

0800b6ec <memmove>:
 800b6ec:	4288      	cmp	r0, r1
 800b6ee:	b510      	push	{r4, lr}
 800b6f0:	eb01 0402 	add.w	r4, r1, r2
 800b6f4:	d902      	bls.n	800b6fc <memmove+0x10>
 800b6f6:	4284      	cmp	r4, r0
 800b6f8:	4623      	mov	r3, r4
 800b6fa:	d807      	bhi.n	800b70c <memmove+0x20>
 800b6fc:	1e43      	subs	r3, r0, #1
 800b6fe:	42a1      	cmp	r1, r4
 800b700:	d008      	beq.n	800b714 <memmove+0x28>
 800b702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b70a:	e7f8      	b.n	800b6fe <memmove+0x12>
 800b70c:	4402      	add	r2, r0
 800b70e:	4601      	mov	r1, r0
 800b710:	428a      	cmp	r2, r1
 800b712:	d100      	bne.n	800b716 <memmove+0x2a>
 800b714:	bd10      	pop	{r4, pc}
 800b716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b71e:	e7f7      	b.n	800b710 <memmove+0x24>

0800b720 <__malloc_lock>:
 800b720:	4801      	ldr	r0, [pc, #4]	; (800b728 <__malloc_lock+0x8>)
 800b722:	f000 bc11 	b.w	800bf48 <__retarget_lock_acquire_recursive>
 800b726:	bf00      	nop
 800b728:	20000500 	.word	0x20000500

0800b72c <__malloc_unlock>:
 800b72c:	4801      	ldr	r0, [pc, #4]	; (800b734 <__malloc_unlock+0x8>)
 800b72e:	f000 bc0c 	b.w	800bf4a <__retarget_lock_release_recursive>
 800b732:	bf00      	nop
 800b734:	20000500 	.word	0x20000500

0800b738 <_realloc_r>:
 800b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b73c:	4680      	mov	r8, r0
 800b73e:	4614      	mov	r4, r2
 800b740:	460e      	mov	r6, r1
 800b742:	b921      	cbnz	r1, 800b74e <_realloc_r+0x16>
 800b744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b748:	4611      	mov	r1, r2
 800b74a:	f7ff bd93 	b.w	800b274 <_malloc_r>
 800b74e:	b92a      	cbnz	r2, 800b75c <_realloc_r+0x24>
 800b750:	f7ff fd24 	bl	800b19c <_free_r>
 800b754:	4625      	mov	r5, r4
 800b756:	4628      	mov	r0, r5
 800b758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75c:	f000 fc5c 	bl	800c018 <_malloc_usable_size_r>
 800b760:	4284      	cmp	r4, r0
 800b762:	4607      	mov	r7, r0
 800b764:	d802      	bhi.n	800b76c <_realloc_r+0x34>
 800b766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b76a:	d812      	bhi.n	800b792 <_realloc_r+0x5a>
 800b76c:	4621      	mov	r1, r4
 800b76e:	4640      	mov	r0, r8
 800b770:	f7ff fd80 	bl	800b274 <_malloc_r>
 800b774:	4605      	mov	r5, r0
 800b776:	2800      	cmp	r0, #0
 800b778:	d0ed      	beq.n	800b756 <_realloc_r+0x1e>
 800b77a:	42bc      	cmp	r4, r7
 800b77c:	4622      	mov	r2, r4
 800b77e:	4631      	mov	r1, r6
 800b780:	bf28      	it	cs
 800b782:	463a      	movcs	r2, r7
 800b784:	f7ff f824 	bl	800a7d0 <memcpy>
 800b788:	4631      	mov	r1, r6
 800b78a:	4640      	mov	r0, r8
 800b78c:	f7ff fd06 	bl	800b19c <_free_r>
 800b790:	e7e1      	b.n	800b756 <_realloc_r+0x1e>
 800b792:	4635      	mov	r5, r6
 800b794:	e7df      	b.n	800b756 <_realloc_r+0x1e>

0800b796 <__sfputc_r>:
 800b796:	6893      	ldr	r3, [r2, #8]
 800b798:	3b01      	subs	r3, #1
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	b410      	push	{r4}
 800b79e:	6093      	str	r3, [r2, #8]
 800b7a0:	da08      	bge.n	800b7b4 <__sfputc_r+0x1e>
 800b7a2:	6994      	ldr	r4, [r2, #24]
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	db01      	blt.n	800b7ac <__sfputc_r+0x16>
 800b7a8:	290a      	cmp	r1, #10
 800b7aa:	d103      	bne.n	800b7b4 <__sfputc_r+0x1e>
 800b7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7b0:	f000 b94a 	b.w	800ba48 <__swbuf_r>
 800b7b4:	6813      	ldr	r3, [r2, #0]
 800b7b6:	1c58      	adds	r0, r3, #1
 800b7b8:	6010      	str	r0, [r2, #0]
 800b7ba:	7019      	strb	r1, [r3, #0]
 800b7bc:	4608      	mov	r0, r1
 800b7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <__sfputs_r>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	4614      	mov	r4, r2
 800b7cc:	18d5      	adds	r5, r2, r3
 800b7ce:	42ac      	cmp	r4, r5
 800b7d0:	d101      	bne.n	800b7d6 <__sfputs_r+0x12>
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	e007      	b.n	800b7e6 <__sfputs_r+0x22>
 800b7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7da:	463a      	mov	r2, r7
 800b7dc:	4630      	mov	r0, r6
 800b7de:	f7ff ffda 	bl	800b796 <__sfputc_r>
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	d1f3      	bne.n	800b7ce <__sfputs_r+0xa>
 800b7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7e8 <_vfiprintf_r>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	b09d      	sub	sp, #116	; 0x74
 800b7f0:	4614      	mov	r4, r2
 800b7f2:	4698      	mov	r8, r3
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	b118      	cbz	r0, 800b800 <_vfiprintf_r+0x18>
 800b7f8:	6983      	ldr	r3, [r0, #24]
 800b7fa:	b90b      	cbnz	r3, 800b800 <_vfiprintf_r+0x18>
 800b7fc:	f000 fb06 	bl	800be0c <__sinit>
 800b800:	4b89      	ldr	r3, [pc, #548]	; (800ba28 <_vfiprintf_r+0x240>)
 800b802:	429d      	cmp	r5, r3
 800b804:	d11b      	bne.n	800b83e <_vfiprintf_r+0x56>
 800b806:	6875      	ldr	r5, [r6, #4]
 800b808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b80a:	07d9      	lsls	r1, r3, #31
 800b80c:	d405      	bmi.n	800b81a <_vfiprintf_r+0x32>
 800b80e:	89ab      	ldrh	r3, [r5, #12]
 800b810:	059a      	lsls	r2, r3, #22
 800b812:	d402      	bmi.n	800b81a <_vfiprintf_r+0x32>
 800b814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b816:	f000 fb97 	bl	800bf48 <__retarget_lock_acquire_recursive>
 800b81a:	89ab      	ldrh	r3, [r5, #12]
 800b81c:	071b      	lsls	r3, r3, #28
 800b81e:	d501      	bpl.n	800b824 <_vfiprintf_r+0x3c>
 800b820:	692b      	ldr	r3, [r5, #16]
 800b822:	b9eb      	cbnz	r3, 800b860 <_vfiprintf_r+0x78>
 800b824:	4629      	mov	r1, r5
 800b826:	4630      	mov	r0, r6
 800b828:	f000 f960 	bl	800baec <__swsetup_r>
 800b82c:	b1c0      	cbz	r0, 800b860 <_vfiprintf_r+0x78>
 800b82e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b830:	07dc      	lsls	r4, r3, #31
 800b832:	d50e      	bpl.n	800b852 <_vfiprintf_r+0x6a>
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	b01d      	add	sp, #116	; 0x74
 800b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83e:	4b7b      	ldr	r3, [pc, #492]	; (800ba2c <_vfiprintf_r+0x244>)
 800b840:	429d      	cmp	r5, r3
 800b842:	d101      	bne.n	800b848 <_vfiprintf_r+0x60>
 800b844:	68b5      	ldr	r5, [r6, #8]
 800b846:	e7df      	b.n	800b808 <_vfiprintf_r+0x20>
 800b848:	4b79      	ldr	r3, [pc, #484]	; (800ba30 <_vfiprintf_r+0x248>)
 800b84a:	429d      	cmp	r5, r3
 800b84c:	bf08      	it	eq
 800b84e:	68f5      	ldreq	r5, [r6, #12]
 800b850:	e7da      	b.n	800b808 <_vfiprintf_r+0x20>
 800b852:	89ab      	ldrh	r3, [r5, #12]
 800b854:	0598      	lsls	r0, r3, #22
 800b856:	d4ed      	bmi.n	800b834 <_vfiprintf_r+0x4c>
 800b858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b85a:	f000 fb76 	bl	800bf4a <__retarget_lock_release_recursive>
 800b85e:	e7e9      	b.n	800b834 <_vfiprintf_r+0x4c>
 800b860:	2300      	movs	r3, #0
 800b862:	9309      	str	r3, [sp, #36]	; 0x24
 800b864:	2320      	movs	r3, #32
 800b866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b86e:	2330      	movs	r3, #48	; 0x30
 800b870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba34 <_vfiprintf_r+0x24c>
 800b874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b878:	f04f 0901 	mov.w	r9, #1
 800b87c:	4623      	mov	r3, r4
 800b87e:	469a      	mov	sl, r3
 800b880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b884:	b10a      	cbz	r2, 800b88a <_vfiprintf_r+0xa2>
 800b886:	2a25      	cmp	r2, #37	; 0x25
 800b888:	d1f9      	bne.n	800b87e <_vfiprintf_r+0x96>
 800b88a:	ebba 0b04 	subs.w	fp, sl, r4
 800b88e:	d00b      	beq.n	800b8a8 <_vfiprintf_r+0xc0>
 800b890:	465b      	mov	r3, fp
 800b892:	4622      	mov	r2, r4
 800b894:	4629      	mov	r1, r5
 800b896:	4630      	mov	r0, r6
 800b898:	f7ff ff94 	bl	800b7c4 <__sfputs_r>
 800b89c:	3001      	adds	r0, #1
 800b89e:	f000 80aa 	beq.w	800b9f6 <_vfiprintf_r+0x20e>
 800b8a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8a4:	445a      	add	r2, fp
 800b8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 80a2 	beq.w	800b9f6 <_vfiprintf_r+0x20e>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8bc:	f10a 0a01 	add.w	sl, sl, #1
 800b8c0:	9304      	str	r3, [sp, #16]
 800b8c2:	9307      	str	r3, [sp, #28]
 800b8c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8c8:	931a      	str	r3, [sp, #104]	; 0x68
 800b8ca:	4654      	mov	r4, sl
 800b8cc:	2205      	movs	r2, #5
 800b8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d2:	4858      	ldr	r0, [pc, #352]	; (800ba34 <_vfiprintf_r+0x24c>)
 800b8d4:	f7f4 fcac 	bl	8000230 <memchr>
 800b8d8:	9a04      	ldr	r2, [sp, #16]
 800b8da:	b9d8      	cbnz	r0, 800b914 <_vfiprintf_r+0x12c>
 800b8dc:	06d1      	lsls	r1, r2, #27
 800b8de:	bf44      	itt	mi
 800b8e0:	2320      	movmi	r3, #32
 800b8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e6:	0713      	lsls	r3, r2, #28
 800b8e8:	bf44      	itt	mi
 800b8ea:	232b      	movmi	r3, #43	; 0x2b
 800b8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f6:	d015      	beq.n	800b924 <_vfiprintf_r+0x13c>
 800b8f8:	9a07      	ldr	r2, [sp, #28]
 800b8fa:	4654      	mov	r4, sl
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	f04f 0c0a 	mov.w	ip, #10
 800b902:	4621      	mov	r1, r4
 800b904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b908:	3b30      	subs	r3, #48	; 0x30
 800b90a:	2b09      	cmp	r3, #9
 800b90c:	d94e      	bls.n	800b9ac <_vfiprintf_r+0x1c4>
 800b90e:	b1b0      	cbz	r0, 800b93e <_vfiprintf_r+0x156>
 800b910:	9207      	str	r2, [sp, #28]
 800b912:	e014      	b.n	800b93e <_vfiprintf_r+0x156>
 800b914:	eba0 0308 	sub.w	r3, r0, r8
 800b918:	fa09 f303 	lsl.w	r3, r9, r3
 800b91c:	4313      	orrs	r3, r2
 800b91e:	9304      	str	r3, [sp, #16]
 800b920:	46a2      	mov	sl, r4
 800b922:	e7d2      	b.n	800b8ca <_vfiprintf_r+0xe2>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	1d19      	adds	r1, r3, #4
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	9103      	str	r1, [sp, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bfbb      	ittet	lt
 800b930:	425b      	neglt	r3, r3
 800b932:	f042 0202 	orrlt.w	r2, r2, #2
 800b936:	9307      	strge	r3, [sp, #28]
 800b938:	9307      	strlt	r3, [sp, #28]
 800b93a:	bfb8      	it	lt
 800b93c:	9204      	strlt	r2, [sp, #16]
 800b93e:	7823      	ldrb	r3, [r4, #0]
 800b940:	2b2e      	cmp	r3, #46	; 0x2e
 800b942:	d10c      	bne.n	800b95e <_vfiprintf_r+0x176>
 800b944:	7863      	ldrb	r3, [r4, #1]
 800b946:	2b2a      	cmp	r3, #42	; 0x2a
 800b948:	d135      	bne.n	800b9b6 <_vfiprintf_r+0x1ce>
 800b94a:	9b03      	ldr	r3, [sp, #12]
 800b94c:	1d1a      	adds	r2, r3, #4
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	9203      	str	r2, [sp, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	bfb8      	it	lt
 800b956:	f04f 33ff 	movlt.w	r3, #4294967295
 800b95a:	3402      	adds	r4, #2
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba44 <_vfiprintf_r+0x25c>
 800b962:	7821      	ldrb	r1, [r4, #0]
 800b964:	2203      	movs	r2, #3
 800b966:	4650      	mov	r0, sl
 800b968:	f7f4 fc62 	bl	8000230 <memchr>
 800b96c:	b140      	cbz	r0, 800b980 <_vfiprintf_r+0x198>
 800b96e:	2340      	movs	r3, #64	; 0x40
 800b970:	eba0 000a 	sub.w	r0, r0, sl
 800b974:	fa03 f000 	lsl.w	r0, r3, r0
 800b978:	9b04      	ldr	r3, [sp, #16]
 800b97a:	4303      	orrs	r3, r0
 800b97c:	3401      	adds	r4, #1
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b984:	482c      	ldr	r0, [pc, #176]	; (800ba38 <_vfiprintf_r+0x250>)
 800b986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b98a:	2206      	movs	r2, #6
 800b98c:	f7f4 fc50 	bl	8000230 <memchr>
 800b990:	2800      	cmp	r0, #0
 800b992:	d03f      	beq.n	800ba14 <_vfiprintf_r+0x22c>
 800b994:	4b29      	ldr	r3, [pc, #164]	; (800ba3c <_vfiprintf_r+0x254>)
 800b996:	bb1b      	cbnz	r3, 800b9e0 <_vfiprintf_r+0x1f8>
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	3307      	adds	r3, #7
 800b99c:	f023 0307 	bic.w	r3, r3, #7
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	9303      	str	r3, [sp, #12]
 800b9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a6:	443b      	add	r3, r7
 800b9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9aa:	e767      	b.n	800b87c <_vfiprintf_r+0x94>
 800b9ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e7a5      	b.n	800b902 <_vfiprintf_r+0x11a>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	3401      	adds	r4, #1
 800b9ba:	9305      	str	r3, [sp, #20]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	f04f 0c0a 	mov.w	ip, #10
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9c8:	3a30      	subs	r2, #48	; 0x30
 800b9ca:	2a09      	cmp	r2, #9
 800b9cc:	d903      	bls.n	800b9d6 <_vfiprintf_r+0x1ee>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d0c5      	beq.n	800b95e <_vfiprintf_r+0x176>
 800b9d2:	9105      	str	r1, [sp, #20]
 800b9d4:	e7c3      	b.n	800b95e <_vfiprintf_r+0x176>
 800b9d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9da:	4604      	mov	r4, r0
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e7f0      	b.n	800b9c2 <_vfiprintf_r+0x1da>
 800b9e0:	ab03      	add	r3, sp, #12
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	462a      	mov	r2, r5
 800b9e6:	4b16      	ldr	r3, [pc, #88]	; (800ba40 <_vfiprintf_r+0x258>)
 800b9e8:	a904      	add	r1, sp, #16
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7fc f83a 	bl	8007a64 <_printf_float>
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	1c78      	adds	r0, r7, #1
 800b9f4:	d1d6      	bne.n	800b9a4 <_vfiprintf_r+0x1bc>
 800b9f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9f8:	07d9      	lsls	r1, r3, #31
 800b9fa:	d405      	bmi.n	800ba08 <_vfiprintf_r+0x220>
 800b9fc:	89ab      	ldrh	r3, [r5, #12]
 800b9fe:	059a      	lsls	r2, r3, #22
 800ba00:	d402      	bmi.n	800ba08 <_vfiprintf_r+0x220>
 800ba02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba04:	f000 faa1 	bl	800bf4a <__retarget_lock_release_recursive>
 800ba08:	89ab      	ldrh	r3, [r5, #12]
 800ba0a:	065b      	lsls	r3, r3, #25
 800ba0c:	f53f af12 	bmi.w	800b834 <_vfiprintf_r+0x4c>
 800ba10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba12:	e711      	b.n	800b838 <_vfiprintf_r+0x50>
 800ba14:	ab03      	add	r3, sp, #12
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	462a      	mov	r2, r5
 800ba1a:	4b09      	ldr	r3, [pc, #36]	; (800ba40 <_vfiprintf_r+0x258>)
 800ba1c:	a904      	add	r1, sp, #16
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7fc fac4 	bl	8007fac <_printf_i>
 800ba24:	e7e4      	b.n	800b9f0 <_vfiprintf_r+0x208>
 800ba26:	bf00      	nop
 800ba28:	0800c71c 	.word	0x0800c71c
 800ba2c:	0800c73c 	.word	0x0800c73c
 800ba30:	0800c6fc 	.word	0x0800c6fc
 800ba34:	0800c6ac 	.word	0x0800c6ac
 800ba38:	0800c6b6 	.word	0x0800c6b6
 800ba3c:	08007a65 	.word	0x08007a65
 800ba40:	0800b7c5 	.word	0x0800b7c5
 800ba44:	0800c6b2 	.word	0x0800c6b2

0800ba48 <__swbuf_r>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	460e      	mov	r6, r1
 800ba4c:	4614      	mov	r4, r2
 800ba4e:	4605      	mov	r5, r0
 800ba50:	b118      	cbz	r0, 800ba5a <__swbuf_r+0x12>
 800ba52:	6983      	ldr	r3, [r0, #24]
 800ba54:	b90b      	cbnz	r3, 800ba5a <__swbuf_r+0x12>
 800ba56:	f000 f9d9 	bl	800be0c <__sinit>
 800ba5a:	4b21      	ldr	r3, [pc, #132]	; (800bae0 <__swbuf_r+0x98>)
 800ba5c:	429c      	cmp	r4, r3
 800ba5e:	d12b      	bne.n	800bab8 <__swbuf_r+0x70>
 800ba60:	686c      	ldr	r4, [r5, #4]
 800ba62:	69a3      	ldr	r3, [r4, #24]
 800ba64:	60a3      	str	r3, [r4, #8]
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	071a      	lsls	r2, r3, #28
 800ba6a:	d52f      	bpl.n	800bacc <__swbuf_r+0x84>
 800ba6c:	6923      	ldr	r3, [r4, #16]
 800ba6e:	b36b      	cbz	r3, 800bacc <__swbuf_r+0x84>
 800ba70:	6923      	ldr	r3, [r4, #16]
 800ba72:	6820      	ldr	r0, [r4, #0]
 800ba74:	1ac0      	subs	r0, r0, r3
 800ba76:	6963      	ldr	r3, [r4, #20]
 800ba78:	b2f6      	uxtb	r6, r6
 800ba7a:	4283      	cmp	r3, r0
 800ba7c:	4637      	mov	r7, r6
 800ba7e:	dc04      	bgt.n	800ba8a <__swbuf_r+0x42>
 800ba80:	4621      	mov	r1, r4
 800ba82:	4628      	mov	r0, r5
 800ba84:	f000 f92e 	bl	800bce4 <_fflush_r>
 800ba88:	bb30      	cbnz	r0, 800bad8 <__swbuf_r+0x90>
 800ba8a:	68a3      	ldr	r3, [r4, #8]
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	60a3      	str	r3, [r4, #8]
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	6022      	str	r2, [r4, #0]
 800ba96:	701e      	strb	r6, [r3, #0]
 800ba98:	6963      	ldr	r3, [r4, #20]
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	4283      	cmp	r3, r0
 800ba9e:	d004      	beq.n	800baaa <__swbuf_r+0x62>
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	07db      	lsls	r3, r3, #31
 800baa4:	d506      	bpl.n	800bab4 <__swbuf_r+0x6c>
 800baa6:	2e0a      	cmp	r6, #10
 800baa8:	d104      	bne.n	800bab4 <__swbuf_r+0x6c>
 800baaa:	4621      	mov	r1, r4
 800baac:	4628      	mov	r0, r5
 800baae:	f000 f919 	bl	800bce4 <_fflush_r>
 800bab2:	b988      	cbnz	r0, 800bad8 <__swbuf_r+0x90>
 800bab4:	4638      	mov	r0, r7
 800bab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab8:	4b0a      	ldr	r3, [pc, #40]	; (800bae4 <__swbuf_r+0x9c>)
 800baba:	429c      	cmp	r4, r3
 800babc:	d101      	bne.n	800bac2 <__swbuf_r+0x7a>
 800babe:	68ac      	ldr	r4, [r5, #8]
 800bac0:	e7cf      	b.n	800ba62 <__swbuf_r+0x1a>
 800bac2:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <__swbuf_r+0xa0>)
 800bac4:	429c      	cmp	r4, r3
 800bac6:	bf08      	it	eq
 800bac8:	68ec      	ldreq	r4, [r5, #12]
 800baca:	e7ca      	b.n	800ba62 <__swbuf_r+0x1a>
 800bacc:	4621      	mov	r1, r4
 800bace:	4628      	mov	r0, r5
 800bad0:	f000 f80c 	bl	800baec <__swsetup_r>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d0cb      	beq.n	800ba70 <__swbuf_r+0x28>
 800bad8:	f04f 37ff 	mov.w	r7, #4294967295
 800badc:	e7ea      	b.n	800bab4 <__swbuf_r+0x6c>
 800bade:	bf00      	nop
 800bae0:	0800c71c 	.word	0x0800c71c
 800bae4:	0800c73c 	.word	0x0800c73c
 800bae8:	0800c6fc 	.word	0x0800c6fc

0800baec <__swsetup_r>:
 800baec:	4b32      	ldr	r3, [pc, #200]	; (800bbb8 <__swsetup_r+0xcc>)
 800baee:	b570      	push	{r4, r5, r6, lr}
 800baf0:	681d      	ldr	r5, [r3, #0]
 800baf2:	4606      	mov	r6, r0
 800baf4:	460c      	mov	r4, r1
 800baf6:	b125      	cbz	r5, 800bb02 <__swsetup_r+0x16>
 800baf8:	69ab      	ldr	r3, [r5, #24]
 800bafa:	b913      	cbnz	r3, 800bb02 <__swsetup_r+0x16>
 800bafc:	4628      	mov	r0, r5
 800bafe:	f000 f985 	bl	800be0c <__sinit>
 800bb02:	4b2e      	ldr	r3, [pc, #184]	; (800bbbc <__swsetup_r+0xd0>)
 800bb04:	429c      	cmp	r4, r3
 800bb06:	d10f      	bne.n	800bb28 <__swsetup_r+0x3c>
 800bb08:	686c      	ldr	r4, [r5, #4]
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb10:	0719      	lsls	r1, r3, #28
 800bb12:	d42c      	bmi.n	800bb6e <__swsetup_r+0x82>
 800bb14:	06dd      	lsls	r5, r3, #27
 800bb16:	d411      	bmi.n	800bb3c <__swsetup_r+0x50>
 800bb18:	2309      	movs	r3, #9
 800bb1a:	6033      	str	r3, [r6, #0]
 800bb1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	f04f 30ff 	mov.w	r0, #4294967295
 800bb26:	e03e      	b.n	800bba6 <__swsetup_r+0xba>
 800bb28:	4b25      	ldr	r3, [pc, #148]	; (800bbc0 <__swsetup_r+0xd4>)
 800bb2a:	429c      	cmp	r4, r3
 800bb2c:	d101      	bne.n	800bb32 <__swsetup_r+0x46>
 800bb2e:	68ac      	ldr	r4, [r5, #8]
 800bb30:	e7eb      	b.n	800bb0a <__swsetup_r+0x1e>
 800bb32:	4b24      	ldr	r3, [pc, #144]	; (800bbc4 <__swsetup_r+0xd8>)
 800bb34:	429c      	cmp	r4, r3
 800bb36:	bf08      	it	eq
 800bb38:	68ec      	ldreq	r4, [r5, #12]
 800bb3a:	e7e6      	b.n	800bb0a <__swsetup_r+0x1e>
 800bb3c:	0758      	lsls	r0, r3, #29
 800bb3e:	d512      	bpl.n	800bb66 <__swsetup_r+0x7a>
 800bb40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb42:	b141      	cbz	r1, 800bb56 <__swsetup_r+0x6a>
 800bb44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb48:	4299      	cmp	r1, r3
 800bb4a:	d002      	beq.n	800bb52 <__swsetup_r+0x66>
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7ff fb25 	bl	800b19c <_free_r>
 800bb52:	2300      	movs	r3, #0
 800bb54:	6363      	str	r3, [r4, #52]	; 0x34
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb5c:	81a3      	strh	r3, [r4, #12]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	6063      	str	r3, [r4, #4]
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	f043 0308 	orr.w	r3, r3, #8
 800bb6c:	81a3      	strh	r3, [r4, #12]
 800bb6e:	6923      	ldr	r3, [r4, #16]
 800bb70:	b94b      	cbnz	r3, 800bb86 <__swsetup_r+0x9a>
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb7c:	d003      	beq.n	800bb86 <__swsetup_r+0x9a>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4630      	mov	r0, r6
 800bb82:	f000 fa09 	bl	800bf98 <__smakebuf_r>
 800bb86:	89a0      	ldrh	r0, [r4, #12]
 800bb88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb8c:	f010 0301 	ands.w	r3, r0, #1
 800bb90:	d00a      	beq.n	800bba8 <__swsetup_r+0xbc>
 800bb92:	2300      	movs	r3, #0
 800bb94:	60a3      	str	r3, [r4, #8]
 800bb96:	6963      	ldr	r3, [r4, #20]
 800bb98:	425b      	negs	r3, r3
 800bb9a:	61a3      	str	r3, [r4, #24]
 800bb9c:	6923      	ldr	r3, [r4, #16]
 800bb9e:	b943      	cbnz	r3, 800bbb2 <__swsetup_r+0xc6>
 800bba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bba4:	d1ba      	bne.n	800bb1c <__swsetup_r+0x30>
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	0781      	lsls	r1, r0, #30
 800bbaa:	bf58      	it	pl
 800bbac:	6963      	ldrpl	r3, [r4, #20]
 800bbae:	60a3      	str	r3, [r4, #8]
 800bbb0:	e7f4      	b.n	800bb9c <__swsetup_r+0xb0>
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	e7f7      	b.n	800bba6 <__swsetup_r+0xba>
 800bbb6:	bf00      	nop
 800bbb8:	2000000c 	.word	0x2000000c
 800bbbc:	0800c71c 	.word	0x0800c71c
 800bbc0:	0800c73c 	.word	0x0800c73c
 800bbc4:	0800c6fc 	.word	0x0800c6fc

0800bbc8 <abort>:
 800bbc8:	b508      	push	{r3, lr}
 800bbca:	2006      	movs	r0, #6
 800bbcc:	f000 fa54 	bl	800c078 <raise>
 800bbd0:	2001      	movs	r0, #1
 800bbd2:	f7f6 fb3f 	bl	8002254 <_exit>
	...

0800bbd8 <__sflush_r>:
 800bbd8:	898a      	ldrh	r2, [r1, #12]
 800bbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbde:	4605      	mov	r5, r0
 800bbe0:	0710      	lsls	r0, r2, #28
 800bbe2:	460c      	mov	r4, r1
 800bbe4:	d458      	bmi.n	800bc98 <__sflush_r+0xc0>
 800bbe6:	684b      	ldr	r3, [r1, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	dc05      	bgt.n	800bbf8 <__sflush_r+0x20>
 800bbec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	dc02      	bgt.n	800bbf8 <__sflush_r+0x20>
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbfa:	2e00      	cmp	r6, #0
 800bbfc:	d0f9      	beq.n	800bbf2 <__sflush_r+0x1a>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc04:	682f      	ldr	r7, [r5, #0]
 800bc06:	602b      	str	r3, [r5, #0]
 800bc08:	d032      	beq.n	800bc70 <__sflush_r+0x98>
 800bc0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	075a      	lsls	r2, r3, #29
 800bc10:	d505      	bpl.n	800bc1e <__sflush_r+0x46>
 800bc12:	6863      	ldr	r3, [r4, #4]
 800bc14:	1ac0      	subs	r0, r0, r3
 800bc16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc18:	b10b      	cbz	r3, 800bc1e <__sflush_r+0x46>
 800bc1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc1c:	1ac0      	subs	r0, r0, r3
 800bc1e:	2300      	movs	r3, #0
 800bc20:	4602      	mov	r2, r0
 800bc22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc24:	6a21      	ldr	r1, [r4, #32]
 800bc26:	4628      	mov	r0, r5
 800bc28:	47b0      	blx	r6
 800bc2a:	1c43      	adds	r3, r0, #1
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	d106      	bne.n	800bc3e <__sflush_r+0x66>
 800bc30:	6829      	ldr	r1, [r5, #0]
 800bc32:	291d      	cmp	r1, #29
 800bc34:	d82c      	bhi.n	800bc90 <__sflush_r+0xb8>
 800bc36:	4a2a      	ldr	r2, [pc, #168]	; (800bce0 <__sflush_r+0x108>)
 800bc38:	40ca      	lsrs	r2, r1
 800bc3a:	07d6      	lsls	r6, r2, #31
 800bc3c:	d528      	bpl.n	800bc90 <__sflush_r+0xb8>
 800bc3e:	2200      	movs	r2, #0
 800bc40:	6062      	str	r2, [r4, #4]
 800bc42:	04d9      	lsls	r1, r3, #19
 800bc44:	6922      	ldr	r2, [r4, #16]
 800bc46:	6022      	str	r2, [r4, #0]
 800bc48:	d504      	bpl.n	800bc54 <__sflush_r+0x7c>
 800bc4a:	1c42      	adds	r2, r0, #1
 800bc4c:	d101      	bne.n	800bc52 <__sflush_r+0x7a>
 800bc4e:	682b      	ldr	r3, [r5, #0]
 800bc50:	b903      	cbnz	r3, 800bc54 <__sflush_r+0x7c>
 800bc52:	6560      	str	r0, [r4, #84]	; 0x54
 800bc54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc56:	602f      	str	r7, [r5, #0]
 800bc58:	2900      	cmp	r1, #0
 800bc5a:	d0ca      	beq.n	800bbf2 <__sflush_r+0x1a>
 800bc5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc60:	4299      	cmp	r1, r3
 800bc62:	d002      	beq.n	800bc6a <__sflush_r+0x92>
 800bc64:	4628      	mov	r0, r5
 800bc66:	f7ff fa99 	bl	800b19c <_free_r>
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc6e:	e7c1      	b.n	800bbf4 <__sflush_r+0x1c>
 800bc70:	6a21      	ldr	r1, [r4, #32]
 800bc72:	2301      	movs	r3, #1
 800bc74:	4628      	mov	r0, r5
 800bc76:	47b0      	blx	r6
 800bc78:	1c41      	adds	r1, r0, #1
 800bc7a:	d1c7      	bne.n	800bc0c <__sflush_r+0x34>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d0c4      	beq.n	800bc0c <__sflush_r+0x34>
 800bc82:	2b1d      	cmp	r3, #29
 800bc84:	d001      	beq.n	800bc8a <__sflush_r+0xb2>
 800bc86:	2b16      	cmp	r3, #22
 800bc88:	d101      	bne.n	800bc8e <__sflush_r+0xb6>
 800bc8a:	602f      	str	r7, [r5, #0]
 800bc8c:	e7b1      	b.n	800bbf2 <__sflush_r+0x1a>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc94:	81a3      	strh	r3, [r4, #12]
 800bc96:	e7ad      	b.n	800bbf4 <__sflush_r+0x1c>
 800bc98:	690f      	ldr	r7, [r1, #16]
 800bc9a:	2f00      	cmp	r7, #0
 800bc9c:	d0a9      	beq.n	800bbf2 <__sflush_r+0x1a>
 800bc9e:	0793      	lsls	r3, r2, #30
 800bca0:	680e      	ldr	r6, [r1, #0]
 800bca2:	bf08      	it	eq
 800bca4:	694b      	ldreq	r3, [r1, #20]
 800bca6:	600f      	str	r7, [r1, #0]
 800bca8:	bf18      	it	ne
 800bcaa:	2300      	movne	r3, #0
 800bcac:	eba6 0807 	sub.w	r8, r6, r7
 800bcb0:	608b      	str	r3, [r1, #8]
 800bcb2:	f1b8 0f00 	cmp.w	r8, #0
 800bcb6:	dd9c      	ble.n	800bbf2 <__sflush_r+0x1a>
 800bcb8:	6a21      	ldr	r1, [r4, #32]
 800bcba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcbc:	4643      	mov	r3, r8
 800bcbe:	463a      	mov	r2, r7
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b0      	blx	r6
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	dc06      	bgt.n	800bcd6 <__sflush_r+0xfe>
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcce:	81a3      	strh	r3, [r4, #12]
 800bcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd4:	e78e      	b.n	800bbf4 <__sflush_r+0x1c>
 800bcd6:	4407      	add	r7, r0
 800bcd8:	eba8 0800 	sub.w	r8, r8, r0
 800bcdc:	e7e9      	b.n	800bcb2 <__sflush_r+0xda>
 800bcde:	bf00      	nop
 800bce0:	20400001 	.word	0x20400001

0800bce4 <_fflush_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	690b      	ldr	r3, [r1, #16]
 800bce8:	4605      	mov	r5, r0
 800bcea:	460c      	mov	r4, r1
 800bcec:	b913      	cbnz	r3, 800bcf4 <_fflush_r+0x10>
 800bcee:	2500      	movs	r5, #0
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	b118      	cbz	r0, 800bcfe <_fflush_r+0x1a>
 800bcf6:	6983      	ldr	r3, [r0, #24]
 800bcf8:	b90b      	cbnz	r3, 800bcfe <_fflush_r+0x1a>
 800bcfa:	f000 f887 	bl	800be0c <__sinit>
 800bcfe:	4b14      	ldr	r3, [pc, #80]	; (800bd50 <_fflush_r+0x6c>)
 800bd00:	429c      	cmp	r4, r3
 800bd02:	d11b      	bne.n	800bd3c <_fflush_r+0x58>
 800bd04:	686c      	ldr	r4, [r5, #4]
 800bd06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d0ef      	beq.n	800bcee <_fflush_r+0xa>
 800bd0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd10:	07d0      	lsls	r0, r2, #31
 800bd12:	d404      	bmi.n	800bd1e <_fflush_r+0x3a>
 800bd14:	0599      	lsls	r1, r3, #22
 800bd16:	d402      	bmi.n	800bd1e <_fflush_r+0x3a>
 800bd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd1a:	f000 f915 	bl	800bf48 <__retarget_lock_acquire_recursive>
 800bd1e:	4628      	mov	r0, r5
 800bd20:	4621      	mov	r1, r4
 800bd22:	f7ff ff59 	bl	800bbd8 <__sflush_r>
 800bd26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd28:	07da      	lsls	r2, r3, #31
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	d4e0      	bmi.n	800bcf0 <_fflush_r+0xc>
 800bd2e:	89a3      	ldrh	r3, [r4, #12]
 800bd30:	059b      	lsls	r3, r3, #22
 800bd32:	d4dd      	bmi.n	800bcf0 <_fflush_r+0xc>
 800bd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd36:	f000 f908 	bl	800bf4a <__retarget_lock_release_recursive>
 800bd3a:	e7d9      	b.n	800bcf0 <_fflush_r+0xc>
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <_fflush_r+0x70>)
 800bd3e:	429c      	cmp	r4, r3
 800bd40:	d101      	bne.n	800bd46 <_fflush_r+0x62>
 800bd42:	68ac      	ldr	r4, [r5, #8]
 800bd44:	e7df      	b.n	800bd06 <_fflush_r+0x22>
 800bd46:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <_fflush_r+0x74>)
 800bd48:	429c      	cmp	r4, r3
 800bd4a:	bf08      	it	eq
 800bd4c:	68ec      	ldreq	r4, [r5, #12]
 800bd4e:	e7da      	b.n	800bd06 <_fflush_r+0x22>
 800bd50:	0800c71c 	.word	0x0800c71c
 800bd54:	0800c73c 	.word	0x0800c73c
 800bd58:	0800c6fc 	.word	0x0800c6fc

0800bd5c <std>:
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	b510      	push	{r4, lr}
 800bd60:	4604      	mov	r4, r0
 800bd62:	e9c0 3300 	strd	r3, r3, [r0]
 800bd66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd6a:	6083      	str	r3, [r0, #8]
 800bd6c:	8181      	strh	r1, [r0, #12]
 800bd6e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd70:	81c2      	strh	r2, [r0, #14]
 800bd72:	6183      	str	r3, [r0, #24]
 800bd74:	4619      	mov	r1, r3
 800bd76:	2208      	movs	r2, #8
 800bd78:	305c      	adds	r0, #92	; 0x5c
 800bd7a:	f7fb fdcb 	bl	8007914 <memset>
 800bd7e:	4b05      	ldr	r3, [pc, #20]	; (800bd94 <std+0x38>)
 800bd80:	6263      	str	r3, [r4, #36]	; 0x24
 800bd82:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <std+0x3c>)
 800bd84:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd86:	4b05      	ldr	r3, [pc, #20]	; (800bd9c <std+0x40>)
 800bd88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd8a:	4b05      	ldr	r3, [pc, #20]	; (800bda0 <std+0x44>)
 800bd8c:	6224      	str	r4, [r4, #32]
 800bd8e:	6323      	str	r3, [r4, #48]	; 0x30
 800bd90:	bd10      	pop	{r4, pc}
 800bd92:	bf00      	nop
 800bd94:	0800c0b1 	.word	0x0800c0b1
 800bd98:	0800c0d3 	.word	0x0800c0d3
 800bd9c:	0800c10b 	.word	0x0800c10b
 800bda0:	0800c12f 	.word	0x0800c12f

0800bda4 <_cleanup_r>:
 800bda4:	4901      	ldr	r1, [pc, #4]	; (800bdac <_cleanup_r+0x8>)
 800bda6:	f000 b8af 	b.w	800bf08 <_fwalk_reent>
 800bdaa:	bf00      	nop
 800bdac:	0800bce5 	.word	0x0800bce5

0800bdb0 <__sfmoreglue>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	2268      	movs	r2, #104	; 0x68
 800bdb4:	1e4d      	subs	r5, r1, #1
 800bdb6:	4355      	muls	r5, r2
 800bdb8:	460e      	mov	r6, r1
 800bdba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdbe:	f7ff fa59 	bl	800b274 <_malloc_r>
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	b140      	cbz	r0, 800bdd8 <__sfmoreglue+0x28>
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	e9c0 1600 	strd	r1, r6, [r0]
 800bdcc:	300c      	adds	r0, #12
 800bdce:	60a0      	str	r0, [r4, #8]
 800bdd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdd4:	f7fb fd9e 	bl	8007914 <memset>
 800bdd8:	4620      	mov	r0, r4
 800bdda:	bd70      	pop	{r4, r5, r6, pc}

0800bddc <__sfp_lock_acquire>:
 800bddc:	4801      	ldr	r0, [pc, #4]	; (800bde4 <__sfp_lock_acquire+0x8>)
 800bdde:	f000 b8b3 	b.w	800bf48 <__retarget_lock_acquire_recursive>
 800bde2:	bf00      	nop
 800bde4:	20000501 	.word	0x20000501

0800bde8 <__sfp_lock_release>:
 800bde8:	4801      	ldr	r0, [pc, #4]	; (800bdf0 <__sfp_lock_release+0x8>)
 800bdea:	f000 b8ae 	b.w	800bf4a <__retarget_lock_release_recursive>
 800bdee:	bf00      	nop
 800bdf0:	20000501 	.word	0x20000501

0800bdf4 <__sinit_lock_acquire>:
 800bdf4:	4801      	ldr	r0, [pc, #4]	; (800bdfc <__sinit_lock_acquire+0x8>)
 800bdf6:	f000 b8a7 	b.w	800bf48 <__retarget_lock_acquire_recursive>
 800bdfa:	bf00      	nop
 800bdfc:	20000502 	.word	0x20000502

0800be00 <__sinit_lock_release>:
 800be00:	4801      	ldr	r0, [pc, #4]	; (800be08 <__sinit_lock_release+0x8>)
 800be02:	f000 b8a2 	b.w	800bf4a <__retarget_lock_release_recursive>
 800be06:	bf00      	nop
 800be08:	20000502 	.word	0x20000502

0800be0c <__sinit>:
 800be0c:	b510      	push	{r4, lr}
 800be0e:	4604      	mov	r4, r0
 800be10:	f7ff fff0 	bl	800bdf4 <__sinit_lock_acquire>
 800be14:	69a3      	ldr	r3, [r4, #24]
 800be16:	b11b      	cbz	r3, 800be20 <__sinit+0x14>
 800be18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be1c:	f7ff bff0 	b.w	800be00 <__sinit_lock_release>
 800be20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be24:	6523      	str	r3, [r4, #80]	; 0x50
 800be26:	4b13      	ldr	r3, [pc, #76]	; (800be74 <__sinit+0x68>)
 800be28:	4a13      	ldr	r2, [pc, #76]	; (800be78 <__sinit+0x6c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be2e:	42a3      	cmp	r3, r4
 800be30:	bf04      	itt	eq
 800be32:	2301      	moveq	r3, #1
 800be34:	61a3      	streq	r3, [r4, #24]
 800be36:	4620      	mov	r0, r4
 800be38:	f000 f820 	bl	800be7c <__sfp>
 800be3c:	6060      	str	r0, [r4, #4]
 800be3e:	4620      	mov	r0, r4
 800be40:	f000 f81c 	bl	800be7c <__sfp>
 800be44:	60a0      	str	r0, [r4, #8]
 800be46:	4620      	mov	r0, r4
 800be48:	f000 f818 	bl	800be7c <__sfp>
 800be4c:	2200      	movs	r2, #0
 800be4e:	60e0      	str	r0, [r4, #12]
 800be50:	2104      	movs	r1, #4
 800be52:	6860      	ldr	r0, [r4, #4]
 800be54:	f7ff ff82 	bl	800bd5c <std>
 800be58:	68a0      	ldr	r0, [r4, #8]
 800be5a:	2201      	movs	r2, #1
 800be5c:	2109      	movs	r1, #9
 800be5e:	f7ff ff7d 	bl	800bd5c <std>
 800be62:	68e0      	ldr	r0, [r4, #12]
 800be64:	2202      	movs	r2, #2
 800be66:	2112      	movs	r1, #18
 800be68:	f7ff ff78 	bl	800bd5c <std>
 800be6c:	2301      	movs	r3, #1
 800be6e:	61a3      	str	r3, [r4, #24]
 800be70:	e7d2      	b.n	800be18 <__sinit+0xc>
 800be72:	bf00      	nop
 800be74:	0800c2b4 	.word	0x0800c2b4
 800be78:	0800bda5 	.word	0x0800bda5

0800be7c <__sfp>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	4607      	mov	r7, r0
 800be80:	f7ff ffac 	bl	800bddc <__sfp_lock_acquire>
 800be84:	4b1e      	ldr	r3, [pc, #120]	; (800bf00 <__sfp+0x84>)
 800be86:	681e      	ldr	r6, [r3, #0]
 800be88:	69b3      	ldr	r3, [r6, #24]
 800be8a:	b913      	cbnz	r3, 800be92 <__sfp+0x16>
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7ff ffbd 	bl	800be0c <__sinit>
 800be92:	3648      	adds	r6, #72	; 0x48
 800be94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be98:	3b01      	subs	r3, #1
 800be9a:	d503      	bpl.n	800bea4 <__sfp+0x28>
 800be9c:	6833      	ldr	r3, [r6, #0]
 800be9e:	b30b      	cbz	r3, 800bee4 <__sfp+0x68>
 800bea0:	6836      	ldr	r6, [r6, #0]
 800bea2:	e7f7      	b.n	800be94 <__sfp+0x18>
 800bea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bea8:	b9d5      	cbnz	r5, 800bee0 <__sfp+0x64>
 800beaa:	4b16      	ldr	r3, [pc, #88]	; (800bf04 <__sfp+0x88>)
 800beac:	60e3      	str	r3, [r4, #12]
 800beae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800beb2:	6665      	str	r5, [r4, #100]	; 0x64
 800beb4:	f000 f847 	bl	800bf46 <__retarget_lock_init_recursive>
 800beb8:	f7ff ff96 	bl	800bde8 <__sfp_lock_release>
 800bebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bec0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bec4:	6025      	str	r5, [r4, #0]
 800bec6:	61a5      	str	r5, [r4, #24]
 800bec8:	2208      	movs	r2, #8
 800beca:	4629      	mov	r1, r5
 800becc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bed0:	f7fb fd20 	bl	8007914 <memset>
 800bed4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bed8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bedc:	4620      	mov	r0, r4
 800bede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee0:	3468      	adds	r4, #104	; 0x68
 800bee2:	e7d9      	b.n	800be98 <__sfp+0x1c>
 800bee4:	2104      	movs	r1, #4
 800bee6:	4638      	mov	r0, r7
 800bee8:	f7ff ff62 	bl	800bdb0 <__sfmoreglue>
 800beec:	4604      	mov	r4, r0
 800beee:	6030      	str	r0, [r6, #0]
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d1d5      	bne.n	800bea0 <__sfp+0x24>
 800bef4:	f7ff ff78 	bl	800bde8 <__sfp_lock_release>
 800bef8:	230c      	movs	r3, #12
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	e7ee      	b.n	800bedc <__sfp+0x60>
 800befe:	bf00      	nop
 800bf00:	0800c2b4 	.word	0x0800c2b4
 800bf04:	ffff0001 	.word	0xffff0001

0800bf08 <_fwalk_reent>:
 800bf08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	4688      	mov	r8, r1
 800bf10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf14:	2700      	movs	r7, #0
 800bf16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf1a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf1e:	d505      	bpl.n	800bf2c <_fwalk_reent+0x24>
 800bf20:	6824      	ldr	r4, [r4, #0]
 800bf22:	2c00      	cmp	r4, #0
 800bf24:	d1f7      	bne.n	800bf16 <_fwalk_reent+0xe>
 800bf26:	4638      	mov	r0, r7
 800bf28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf2c:	89ab      	ldrh	r3, [r5, #12]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d907      	bls.n	800bf42 <_fwalk_reent+0x3a>
 800bf32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf36:	3301      	adds	r3, #1
 800bf38:	d003      	beq.n	800bf42 <_fwalk_reent+0x3a>
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	47c0      	blx	r8
 800bf40:	4307      	orrs	r7, r0
 800bf42:	3568      	adds	r5, #104	; 0x68
 800bf44:	e7e9      	b.n	800bf1a <_fwalk_reent+0x12>

0800bf46 <__retarget_lock_init_recursive>:
 800bf46:	4770      	bx	lr

0800bf48 <__retarget_lock_acquire_recursive>:
 800bf48:	4770      	bx	lr

0800bf4a <__retarget_lock_release_recursive>:
 800bf4a:	4770      	bx	lr

0800bf4c <__swhatbuf_r>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	460e      	mov	r6, r1
 800bf50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf54:	2900      	cmp	r1, #0
 800bf56:	b096      	sub	sp, #88	; 0x58
 800bf58:	4614      	mov	r4, r2
 800bf5a:	461d      	mov	r5, r3
 800bf5c:	da08      	bge.n	800bf70 <__swhatbuf_r+0x24>
 800bf5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	602a      	str	r2, [r5, #0]
 800bf66:	061a      	lsls	r2, r3, #24
 800bf68:	d410      	bmi.n	800bf8c <__swhatbuf_r+0x40>
 800bf6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf6e:	e00e      	b.n	800bf8e <__swhatbuf_r+0x42>
 800bf70:	466a      	mov	r2, sp
 800bf72:	f000 f903 	bl	800c17c <_fstat_r>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	dbf1      	blt.n	800bf5e <__swhatbuf_r+0x12>
 800bf7a:	9a01      	ldr	r2, [sp, #4]
 800bf7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf84:	425a      	negs	r2, r3
 800bf86:	415a      	adcs	r2, r3
 800bf88:	602a      	str	r2, [r5, #0]
 800bf8a:	e7ee      	b.n	800bf6a <__swhatbuf_r+0x1e>
 800bf8c:	2340      	movs	r3, #64	; 0x40
 800bf8e:	2000      	movs	r0, #0
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	b016      	add	sp, #88	; 0x58
 800bf94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf98 <__smakebuf_r>:
 800bf98:	898b      	ldrh	r3, [r1, #12]
 800bf9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf9c:	079d      	lsls	r5, r3, #30
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	d507      	bpl.n	800bfb4 <__smakebuf_r+0x1c>
 800bfa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	6123      	str	r3, [r4, #16]
 800bfac:	2301      	movs	r3, #1
 800bfae:	6163      	str	r3, [r4, #20]
 800bfb0:	b002      	add	sp, #8
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	ab01      	add	r3, sp, #4
 800bfb6:	466a      	mov	r2, sp
 800bfb8:	f7ff ffc8 	bl	800bf4c <__swhatbuf_r>
 800bfbc:	9900      	ldr	r1, [sp, #0]
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f7ff f957 	bl	800b274 <_malloc_r>
 800bfc6:	b948      	cbnz	r0, 800bfdc <__smakebuf_r+0x44>
 800bfc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfcc:	059a      	lsls	r2, r3, #22
 800bfce:	d4ef      	bmi.n	800bfb0 <__smakebuf_r+0x18>
 800bfd0:	f023 0303 	bic.w	r3, r3, #3
 800bfd4:	f043 0302 	orr.w	r3, r3, #2
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	e7e3      	b.n	800bfa4 <__smakebuf_r+0xc>
 800bfdc:	4b0d      	ldr	r3, [pc, #52]	; (800c014 <__smakebuf_r+0x7c>)
 800bfde:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	6020      	str	r0, [r4, #0]
 800bfe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	9b00      	ldr	r3, [sp, #0]
 800bfec:	6163      	str	r3, [r4, #20]
 800bfee:	9b01      	ldr	r3, [sp, #4]
 800bff0:	6120      	str	r0, [r4, #16]
 800bff2:	b15b      	cbz	r3, 800c00c <__smakebuf_r+0x74>
 800bff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff8:	4630      	mov	r0, r6
 800bffa:	f000 f8d1 	bl	800c1a0 <_isatty_r>
 800bffe:	b128      	cbz	r0, 800c00c <__smakebuf_r+0x74>
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	f023 0303 	bic.w	r3, r3, #3
 800c006:	f043 0301 	orr.w	r3, r3, #1
 800c00a:	81a3      	strh	r3, [r4, #12]
 800c00c:	89a0      	ldrh	r0, [r4, #12]
 800c00e:	4305      	orrs	r5, r0
 800c010:	81a5      	strh	r5, [r4, #12]
 800c012:	e7cd      	b.n	800bfb0 <__smakebuf_r+0x18>
 800c014:	0800bda5 	.word	0x0800bda5

0800c018 <_malloc_usable_size_r>:
 800c018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c01c:	1f18      	subs	r0, r3, #4
 800c01e:	2b00      	cmp	r3, #0
 800c020:	bfbc      	itt	lt
 800c022:	580b      	ldrlt	r3, [r1, r0]
 800c024:	18c0      	addlt	r0, r0, r3
 800c026:	4770      	bx	lr

0800c028 <_raise_r>:
 800c028:	291f      	cmp	r1, #31
 800c02a:	b538      	push	{r3, r4, r5, lr}
 800c02c:	4604      	mov	r4, r0
 800c02e:	460d      	mov	r5, r1
 800c030:	d904      	bls.n	800c03c <_raise_r+0x14>
 800c032:	2316      	movs	r3, #22
 800c034:	6003      	str	r3, [r0, #0]
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	bd38      	pop	{r3, r4, r5, pc}
 800c03c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c03e:	b112      	cbz	r2, 800c046 <_raise_r+0x1e>
 800c040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c044:	b94b      	cbnz	r3, 800c05a <_raise_r+0x32>
 800c046:	4620      	mov	r0, r4
 800c048:	f000 f830 	bl	800c0ac <_getpid_r>
 800c04c:	462a      	mov	r2, r5
 800c04e:	4601      	mov	r1, r0
 800c050:	4620      	mov	r0, r4
 800c052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c056:	f000 b817 	b.w	800c088 <_kill_r>
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d00a      	beq.n	800c074 <_raise_r+0x4c>
 800c05e:	1c59      	adds	r1, r3, #1
 800c060:	d103      	bne.n	800c06a <_raise_r+0x42>
 800c062:	2316      	movs	r3, #22
 800c064:	6003      	str	r3, [r0, #0]
 800c066:	2001      	movs	r0, #1
 800c068:	e7e7      	b.n	800c03a <_raise_r+0x12>
 800c06a:	2400      	movs	r4, #0
 800c06c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c070:	4628      	mov	r0, r5
 800c072:	4798      	blx	r3
 800c074:	2000      	movs	r0, #0
 800c076:	e7e0      	b.n	800c03a <_raise_r+0x12>

0800c078 <raise>:
 800c078:	4b02      	ldr	r3, [pc, #8]	; (800c084 <raise+0xc>)
 800c07a:	4601      	mov	r1, r0
 800c07c:	6818      	ldr	r0, [r3, #0]
 800c07e:	f7ff bfd3 	b.w	800c028 <_raise_r>
 800c082:	bf00      	nop
 800c084:	2000000c 	.word	0x2000000c

0800c088 <_kill_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d07      	ldr	r5, [pc, #28]	; (800c0a8 <_kill_r+0x20>)
 800c08c:	2300      	movs	r3, #0
 800c08e:	4604      	mov	r4, r0
 800c090:	4608      	mov	r0, r1
 800c092:	4611      	mov	r1, r2
 800c094:	602b      	str	r3, [r5, #0]
 800c096:	f7f6 f8cd 	bl	8002234 <_kill>
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	d102      	bne.n	800c0a4 <_kill_r+0x1c>
 800c09e:	682b      	ldr	r3, [r5, #0]
 800c0a0:	b103      	cbz	r3, 800c0a4 <_kill_r+0x1c>
 800c0a2:	6023      	str	r3, [r4, #0]
 800c0a4:	bd38      	pop	{r3, r4, r5, pc}
 800c0a6:	bf00      	nop
 800c0a8:	200004fc 	.word	0x200004fc

0800c0ac <_getpid_r>:
 800c0ac:	f7f6 b8ba 	b.w	8002224 <_getpid>

0800c0b0 <__sread>:
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b8:	f000 f894 	bl	800c1e4 <_read_r>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	bfab      	itete	ge
 800c0c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0c2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0c4:	181b      	addge	r3, r3, r0
 800c0c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0ca:	bfac      	ite	ge
 800c0cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0ce:	81a3      	strhlt	r3, [r4, #12]
 800c0d0:	bd10      	pop	{r4, pc}

0800c0d2 <__swrite>:
 800c0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d6:	461f      	mov	r7, r3
 800c0d8:	898b      	ldrh	r3, [r1, #12]
 800c0da:	05db      	lsls	r3, r3, #23
 800c0dc:	4605      	mov	r5, r0
 800c0de:	460c      	mov	r4, r1
 800c0e0:	4616      	mov	r6, r2
 800c0e2:	d505      	bpl.n	800c0f0 <__swrite+0x1e>
 800c0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f000 f868 	bl	800c1c0 <_lseek_r>
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0fa:	81a3      	strh	r3, [r4, #12]
 800c0fc:	4632      	mov	r2, r6
 800c0fe:	463b      	mov	r3, r7
 800c100:	4628      	mov	r0, r5
 800c102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c106:	f000 b817 	b.w	800c138 <_write_r>

0800c10a <__sseek>:
 800c10a:	b510      	push	{r4, lr}
 800c10c:	460c      	mov	r4, r1
 800c10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c112:	f000 f855 	bl	800c1c0 <_lseek_r>
 800c116:	1c43      	adds	r3, r0, #1
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	bf15      	itete	ne
 800c11c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c11e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c126:	81a3      	strheq	r3, [r4, #12]
 800c128:	bf18      	it	ne
 800c12a:	81a3      	strhne	r3, [r4, #12]
 800c12c:	bd10      	pop	{r4, pc}

0800c12e <__sclose>:
 800c12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c132:	f000 b813 	b.w	800c15c <_close_r>
	...

0800c138 <_write_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	; (800c158 <_write_r+0x20>)
 800c13c:	4604      	mov	r4, r0
 800c13e:	4608      	mov	r0, r1
 800c140:	4611      	mov	r1, r2
 800c142:	2200      	movs	r2, #0
 800c144:	602a      	str	r2, [r5, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	f7f6 f8ab 	bl	80022a2 <_write>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_write_r+0x1e>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_write_r+0x1e>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	200004fc 	.word	0x200004fc

0800c15c <_close_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4d06      	ldr	r5, [pc, #24]	; (800c178 <_close_r+0x1c>)
 800c160:	2300      	movs	r3, #0
 800c162:	4604      	mov	r4, r0
 800c164:	4608      	mov	r0, r1
 800c166:	602b      	str	r3, [r5, #0]
 800c168:	f7f6 f8b7 	bl	80022da <_close>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_close_r+0x1a>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	b103      	cbz	r3, 800c176 <_close_r+0x1a>
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	200004fc 	.word	0x200004fc

0800c17c <_fstat_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d07      	ldr	r5, [pc, #28]	; (800c19c <_fstat_r+0x20>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	4611      	mov	r1, r2
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	f7f6 f8b2 	bl	80022f2 <_fstat>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d102      	bne.n	800c198 <_fstat_r+0x1c>
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	b103      	cbz	r3, 800c198 <_fstat_r+0x1c>
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	bf00      	nop
 800c19c:	200004fc 	.word	0x200004fc

0800c1a0 <_isatty_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d06      	ldr	r5, [pc, #24]	; (800c1bc <_isatty_r+0x1c>)
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	4608      	mov	r0, r1
 800c1aa:	602b      	str	r3, [r5, #0]
 800c1ac:	f7f6 f8b1 	bl	8002312 <_isatty>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d102      	bne.n	800c1ba <_isatty_r+0x1a>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	b103      	cbz	r3, 800c1ba <_isatty_r+0x1a>
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	200004fc 	.word	0x200004fc

0800c1c0 <_lseek_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4d07      	ldr	r5, [pc, #28]	; (800c1e0 <_lseek_r+0x20>)
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	4608      	mov	r0, r1
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	602a      	str	r2, [r5, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f7f6 f8aa 	bl	8002328 <_lseek>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_lseek_r+0x1e>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_lseek_r+0x1e>
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	200004fc 	.word	0x200004fc

0800c1e4 <_read_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4d07      	ldr	r5, [pc, #28]	; (800c204 <_read_r+0x20>)
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	4608      	mov	r0, r1
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	602a      	str	r2, [r5, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f7f6 f838 	bl	8002268 <_read>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_read_r+0x1e>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_read_r+0x1e>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	200004fc 	.word	0x200004fc

0800c208 <_init>:
 800c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20a:	bf00      	nop
 800c20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20e:	bc08      	pop	{r3}
 800c210:	469e      	mov	lr, r3
 800c212:	4770      	bx	lr

0800c214 <_fini>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	bf00      	nop
 800c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21a:	bc08      	pop	{r3}
 800c21c:	469e      	mov	lr, r3
 800c21e:	4770      	bx	lr
